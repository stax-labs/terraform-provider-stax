// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package server

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/labstack/echo/v4"
	. "github.com/stax-labs/terraform-provider-stax/internal/api/openapi/permissionssets/models"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List permission sets for an organisation
	// (GET /permission-sets)
	ListPermissionSets(ctx echo.Context, params ListPermissionSetsParams) error
	// Create permission set
	// (POST /permission-sets)
	CreatePermissionSet(ctx echo.Context) error
	// List AWS managed policies
	// (GET /permission-sets/aws-managed-policies)
	ListAWSManagedPolicies(ctx echo.Context) error
	// List roles
	// (GET /permission-sets/roles)
	ListRoles(ctx echo.Context, params ListRolesParams) error
	// List my roles
	// (GET /permission-sets/roles/me)
	ListMyRoles(ctx echo.Context, params ListMyRolesParams) error
	// Delete permission set
	// (DELETE /permission-sets/{permission_set_id})
	DeletePermissionSet(ctx echo.Context, permissionSetId PermissionSetID) error
	// Get permission set
	// (GET /permission-sets/{permission_set_id})
	GetPermissionSet(ctx echo.Context, permissionSetId PermissionSetID) error
	// Update permission set
	// (PUT /permission-sets/{permission_set_id})
	UpdatePermissionSet(ctx echo.Context, permissionSetId PermissionSetID) error
	// Get assignments
	// (GET /permission-sets/{permission_set_id}/assignments)
	ListPermissionSetAssignments(ctx echo.Context, permissionSetId PermissionSetID, params ListPermissionSetAssignmentsParams) error
	// Create assignments
	// (POST /permission-sets/{permission_set_id}/assignments)
	CreatePermissionSetAssignments(ctx echo.Context, permissionSetId PermissionSetID) error
	// Delete assignment
	// (DELETE /permission-sets/{permission_set_id}/assignments/{assignment_id})
	DeletePermissionSetAssignment(ctx echo.Context, permissionSetId PermissionSetID, assignmentId AssignmentID) error
	// Redeploy assignment
	// (PUT /permission-sets/{permission_set_id}/assignments/{assignment_id})
	RedeployPermissionSetAssignment(ctx echo.Context, permissionSetId PermissionSetID, assignmentId AssignmentID) error
	// Get the OpenAPI specification document for this API.
	// (GET /public/api-document)
	GetAPIDocument(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListPermissionSets converts echo context to params.
func (w *ServerInterfaceWrapper) ListPermissionSets(ctx echo.Context) error {
	var err error

	ctx.Set(Sigv4Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPermissionSetsParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "page_token" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_token", ctx.QueryParams(), &params.PageToken)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page_token: %s", err))
	}

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// ------------- Optional query parameter "created_by" -------------

	err = runtime.BindQueryParameter("form", true, false, "created_by", ctx.QueryParams(), &params.CreatedBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter created_by: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListPermissionSets(ctx, params)
	return err
}

// CreatePermissionSet converts echo context to params.
func (w *ServerInterfaceWrapper) CreatePermissionSet(ctx echo.Context) error {
	var err error

	ctx.Set(Sigv4Scopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreatePermissionSet(ctx)
	return err
}

// ListAWSManagedPolicies converts echo context to params.
func (w *ServerInterfaceWrapper) ListAWSManagedPolicies(ctx echo.Context) error {
	var err error

	ctx.Set(Sigv4Scopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListAWSManagedPolicies(ctx)
	return err
}

// ListRoles converts echo context to params.
func (w *ServerInterfaceWrapper) ListRoles(ctx echo.Context) error {
	var err error

	ctx.Set(Sigv4Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListRolesParams
	// ------------- Optional query parameter "page_token" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_token", ctx.QueryParams(), &params.PageToken)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page_token: %s", err))
	}

	// ------------- Optional query parameter "account_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "account_id", ctx.QueryParams(), &params.AccountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListRoles(ctx, params)
	return err
}

// ListMyRoles converts echo context to params.
func (w *ServerInterfaceWrapper) ListMyRoles(ctx echo.Context) error {
	var err error

	ctx.Set(Sigv4Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListMyRolesParams
	// ------------- Optional query parameter "page_token" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_token", ctx.QueryParams(), &params.PageToken)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page_token: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListMyRoles(ctx, params)
	return err
}

// DeletePermissionSet converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePermissionSet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "permission_set_id" -------------
	var permissionSetId PermissionSetID

	err = runtime.BindStyledParameterWithLocation("simple", false, "permission_set_id", runtime.ParamLocationPath, ctx.Param("permission_set_id"), &permissionSetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter permission_set_id: %s", err))
	}

	ctx.Set(Sigv4Scopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeletePermissionSet(ctx, permissionSetId)
	return err
}

// GetPermissionSet converts echo context to params.
func (w *ServerInterfaceWrapper) GetPermissionSet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "permission_set_id" -------------
	var permissionSetId PermissionSetID

	err = runtime.BindStyledParameterWithLocation("simple", false, "permission_set_id", runtime.ParamLocationPath, ctx.Param("permission_set_id"), &permissionSetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter permission_set_id: %s", err))
	}

	ctx.Set(Sigv4Scopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPermissionSet(ctx, permissionSetId)
	return err
}

// UpdatePermissionSet converts echo context to params.
func (w *ServerInterfaceWrapper) UpdatePermissionSet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "permission_set_id" -------------
	var permissionSetId PermissionSetID

	err = runtime.BindStyledParameterWithLocation("simple", false, "permission_set_id", runtime.ParamLocationPath, ctx.Param("permission_set_id"), &permissionSetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter permission_set_id: %s", err))
	}

	ctx.Set(Sigv4Scopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdatePermissionSet(ctx, permissionSetId)
	return err
}

// ListPermissionSetAssignments converts echo context to params.
func (w *ServerInterfaceWrapper) ListPermissionSetAssignments(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "permission_set_id" -------------
	var permissionSetId PermissionSetID

	err = runtime.BindStyledParameterWithLocation("simple", false, "permission_set_id", runtime.ParamLocationPath, ctx.Param("permission_set_id"), &permissionSetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter permission_set_id: %s", err))
	}

	ctx.Set(Sigv4Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPermissionSetAssignmentsParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "page_token" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_token", ctx.QueryParams(), &params.PageToken)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page_token: %s", err))
	}

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// ------------- Optional query parameter "created_by" -------------

	err = runtime.BindQueryParameter("form", true, false, "created_by", ctx.QueryParams(), &params.CreatedBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter created_by: %s", err))
	}

	// ------------- Optional query parameter "group" -------------

	err = runtime.BindQueryParameter("form", true, false, "group", ctx.QueryParams(), &params.Group)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter group: %s", err))
	}

	// ------------- Optional query parameter "account_type" -------------

	err = runtime.BindQueryParameter("form", true, false, "account_type", ctx.QueryParams(), &params.AccountType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_type: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListPermissionSetAssignments(ctx, permissionSetId, params)
	return err
}

// CreatePermissionSetAssignments converts echo context to params.
func (w *ServerInterfaceWrapper) CreatePermissionSetAssignments(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "permission_set_id" -------------
	var permissionSetId PermissionSetID

	err = runtime.BindStyledParameterWithLocation("simple", false, "permission_set_id", runtime.ParamLocationPath, ctx.Param("permission_set_id"), &permissionSetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter permission_set_id: %s", err))
	}

	ctx.Set(Sigv4Scopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreatePermissionSetAssignments(ctx, permissionSetId)
	return err
}

// DeletePermissionSetAssignment converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePermissionSetAssignment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "permission_set_id" -------------
	var permissionSetId PermissionSetID

	err = runtime.BindStyledParameterWithLocation("simple", false, "permission_set_id", runtime.ParamLocationPath, ctx.Param("permission_set_id"), &permissionSetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter permission_set_id: %s", err))
	}

	// ------------- Path parameter "assignment_id" -------------
	var assignmentId AssignmentID

	err = runtime.BindStyledParameterWithLocation("simple", false, "assignment_id", runtime.ParamLocationPath, ctx.Param("assignment_id"), &assignmentId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter assignment_id: %s", err))
	}

	ctx.Set(Sigv4Scopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeletePermissionSetAssignment(ctx, permissionSetId, assignmentId)
	return err
}

// RedeployPermissionSetAssignment converts echo context to params.
func (w *ServerInterfaceWrapper) RedeployPermissionSetAssignment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "permission_set_id" -------------
	var permissionSetId PermissionSetID

	err = runtime.BindStyledParameterWithLocation("simple", false, "permission_set_id", runtime.ParamLocationPath, ctx.Param("permission_set_id"), &permissionSetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter permission_set_id: %s", err))
	}

	// ------------- Path parameter "assignment_id" -------------
	var assignmentId AssignmentID

	err = runtime.BindStyledParameterWithLocation("simple", false, "assignment_id", runtime.ParamLocationPath, ctx.Param("assignment_id"), &assignmentId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter assignment_id: %s", err))
	}

	ctx.Set(Sigv4Scopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RedeployPermissionSetAssignment(ctx, permissionSetId, assignmentId)
	return err
}

// GetAPIDocument converts echo context to params.
func (w *ServerInterfaceWrapper) GetAPIDocument(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAPIDocument(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/permission-sets", wrapper.ListPermissionSets)
	router.POST(baseURL+"/permission-sets", wrapper.CreatePermissionSet)
	router.GET(baseURL+"/permission-sets/aws-managed-policies", wrapper.ListAWSManagedPolicies)
	router.GET(baseURL+"/permission-sets/roles", wrapper.ListRoles)
	router.GET(baseURL+"/permission-sets/roles/me", wrapper.ListMyRoles)
	router.DELETE(baseURL+"/permission-sets/:permission_set_id", wrapper.DeletePermissionSet)
	router.GET(baseURL+"/permission-sets/:permission_set_id", wrapper.GetPermissionSet)
	router.PUT(baseURL+"/permission-sets/:permission_set_id", wrapper.UpdatePermissionSet)
	router.GET(baseURL+"/permission-sets/:permission_set_id/assignments", wrapper.ListPermissionSetAssignments)
	router.POST(baseURL+"/permission-sets/:permission_set_id/assignments", wrapper.CreatePermissionSetAssignments)
	router.DELETE(baseURL+"/permission-sets/:permission_set_id/assignments/:assignment_id", wrapper.DeletePermissionSetAssignment)
	router.PUT(baseURL+"/permission-sets/:permission_set_id/assignments/:assignment_id", wrapper.RedeployPermissionSetAssignment)
	router.GET(baseURL+"/public/api-document", wrapper.GetAPIDocument)

}
