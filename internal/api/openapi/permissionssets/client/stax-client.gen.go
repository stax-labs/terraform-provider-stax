// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package client

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
	. "github.com/stax-labs/terraform-provider-stax/internal/api/openapi/permissionssets/models"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ListPermissionSets request
	ListPermissionSets(ctx context.Context, params *ListPermissionSetsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePermissionSetWithBody request with any body
	CreatePermissionSetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreatePermissionSet(ctx context.Context, body CreatePermissionSetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListAWSManagedPolicies request
	ListAWSManagedPolicies(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListRoles request
	ListRoles(ctx context.Context, params *ListRolesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListMyRoles request
	ListMyRoles(ctx context.Context, params *ListMyRolesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePermissionSet request
	DeletePermissionSet(ctx context.Context, permissionSetId PermissionSetID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPermissionSet request
	GetPermissionSet(ctx context.Context, permissionSetId PermissionSetID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatePermissionSetWithBody request with any body
	UpdatePermissionSetWithBody(ctx context.Context, permissionSetId PermissionSetID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdatePermissionSet(ctx context.Context, permissionSetId PermissionSetID, body UpdatePermissionSetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListPermissionSetAssignments request
	ListPermissionSetAssignments(ctx context.Context, permissionSetId PermissionSetID, params *ListPermissionSetAssignmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePermissionSetAssignmentsWithBody request with any body
	CreatePermissionSetAssignmentsWithBody(ctx context.Context, permissionSetId PermissionSetID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreatePermissionSetAssignments(ctx context.Context, permissionSetId PermissionSetID, body CreatePermissionSetAssignmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePermissionSetAssignment request
	DeletePermissionSetAssignment(ctx context.Context, permissionSetId PermissionSetID, assignmentId AssignmentID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RedeployPermissionSetAssignment request
	RedeployPermissionSetAssignment(ctx context.Context, permissionSetId PermissionSetID, assignmentId AssignmentID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAPIDocument request
	GetAPIDocument(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) ListPermissionSets(ctx context.Context, params *ListPermissionSetsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPermissionSetsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePermissionSetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePermissionSetRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePermissionSet(ctx context.Context, body CreatePermissionSetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePermissionSetRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListAWSManagedPolicies(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListAWSManagedPoliciesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListRoles(ctx context.Context, params *ListRolesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListRolesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListMyRoles(ctx context.Context, params *ListMyRolesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListMyRolesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePermissionSet(ctx context.Context, permissionSetId PermissionSetID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePermissionSetRequest(c.Server, permissionSetId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPermissionSet(ctx context.Context, permissionSetId PermissionSetID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPermissionSetRequest(c.Server, permissionSetId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePermissionSetWithBody(ctx context.Context, permissionSetId PermissionSetID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePermissionSetRequestWithBody(c.Server, permissionSetId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePermissionSet(ctx context.Context, permissionSetId PermissionSetID, body UpdatePermissionSetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePermissionSetRequest(c.Server, permissionSetId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPermissionSetAssignments(ctx context.Context, permissionSetId PermissionSetID, params *ListPermissionSetAssignmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPermissionSetAssignmentsRequest(c.Server, permissionSetId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePermissionSetAssignmentsWithBody(ctx context.Context, permissionSetId PermissionSetID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePermissionSetAssignmentsRequestWithBody(c.Server, permissionSetId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePermissionSetAssignments(ctx context.Context, permissionSetId PermissionSetID, body CreatePermissionSetAssignmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePermissionSetAssignmentsRequest(c.Server, permissionSetId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePermissionSetAssignment(ctx context.Context, permissionSetId PermissionSetID, assignmentId AssignmentID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePermissionSetAssignmentRequest(c.Server, permissionSetId, assignmentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RedeployPermissionSetAssignment(ctx context.Context, permissionSetId PermissionSetID, assignmentId AssignmentID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRedeployPermissionSetAssignmentRequest(c.Server, permissionSetId, assignmentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAPIDocument(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAPIDocumentRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewListPermissionSetsRequest generates requests for ListPermissionSets
func NewListPermissionSetsRequest(server string, params *ListPermissionSetsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/permission-sets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_token", runtime.ParamLocationQuery, *params.PageToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_by", runtime.ParamLocationQuery, *params.CreatedBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreatePermissionSetRequest calls the generic CreatePermissionSet builder with application/json body
func NewCreatePermissionSetRequest(server string, body CreatePermissionSetJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreatePermissionSetRequestWithBody(server, "application/json", bodyReader)
}

// NewCreatePermissionSetRequestWithBody generates requests for CreatePermissionSet with any type of body
func NewCreatePermissionSetRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/permission-sets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListAWSManagedPoliciesRequest generates requests for ListAWSManagedPolicies
func NewListAWSManagedPoliciesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/permission-sets/aws-managed-policies")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListRolesRequest generates requests for ListRoles
func NewListRolesRequest(server string, params *ListRolesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/permission-sets/roles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_token", runtime.ParamLocationQuery, *params.PageToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AccountId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "account_id", runtime.ParamLocationQuery, *params.AccountId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListMyRolesRequest generates requests for ListMyRoles
func NewListMyRolesRequest(server string, params *ListMyRolesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/permission-sets/roles/me")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_token", runtime.ParamLocationQuery, *params.PageToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeletePermissionSetRequest generates requests for DeletePermissionSet
func NewDeletePermissionSetRequest(server string, permissionSetId PermissionSetID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "permission_set_id", runtime.ParamLocationPath, permissionSetId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/permission-sets/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPermissionSetRequest generates requests for GetPermissionSet
func NewGetPermissionSetRequest(server string, permissionSetId PermissionSetID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "permission_set_id", runtime.ParamLocationPath, permissionSetId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/permission-sets/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdatePermissionSetRequest calls the generic UpdatePermissionSet builder with application/json body
func NewUpdatePermissionSetRequest(server string, permissionSetId PermissionSetID, body UpdatePermissionSetJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdatePermissionSetRequestWithBody(server, permissionSetId, "application/json", bodyReader)
}

// NewUpdatePermissionSetRequestWithBody generates requests for UpdatePermissionSet with any type of body
func NewUpdatePermissionSetRequestWithBody(server string, permissionSetId PermissionSetID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "permission_set_id", runtime.ParamLocationPath, permissionSetId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/permission-sets/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListPermissionSetAssignmentsRequest generates requests for ListPermissionSetAssignments
func NewListPermissionSetAssignmentsRequest(server string, permissionSetId PermissionSetID, params *ListPermissionSetAssignmentsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "permission_set_id", runtime.ParamLocationPath, permissionSetId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/permission-sets/%s/assignments", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_token", runtime.ParamLocationQuery, *params.PageToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_by", runtime.ParamLocationQuery, *params.CreatedBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Group != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "group", runtime.ParamLocationQuery, *params.Group); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AccountType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "account_type", runtime.ParamLocationQuery, *params.AccountType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreatePermissionSetAssignmentsRequest calls the generic CreatePermissionSetAssignments builder with application/json body
func NewCreatePermissionSetAssignmentsRequest(server string, permissionSetId PermissionSetID, body CreatePermissionSetAssignmentsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreatePermissionSetAssignmentsRequestWithBody(server, permissionSetId, "application/json", bodyReader)
}

// NewCreatePermissionSetAssignmentsRequestWithBody generates requests for CreatePermissionSetAssignments with any type of body
func NewCreatePermissionSetAssignmentsRequestWithBody(server string, permissionSetId PermissionSetID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "permission_set_id", runtime.ParamLocationPath, permissionSetId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/permission-sets/%s/assignments", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletePermissionSetAssignmentRequest generates requests for DeletePermissionSetAssignment
func NewDeletePermissionSetAssignmentRequest(server string, permissionSetId PermissionSetID, assignmentId AssignmentID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "permission_set_id", runtime.ParamLocationPath, permissionSetId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "assignment_id", runtime.ParamLocationPath, assignmentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/permission-sets/%s/assignments/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRedeployPermissionSetAssignmentRequest generates requests for RedeployPermissionSetAssignment
func NewRedeployPermissionSetAssignmentRequest(server string, permissionSetId PermissionSetID, assignmentId AssignmentID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "permission_set_id", runtime.ParamLocationPath, permissionSetId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "assignment_id", runtime.ParamLocationPath, assignmentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/permission-sets/%s/assignments/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAPIDocumentRequest generates requests for GetAPIDocument
func NewGetAPIDocumentRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/public/api-document")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ListPermissionSetsWithResponse request
	ListPermissionSetsWithResponse(ctx context.Context, params *ListPermissionSetsParams, reqEditors ...RequestEditorFn) (*ListPermissionSetsResponse, error)

	// CreatePermissionSetWithBodyWithResponse request with any body
	CreatePermissionSetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePermissionSetResponse, error)

	CreatePermissionSetWithResponse(ctx context.Context, body CreatePermissionSetJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePermissionSetResponse, error)

	// ListAWSManagedPoliciesWithResponse request
	ListAWSManagedPoliciesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListAWSManagedPoliciesResponse, error)

	// ListRolesWithResponse request
	ListRolesWithResponse(ctx context.Context, params *ListRolesParams, reqEditors ...RequestEditorFn) (*ListRolesResponse, error)

	// ListMyRolesWithResponse request
	ListMyRolesWithResponse(ctx context.Context, params *ListMyRolesParams, reqEditors ...RequestEditorFn) (*ListMyRolesResponse, error)

	// DeletePermissionSetWithResponse request
	DeletePermissionSetWithResponse(ctx context.Context, permissionSetId PermissionSetID, reqEditors ...RequestEditorFn) (*DeletePermissionSetResponse, error)

	// GetPermissionSetWithResponse request
	GetPermissionSetWithResponse(ctx context.Context, permissionSetId PermissionSetID, reqEditors ...RequestEditorFn) (*GetPermissionSetResponse, error)

	// UpdatePermissionSetWithBodyWithResponse request with any body
	UpdatePermissionSetWithBodyWithResponse(ctx context.Context, permissionSetId PermissionSetID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePermissionSetResponse, error)

	UpdatePermissionSetWithResponse(ctx context.Context, permissionSetId PermissionSetID, body UpdatePermissionSetJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePermissionSetResponse, error)

	// ListPermissionSetAssignmentsWithResponse request
	ListPermissionSetAssignmentsWithResponse(ctx context.Context, permissionSetId PermissionSetID, params *ListPermissionSetAssignmentsParams, reqEditors ...RequestEditorFn) (*ListPermissionSetAssignmentsResponse, error)

	// CreatePermissionSetAssignmentsWithBodyWithResponse request with any body
	CreatePermissionSetAssignmentsWithBodyWithResponse(ctx context.Context, permissionSetId PermissionSetID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePermissionSetAssignmentsResponse, error)

	CreatePermissionSetAssignmentsWithResponse(ctx context.Context, permissionSetId PermissionSetID, body CreatePermissionSetAssignmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePermissionSetAssignmentsResponse, error)

	// DeletePermissionSetAssignmentWithResponse request
	DeletePermissionSetAssignmentWithResponse(ctx context.Context, permissionSetId PermissionSetID, assignmentId AssignmentID, reqEditors ...RequestEditorFn) (*DeletePermissionSetAssignmentResponse, error)

	// RedeployPermissionSetAssignmentWithResponse request
	RedeployPermissionSetAssignmentWithResponse(ctx context.Context, permissionSetId PermissionSetID, assignmentId AssignmentID, reqEditors ...RequestEditorFn) (*RedeployPermissionSetAssignmentResponse, error)

	// GetAPIDocumentWithResponse request
	GetAPIDocumentWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAPIDocumentResponse, error)
}

type ListPermissionSetsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListPermissionSets
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ListPermissionSetsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPermissionSetsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePermissionSetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *PermissionSetRecord
	JSON400      *ErrorResponse
	JSON409      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreatePermissionSetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePermissionSetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListAWSManagedPoliciesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListAWSManagedPolicies
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ListAWSManagedPoliciesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListAWSManagedPoliciesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListRolesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListRoles
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ListRolesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListRolesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListMyRolesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListRoles
	JSON403      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ListMyRolesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListMyRolesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePermissionSetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PermissionSetRecord
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeletePermissionSetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePermissionSetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPermissionSetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PermissionSetRecord
	JSON404      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetPermissionSetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPermissionSetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePermissionSetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PermissionSetRecord
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UpdatePermissionSetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePermissionSetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListPermissionSetAssignmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListAssignmentRecords
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ListPermissionSetAssignmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPermissionSetAssignmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePermissionSetAssignmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AssignmentRecords
	JSON400      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreatePermissionSetAssignmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePermissionSetAssignmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePermissionSetAssignmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AssignmentRecord
	JSON400      *ErrorResponse
	JSON429      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeletePermissionSetAssignmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePermissionSetAssignmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RedeployPermissionSetAssignmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AssignmentRecord
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r RedeployPermissionSetAssignmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RedeployPermissionSetAssignmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAPIDocumentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetAPIDocumentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAPIDocumentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ListPermissionSetsWithResponse request returning *ListPermissionSetsResponse
func (c *ClientWithResponses) ListPermissionSetsWithResponse(ctx context.Context, params *ListPermissionSetsParams, reqEditors ...RequestEditorFn) (*ListPermissionSetsResponse, error) {
	rsp, err := c.ListPermissionSets(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListPermissionSetsResponse(rsp)
}

// CreatePermissionSetWithBodyWithResponse request with arbitrary body returning *CreatePermissionSetResponse
func (c *ClientWithResponses) CreatePermissionSetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePermissionSetResponse, error) {
	rsp, err := c.CreatePermissionSetWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePermissionSetResponse(rsp)
}

func (c *ClientWithResponses) CreatePermissionSetWithResponse(ctx context.Context, body CreatePermissionSetJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePermissionSetResponse, error) {
	rsp, err := c.CreatePermissionSet(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePermissionSetResponse(rsp)
}

// ListAWSManagedPoliciesWithResponse request returning *ListAWSManagedPoliciesResponse
func (c *ClientWithResponses) ListAWSManagedPoliciesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListAWSManagedPoliciesResponse, error) {
	rsp, err := c.ListAWSManagedPolicies(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListAWSManagedPoliciesResponse(rsp)
}

// ListRolesWithResponse request returning *ListRolesResponse
func (c *ClientWithResponses) ListRolesWithResponse(ctx context.Context, params *ListRolesParams, reqEditors ...RequestEditorFn) (*ListRolesResponse, error) {
	rsp, err := c.ListRoles(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListRolesResponse(rsp)
}

// ListMyRolesWithResponse request returning *ListMyRolesResponse
func (c *ClientWithResponses) ListMyRolesWithResponse(ctx context.Context, params *ListMyRolesParams, reqEditors ...RequestEditorFn) (*ListMyRolesResponse, error) {
	rsp, err := c.ListMyRoles(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListMyRolesResponse(rsp)
}

// DeletePermissionSetWithResponse request returning *DeletePermissionSetResponse
func (c *ClientWithResponses) DeletePermissionSetWithResponse(ctx context.Context, permissionSetId PermissionSetID, reqEditors ...RequestEditorFn) (*DeletePermissionSetResponse, error) {
	rsp, err := c.DeletePermissionSet(ctx, permissionSetId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePermissionSetResponse(rsp)
}

// GetPermissionSetWithResponse request returning *GetPermissionSetResponse
func (c *ClientWithResponses) GetPermissionSetWithResponse(ctx context.Context, permissionSetId PermissionSetID, reqEditors ...RequestEditorFn) (*GetPermissionSetResponse, error) {
	rsp, err := c.GetPermissionSet(ctx, permissionSetId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPermissionSetResponse(rsp)
}

// UpdatePermissionSetWithBodyWithResponse request with arbitrary body returning *UpdatePermissionSetResponse
func (c *ClientWithResponses) UpdatePermissionSetWithBodyWithResponse(ctx context.Context, permissionSetId PermissionSetID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePermissionSetResponse, error) {
	rsp, err := c.UpdatePermissionSetWithBody(ctx, permissionSetId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePermissionSetResponse(rsp)
}

func (c *ClientWithResponses) UpdatePermissionSetWithResponse(ctx context.Context, permissionSetId PermissionSetID, body UpdatePermissionSetJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePermissionSetResponse, error) {
	rsp, err := c.UpdatePermissionSet(ctx, permissionSetId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePermissionSetResponse(rsp)
}

// ListPermissionSetAssignmentsWithResponse request returning *ListPermissionSetAssignmentsResponse
func (c *ClientWithResponses) ListPermissionSetAssignmentsWithResponse(ctx context.Context, permissionSetId PermissionSetID, params *ListPermissionSetAssignmentsParams, reqEditors ...RequestEditorFn) (*ListPermissionSetAssignmentsResponse, error) {
	rsp, err := c.ListPermissionSetAssignments(ctx, permissionSetId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListPermissionSetAssignmentsResponse(rsp)
}

// CreatePermissionSetAssignmentsWithBodyWithResponse request with arbitrary body returning *CreatePermissionSetAssignmentsResponse
func (c *ClientWithResponses) CreatePermissionSetAssignmentsWithBodyWithResponse(ctx context.Context, permissionSetId PermissionSetID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePermissionSetAssignmentsResponse, error) {
	rsp, err := c.CreatePermissionSetAssignmentsWithBody(ctx, permissionSetId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePermissionSetAssignmentsResponse(rsp)
}

func (c *ClientWithResponses) CreatePermissionSetAssignmentsWithResponse(ctx context.Context, permissionSetId PermissionSetID, body CreatePermissionSetAssignmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePermissionSetAssignmentsResponse, error) {
	rsp, err := c.CreatePermissionSetAssignments(ctx, permissionSetId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePermissionSetAssignmentsResponse(rsp)
}

// DeletePermissionSetAssignmentWithResponse request returning *DeletePermissionSetAssignmentResponse
func (c *ClientWithResponses) DeletePermissionSetAssignmentWithResponse(ctx context.Context, permissionSetId PermissionSetID, assignmentId AssignmentID, reqEditors ...RequestEditorFn) (*DeletePermissionSetAssignmentResponse, error) {
	rsp, err := c.DeletePermissionSetAssignment(ctx, permissionSetId, assignmentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePermissionSetAssignmentResponse(rsp)
}

// RedeployPermissionSetAssignmentWithResponse request returning *RedeployPermissionSetAssignmentResponse
func (c *ClientWithResponses) RedeployPermissionSetAssignmentWithResponse(ctx context.Context, permissionSetId PermissionSetID, assignmentId AssignmentID, reqEditors ...RequestEditorFn) (*RedeployPermissionSetAssignmentResponse, error) {
	rsp, err := c.RedeployPermissionSetAssignment(ctx, permissionSetId, assignmentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRedeployPermissionSetAssignmentResponse(rsp)
}

// GetAPIDocumentWithResponse request returning *GetAPIDocumentResponse
func (c *ClientWithResponses) GetAPIDocumentWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAPIDocumentResponse, error) {
	rsp, err := c.GetAPIDocument(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAPIDocumentResponse(rsp)
}

// ParseListPermissionSetsResponse parses an HTTP response from a ListPermissionSetsWithResponse call
func ParseListPermissionSetsResponse(rsp *http.Response) (*ListPermissionSetsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListPermissionSetsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListPermissionSets
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreatePermissionSetResponse parses an HTTP response from a CreatePermissionSetWithResponse call
func ParseCreatePermissionSetResponse(rsp *http.Response) (*CreatePermissionSetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreatePermissionSetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest PermissionSetRecord
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListAWSManagedPoliciesResponse parses an HTTP response from a ListAWSManagedPoliciesWithResponse call
func ParseListAWSManagedPoliciesResponse(rsp *http.Response) (*ListAWSManagedPoliciesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListAWSManagedPoliciesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListAWSManagedPolicies
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListRolesResponse parses an HTTP response from a ListRolesWithResponse call
func ParseListRolesResponse(rsp *http.Response) (*ListRolesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListRolesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListRoles
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListMyRolesResponse parses an HTTP response from a ListMyRolesWithResponse call
func ParseListMyRolesResponse(rsp *http.Response) (*ListMyRolesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListMyRolesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListRoles
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeletePermissionSetResponse parses an HTTP response from a DeletePermissionSetWithResponse call
func ParseDeletePermissionSetResponse(rsp *http.Response) (*DeletePermissionSetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePermissionSetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PermissionSetRecord
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetPermissionSetResponse parses an HTTP response from a GetPermissionSetWithResponse call
func ParseGetPermissionSetResponse(rsp *http.Response) (*GetPermissionSetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPermissionSetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PermissionSetRecord
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdatePermissionSetResponse parses an HTTP response from a UpdatePermissionSetWithResponse call
func ParseUpdatePermissionSetResponse(rsp *http.Response) (*UpdatePermissionSetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdatePermissionSetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PermissionSetRecord
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseListPermissionSetAssignmentsResponse parses an HTTP response from a ListPermissionSetAssignmentsWithResponse call
func ParseListPermissionSetAssignmentsResponse(rsp *http.Response) (*ListPermissionSetAssignmentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListPermissionSetAssignmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListAssignmentRecords
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreatePermissionSetAssignmentsResponse parses an HTTP response from a CreatePermissionSetAssignmentsWithResponse call
func ParseCreatePermissionSetAssignmentsResponse(rsp *http.Response) (*CreatePermissionSetAssignmentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreatePermissionSetAssignmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AssignmentRecords
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeletePermissionSetAssignmentResponse parses an HTTP response from a DeletePermissionSetAssignmentWithResponse call
func ParseDeletePermissionSetAssignmentResponse(rsp *http.Response) (*DeletePermissionSetAssignmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePermissionSetAssignmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AssignmentRecord
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseRedeployPermissionSetAssignmentResponse parses an HTTP response from a RedeployPermissionSetAssignmentWithResponse call
func ParseRedeployPermissionSetAssignmentResponse(rsp *http.Response) (*RedeployPermissionSetAssignmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RedeployPermissionSetAssignmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AssignmentRecord
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetAPIDocumentResponse parses an HTTP response from a GetAPIDocumentWithResponse call
func ParseGetAPIDocumentResponse(rsp *http.Response) (*GetAPIDocumentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAPIDocumentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}
