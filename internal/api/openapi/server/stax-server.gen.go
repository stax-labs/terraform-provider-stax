// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package server

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/labstack/echo/v4"
	. "github.com/stax-labs/terraform-provider-stax/internal/api/openapi/models"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Update Account Type members
	// (PUT /20190206/account-types/members)
	AccountsUpdateAccountTypeMembers(ctx echo.Context) error
	// Update Account Type Policies
	// (PUT /20190206/account-types/policies)
	AccountsUpdateAccountTypePolicies(ctx echo.Context) error
	// Fetch Accounts
	// (GET /20190206/accounts)
	AccountsReadAccounts(ctx echo.Context, params AccountsReadAccountsParams) error
	// Create Account
	// (POST /20190206/accounts)
	AccountsCreateAccount(ctx echo.Context) error
	// Close Account
	// (POST /20190206/accounts/close)
	AccountsCloseAccount(ctx echo.Context) error
	// Discover Accounts
	// (POST /20190206/accounts/discover)
	AccountsDiscoverAccounts(ctx echo.Context) error
	// Discover Account
	// (POST /20190206/accounts/discover/{aws_account_id})
	AccountsDiscoverAccount(ctx echo.Context, awsAccountId string) error
	// Onboard AWS Account
	// (POST /20190206/accounts/onboard)
	AccountsOnboardAccount(ctx echo.Context) error
	// Fetch Account Types
	// (GET /20190206/accounts/types)
	AccountsReadAccountTypes(ctx echo.Context, params AccountsReadAccountTypesParams) error
	// Create Account Type
	// (POST /20190206/accounts/types)
	AccountsCreateAccountType(ctx echo.Context) error
	// Update AWS access
	// (PUT /20190206/accounts/types/access)
	AccountsUpdateAccountTypeAccess(ctx echo.Context) error
	// Delete Account Type
	// (DELETE /20190206/accounts/types/{account_type_id})
	AccountsDeleteAccountType(ctx echo.Context, accountTypeId string) error
	// Fetch Account Type
	// (GET /20190206/accounts/types/{account_type_id})
	AccountsReadAccountType(ctx echo.Context, accountTypeId string, params AccountsReadAccountTypeParams) error
	// Update Account Type
	// (PUT /20190206/accounts/types/{account_type_id})
	AccountsUpdateAccountType(ctx echo.Context, accountTypeId string) error
	// Fetch Account
	// (GET /20190206/accounts/{account_id})
	AccountsReadAccount(ctx echo.Context, accountId string, params AccountsReadAccountParams) error
	// Update Account
	// (PUT /20190206/accounts/{account_id})
	AccountsUpdateAccount(ctx echo.Context, accountId string) error
	// Fetch API Tokens
	// (GET /20190206/api-tokens)
	TeamsReadApiTokens(ctx echo.Context, params TeamsReadApiTokensParams) error
	// Create API Token
	// (POST /20190206/api-tokens)
	TeamsCreateApiToken(ctx echo.Context) error
	// Delete API Token
	// (DELETE /20190206/api-tokens/{AccessKey})
	TeamsDeleteApiToken(ctx echo.Context, accessKey string) error
	// Fetch API Token
	// (GET /20190206/api-tokens/{AccessKey})
	TeamsReadApiToken(ctx echo.Context, accessKey string, params TeamsReadApiTokenParams) error
	// Update API Token
	// (PUT /20190206/api-tokens/{AccessKey})
	TeamsUpdateApiToken(ctx echo.Context, accessKey string) error
	// Fetch Groups
	// (GET /20190206/groups)
	TeamsReadGroups(ctx echo.Context, params TeamsReadGroupsParams) error
	// Create Group
	// (POST /20190206/groups)
	TeamsCreateGroup(ctx echo.Context) error
	// Update Group Members
	// (PUT /20190206/groups/members)
	TeamsUpdateGroupMembers(ctx echo.Context) error
	// Delete Group
	// (DELETE /20190206/groups/{group_id})
	TeamsDeleteGroup(ctx echo.Context, groupId string) error
	// Fetch Group
	// (GET /20190206/groups/{group_id})
	TeamsReadGroup(ctx echo.Context, groupId string) error
	// Update Group
	// (PUT /20190206/groups/{group_id})
	TeamsUpdateGroup(ctx echo.Context, groupId string) error
	// Fetch IDAM Users
	// (GET /20190206/idam/user)
	TeamsReadIdamUsers(ctx echo.Context) error
	// Create Stax User
	// (POST /20190206/idam/user)
	TeamsCreateUser(ctx echo.Context) error
	// Re-invite Stax user
	// (PUT /20190206/idam/user/resend-invite/{user_id})
	TeamsUpdateUserInvite(ctx echo.Context, userId string) error
	// Reset Stax User's password
	// (PUT /20190206/idam/user/reset-password/{user_id})
	TeamsUpdateUserPassword(ctx echo.Context, userId string) error
	// Fetch IDAM User
	// (GET /20190206/idam/user/{org_id})
	TeamsReadIdamUser(ctx echo.Context, orgId string) error
	// Update Stax User
	// (PUT /20190206/idam/user/{user_id})
	TeamsUpdateUser(ctx echo.Context, userId string) error
	// Fetch DNS Resolvers
	// (GET /20190206/networking/dnsresolvers)
	NetworkingReadDnsResolvers(ctx echo.Context, params NetworkingReadDnsResolversParams) error
	// Delete DNS Resolver
	// (DELETE /20190206/networking/dnsresolvers/{dns_resolver_id})
	NetworkingDeleteDnsResolver(ctx echo.Context, dnsResolverId Uuidv4) error
	// Fetch DNS Resolver
	// (GET /20190206/networking/dnsresolvers/{dns_resolver_id})
	NetworkingReadDnsResolver(ctx echo.Context, dnsResolverId Uuidv4, params NetworkingReadDnsResolverParams) error
	// Update DNS Resolver
	// (PUT /20190206/networking/dnsresolvers/{dns_resolver_id})
	NetworkingUpdateDnsResolver(ctx echo.Context, dnsResolverId Uuidv4) error
	// Fetch Resolver DNS Rules
	// (GET /20190206/networking/dnsresolvers/{dns_resolver_id}/dnsrules)
	NetworkingReadResolverDnsRules(ctx echo.Context, dnsResolverId Uuidv4, params NetworkingReadResolverDnsRulesParams) error
	// Create DNS Rule
	// (POST /20190206/networking/dnsresolvers/{dns_resolver_id}/dnsrules)
	NetworkingCreateDnsRule(ctx echo.Context, dnsResolverId Uuidv4) error
	// Fetch DNS Rules
	// (GET /20190206/networking/dnsrules)
	NetworkingReadDnsRules(ctx echo.Context, params NetworkingReadDnsRulesParams) error
	// Delete DNS Rule
	// (DELETE /20190206/networking/dnsrules/{dns_rule_id})
	NetworkingDeleteDnsRule(ctx echo.Context, dnsRuleId Uuidv4) error
	// Fetch DNS Rule
	// (GET /20190206/networking/dnsrules/{dns_rule_id})
	NetworkingReadDnsRule(ctx echo.Context, dnsRuleId Uuidv4, params NetworkingReadDnsRuleParams) error
	// Update DNS Rule
	// (PUT /20190206/networking/dnsrules/{dns_rule_id})
	NetworkingUpdateDnsRule(ctx echo.Context, dnsRuleId Uuidv4) error
	// Fetch DX Associations
	// (GET /20190206/networking/dxassociations)
	NetworkingReadDxAssociations(ctx echo.Context, params NetworkingReadDxAssociationsParams) error
	// Delete DX Association
	// (DELETE /20190206/networking/dxassociations/{dx_association_id})
	NetworkingDeleteDxAssociation(ctx echo.Context, dxAssociationId Uuidv4) error
	// Fetch DX Association
	// (GET /20190206/networking/dxassociations/{dx_association_id})
	NetworkingReadDxAssociation(ctx echo.Context, dxAssociationId Uuidv4, params NetworkingReadDxAssociationParams) error
	// Update DX Association
	// (PUT /20190206/networking/dxassociations/{dx_association_id})
	NetworkingUpdateDxAssociation(ctx echo.Context, dxAssociationId Uuidv4) error
	// Fetch DX Gateways
	// (GET /20190206/networking/dxgateways)
	NetworkingReadDxGateways(ctx echo.Context, params NetworkingReadDxGatewaysParams) error
	// Delete DX Gateway
	// (DELETE /20190206/networking/dxgateways/{dx_gateway_id})
	NetworkingDeleteDxGateway(ctx echo.Context, dxGatewayId Uuidv4) error
	// Fetch DX Gateway
	// (GET /20190206/networking/dxgateways/{dx_gateway_id})
	NetworkingReadDxGateway(ctx echo.Context, dxGatewayId Uuidv4, params NetworkingReadDxGatewayParams) error
	// Fetch Gateway DX Associations
	// (GET /20190206/networking/dxgateways/{dx_gateway_id}/dxassociations)
	NetworkingReadGatewayDxAssociations(ctx echo.Context, dxGatewayId Uuidv4, params NetworkingReadGatewayDxAssociationsParams) error
	// Create DX Association
	// (POST /20190206/networking/dxgateways/{dx_gateway_id}/dxassociations)
	NetworkingCreateDxAssociation(ctx echo.Context, dxGatewayId Uuidv4) error
	// Fetch Gatway DX Vifs
	// (GET /20190206/networking/dxgateways/{dx_gateway_id}/dxvifs)
	NetworkingReadGatewayDxVifs(ctx echo.Context, dxGatewayId Uuidv4, params NetworkingReadGatewayDxVifsParams) error
	// Create DX Resources
	// (POST /20190206/networking/dxresources)
	NetworkingCreateDxResource(ctx echo.Context) error
	// Fetch DX Vifs
	// (GET /20190206/networking/dxvifs)
	NetworkingReadDxVifs(ctx echo.Context, params NetworkingReadDxVifsParams) error
	// Delete DX Vif
	// (DELETE /20190206/networking/dxvifs/{dx_vif_id})
	NetworkingDeleteDxVif(ctx echo.Context, dxVifId Uuidv4) error
	// Fetch DX Vif
	// (GET /20190206/networking/dxvifs/{dx_vif_id})
	NetworkingReadDxVif(ctx echo.Context, dxVifId Uuidv4, params NetworkingReadDxVifParams) error
	// Update DX VIf
	// (PUT /20190206/networking/dxvifs/{dx_vif_id})
	NetworkingUpdateDxVif(ctx echo.Context, dxVifId Uuidv4) error
	// Fetch DX VIF Status
	// (GET /20190206/networking/dxvifs/{dx_vif_id}/status)
	NetworkingReadDxVifStatus(ctx echo.Context, dxVifId Uuidv4) error
	// Fetch CIDR Exclusions
	// (GET /20190206/networking/exclusions)
	NetworkingReadCidrExclusions(ctx echo.Context, params NetworkingReadCidrExclusionsParams) error
	// Delete CIDR Exclusion
	// (DELETE /20190206/networking/exclusions/{exclusion_id})
	NetworkingDeleteCidrExclusion(ctx echo.Context, exclusionId Uuidv4) error
	// Fetch CIDR Exclusion
	// (GET /20190206/networking/exclusions/{exclusion_id})
	NetworkingReadCidrExclusion(ctx echo.Context, exclusionId Uuidv4, params NetworkingReadCidrExclusionParams) error
	// Update CIDR Exclusion
	// (PUT /20190206/networking/exclusions/{exclusion_id})
	NetworkingUpdateCidrExclusion(ctx echo.Context, exclusionId Uuidv4) error
	// Fetch Hub Peerings
	// (GET /20190206/networking/hubpeerings)
	NetworkingReadHubPeerings(ctx echo.Context, params NetworkingReadHubPeeringsParams) error
	// Delete Hub Peering
	// (DELETE /20190206/networking/hubpeerings/{hub_peering_id})
	NetworkingDeleteHubPeering(ctx echo.Context, hubPeeringId Uuidv4) error
	// Fetch Hub Peering
	// (GET /20190206/networking/hubpeerings/{hub_peering_id})
	NetworkingReadHubPeering(ctx echo.Context, hubPeeringId Uuidv4, params NetworkingReadHubPeeringParams) error
	// Update Hub Peering
	// (PUT /20190206/networking/hubpeerings/{hub_peering_id})
	NetworkingUpdateHubPeering(ctx echo.Context, hubPeeringId Uuidv4) error
	// Fetch Networking Hubs
	// (GET /20190206/networking/hubs)
	NetworkingReadHubs(ctx echo.Context, params NetworkingReadHubsParams) error
	// Create Networking Hub
	// (POST /20190206/networking/hubs)
	NetworkingCreateHub(ctx echo.Context) error
	// Delete Networking Hub
	// (DELETE /20190206/networking/hubs/{hub_id})
	NetworkingDeleteHub(ctx echo.Context, hubId Uuidv4) error
	// Fetch Networking Hub
	// (GET /20190206/networking/hubs/{hub_id})
	NetworkingReadHub(ctx echo.Context, hubId Uuidv4, params NetworkingReadHubParams) error
	// Update Networking Hub
	// (PUT /20190206/networking/hubs/{hub_id})
	NetworkingUpdateHub(ctx echo.Context, hubId Uuidv4) error
	// Fetch Hub DNS Resolvers
	// (GET /20190206/networking/hubs/{hub_id}/dnsresolvers)
	NetworkingReadHubDnsResolvers(ctx echo.Context, hubId Uuidv4, params NetworkingReadHubDnsResolversParams) error
	// Create DNS Resolver
	// (POST /20190206/networking/hubs/{hub_id}/dnsresolvers)
	NetworkingCreateDnsResolver(ctx echo.Context, hubId Uuidv4) error
	// Fetch Hub DX Associations
	// (GET /20190206/networking/hubs/{hub_id}/dxassociations)
	NetworkingReadHubDxAssociations(ctx echo.Context, hubId Uuidv4, params NetworkingReadHubDxAssociationsParams) error
	// Fetch Hub DX Gateways
	// (GET /20190206/networking/hubs/{hub_id}/dxgateways)
	NetworkingReadHubDxGateways(ctx echo.Context, hubId Uuidv4, params NetworkingReadHubDxGatewaysParams) error
	// Fetch Hub IDR Exclusions
	// (GET /20190206/networking/hubs/{hub_id}/exclusions)
	NetworkingReadHubCidrExclusions(ctx echo.Context, hubId Uuidv4, params NetworkingReadHubCidrExclusionsParams) error
	// Create CIDR Exclusion
	// (POST /20190206/networking/hubs/{hub_id}/exclusions)
	NetworkingCreateCidrExclusion(ctx echo.Context, hubId Uuidv4) error
	// Fetch Networking Hub Prefix Lists
	// (GET /20190206/networking/hubs/{hub_id}/prefixlists)
	NetworkingReadHubPrefixLists(ctx echo.Context, hubId Uuidv4, params NetworkingReadHubPrefixListsParams) error
	// Create a Hub Prefix List
	// (POST /20190206/networking/hubs/{hub_id}/prefixlists/hubs)
	NetworkingCreateHubPrefixList(ctx echo.Context, hubId Uuidv4) error
	// Create a VPC Prefix List
	// (POST /20190206/networking/hubs/{hub_id}/prefixlists/vpcs)
	NetworkingCreateVpcPrefixList(ctx echo.Context, hubId Uuidv4) error
	// Fetch Hub CIDR Ranges
	// (GET /20190206/networking/hubs/{hub_id}/ranges)
	NetworkingReadHubCidrRanges(ctx echo.Context, hubId Uuidv4, params NetworkingReadHubCidrRangesParams) error
	// Create CIDR Range
	// (POST /20190206/networking/hubs/{hub_id}/ranges)
	NetworkingCreateCidrRange(ctx echo.Context, hubId Uuidv4) error
	// Fetch Hub VPCs
	// (GET /20190206/networking/hubs/{hub_id}/vpcs)
	NetworkingReadHubVpcs(ctx echo.Context, hubId Uuidv4, params NetworkingReadHubVpcsParams) error
	// Create VPC
	// (POST /20190206/networking/hubs/{hub_id}/vpcs)
	NetworkingCreateVpc(ctx echo.Context, hubId Uuidv4) error
	// Fetch Hub VPN Connections
	// (GET /20190206/networking/hubs/{hub_id}/vpnconnections)
	NetworkingReadHubVpnConnections(ctx echo.Context, hubId Uuidv4, params NetworkingReadHubVpnConnectionsParams) error
	// Fetch Hub VPN Customer Gateways
	// (GET /20190206/networking/hubs/{hub_id}/vpncustomergateways)
	NetworkingReadHubVpnCustomerGateways(ctx echo.Context, hubId Uuidv4, params NetworkingReadHubVpnCustomerGatewaysParams) error
	// Fetch Networking Hub Hub Peerings
	// (GET /20190206/networking/hubs/{networking_hub_id}/hubpeerings)
	NetworkingReadHubHubPeerings(ctx echo.Context, networkingHubId Uuidv4, params NetworkingReadHubHubPeeringsParams) error
	// Create a Hub Peering
	// (POST /20190206/networking/hubs/{networking_hub_id}/hubpeerings)
	NetworkingCreateHubPeering(ctx echo.Context, networkingHubId Uuidv4) error
	// Fetch Prefix Lists
	// (GET /20190206/networking/prefixlists)
	NetworkingReadPrefixLists(ctx echo.Context, params NetworkingReadPrefixListsParams) error
	// Update Hub Prefix List associations
	// (PUT /20190206/networking/prefixlists/hubs/{prefix_list_id}/associations)
	NetworkingUpdateHubPrefixListAssociation(ctx echo.Context, prefixListId Uuidv4) error
	// Update VPC Prefix List associations
	// (PUT /20190206/networking/prefixlists/vpcs/{prefix_list_id}/associations)
	NetworkingUpdateVpcPrefixListAssociation(ctx echo.Context, prefixListId Uuidv4) error
	// Delete Prefix List
	// (DELETE /20190206/networking/prefixlists/{prefix_list_id})
	NetworkingDeletePrefixList(ctx echo.Context, prefixListId Uuidv4) error
	// Fetch Prefix List
	// (GET /20190206/networking/prefixlists/{prefix_list_id})
	NetworkingReadPrefixList(ctx echo.Context, prefixListId Uuidv4, params NetworkingReadPrefixListParams) error
	// Update Prefix List
	// (PUT /20190206/networking/prefixlists/{prefix_list_id})
	NetworkingUpdatePrefixList(ctx echo.Context, prefixListId Uuidv4) error
	// Fetch CIDR Ranges
	// (GET /20190206/networking/ranges)
	NetworkingReadCidrRanges(ctx echo.Context, params NetworkingReadCidrRangesParams) error
	// Delete CIDR Range
	// (DELETE /20190206/networking/ranges/{range_id})
	NetworkingDeleteCidrRange(ctx echo.Context, rangeId Uuidv4) error
	// Fetch CIDR Range
	// (GET /20190206/networking/ranges/{range_id})
	NetworkingReadCidrRange(ctx echo.Context, rangeId Uuidv4, params NetworkingReadCidrRangeParams) error
	// Update CIDR Range
	// (PUT /20190206/networking/ranges/{range_id})
	NetworkingUpdateCidrRange(ctx echo.Context, rangeId Uuidv4) error
	// Fetch VPCs
	// (GET /20190206/networking/vpcs)
	NetworkingReadVpcs(ctx echo.Context, params NetworkingReadVpcsParams) error
	// Delete VPC
	// (DELETE /20190206/networking/vpcs/{vpc_id})
	NetworkingDeleteVpc(ctx echo.Context, vpcId Uuidv4) error
	// Fetch VPC
	// (GET /20190206/networking/vpcs/{vpc_id})
	NetworkingReadVpc(ctx echo.Context, vpcId Uuidv4, params NetworkingReadVpcParams) error
	// Update VPC
	// (PUT /20190206/networking/vpcs/{vpc_id})
	NetworkingUpdateVpc(ctx echo.Context, vpcId Uuidv4) error
	// Fetch VPN Connections
	// (GET /20190206/networking/vpnconnections)
	NetworkingReadVpnConnections(ctx echo.Context, params NetworkingReadVpnConnectionsParams) error
	// Delete VPN Conection
	// (DELETE /20190206/networking/vpnconnections/{vpn_connection_id})
	NetworkingDeleteVpnConnection(ctx echo.Context, vpnConnectionId Uuidv4) error
	// Fetch VPN Connection
	// (GET /20190206/networking/vpnconnections/{vpn_connection_id})
	NetworkingReadVpnConnection(ctx echo.Context, vpnConnectionId Uuidv4, params NetworkingReadVpnConnectionParams) error
	// Update VPN Conection
	// (PUT /20190206/networking/vpnconnections/{vpn_connection_id})
	NetworkingUpdateVpnConnection(ctx echo.Context, vpnConnectionId Uuidv4) error
	// Fetch VPN Connection Status
	// (GET /20190206/networking/vpnconnections/{vpn_connection_id}/status)
	NetworkingReadVpnConnectionStatus(ctx echo.Context, vpnConnectionId Uuidv4) error
	// Fetch VPN Customer Gateways
	// (GET /20190206/networking/vpncustomergateways)
	NetworkingReadVpnCustomerGateways(ctx echo.Context, params NetworkingReadVpnCustomerGatewaysParams) error
	// Creates a Stax VPN Customer Gateway
	// (POST /20190206/networking/vpncustomergateways)
	NetworkingCreateVpnCustomerGateway(ctx echo.Context) error
	// Delete a Stax VPN Customer Gateway
	// (DELETE /20190206/networking/vpncustomergateways/{vpn_customer_gateway_id})
	NetworkingDeleteVpnCustomerGateway(ctx echo.Context, vpnCustomerGatewayId Uuidv4) error
	// Fetch VPN Customer Gateway
	// (GET /20190206/networking/vpncustomergateways/{vpn_customer_gateway_id})
	NetworkingReadVpnCustomerGateway(ctx echo.Context, vpnCustomerGatewayId Uuidv4, params NetworkingReadVpnCustomerGatewayParams) error
	// Updates a Stax VPN Customer Gateway
	// (PUT /20190206/networking/vpncustomergateways/{vpn_customer_gateway_id})
	NetworkingUpdateVpnCustomerGateway(ctx echo.Context, vpnCustomerGatewayId Uuidv4) error
	// Create VPN Connection
	// (POST /20190206/networking/vpncustomergateways/{vpn_customer_gateway_id}/vpnconnection)
	NetworkingCreateVpnConnection(ctx echo.Context, vpnCustomerGatewayId Uuidv4) error
	// Fetch Gateway VPN Connections
	// (GET /20190206/networking/vpncustomergateways/{vpn_customer_gateway_id}/vpnconnections)
	NetworkingReadGatewayVpnConnections(ctx echo.Context, vpnCustomerGatewayId Uuidv4, params NetworkingReadGatewayVpnConnectionsParams) error
	// Fetch DX Connections
	// (GET /20190206/networking/{account_id}/dxconnections)
	NetworkingReadDxConnections(ctx echo.Context, accountId Uuidv4, params NetworkingReadDxConnectionsParams) error
	// Fetch Stax Organisations
	// (GET /20190206/organisations)
	OrganisationsReadOrganisations(ctx echo.Context) error
	// Fetch Stax Organisation
	// (GET /20190206/organisations/current)
	OrganisationsReadOrganisation(ctx echo.Context) error
	// Fetch Organisational Units
	// (GET /20190206/organisations/organisational-units)
	OrganisationsReadOrganisationalUnits(ctx echo.Context, params OrganisationsReadOrganisationalUnitsParams) error
	// Fetch Organisational Unit
	// (GET /20190206/organisations/organisational-units/{organisational_unit_id})
	OrganisationsReadOrganisationalUnit(ctx echo.Context, organisationalUnitId string) error
	// Fetch Policies
	// (GET /20190206/policies)
	OrganisationsReadPolicies(ctx echo.Context, params OrganisationsReadPoliciesParams) error
	// Create Policy
	// (POST /20190206/policies)
	OrganisationsCreatePolicy(ctx echo.Context) error
	// Detach Policy from Organisation
	// (DELETE /20190206/policies/organisation/{policy_id})
	OrganisationsDetachPolicy(ctx echo.Context, policyId string) error
	// Attach Policy to Organisation
	// (PUT /20190206/policies/organisation/{policy_id})
	OrganisationsAttachPolicy(ctx echo.Context, policyId string) error
	// Delete Policy
	// (DELETE /20190206/policies/{policy_id})
	OrganisationsDeletePolicy(ctx echo.Context, policyId string) error
	// Fetch Policy
	// (GET /20190206/policies/{policy_id})
	OrganisationsReadPolicy(ctx echo.Context, policyId string) error
	// Update Policy
	// (PUT /20190206/policies/{policy_id})
	OrganisationsUpdatePolicy(ctx echo.Context, policyId string) error
	// Check Alias availability
	// (GET /20190206/public/check-alias/{alias})
	PublicCheckAlias(ctx echo.Context, alias string) error
	// Fetch public config
	// (GET /20190206/public/config)
	PublicReadConfig(ctx echo.Context) error
	// Fetch Organisation Service Configurations
	// (GET /20190206/services/configuration)
	ServicesReadConfigurations(ctx echo.Context) error
	// Fetch securityhub configuration for the organisation
	// (GET /20190206/services/securityhub/configuration)
	ServicesReadSecurityHubConfiguration(ctx echo.Context) error
	// Set the desired state of security hub service in your AWS Organization
	// (PUT /20190206/services/securityhub/configuration)
	ServicesConfigureSecurityHub(ctx echo.Context) error
	// Fetch status of Task
	// (GET /20190206/task/{task_id})
	TasksReadTask(ctx echo.Context, taskId string) error
	// Fetch Stax Users and Federated Users
	// (GET /20190206/users)
	TeamsReadUsers(ctx echo.Context, params TeamsReadUsersParams) error
	// Fetch Current User
	// (GET /20190206/users/me)
	TeamsFetchCurrentUser(ctx echo.Context) error
	// Delete Stax User
	// (DELETE /20190206/users/{user_id})
	TeamsDeleteUser(ctx echo.Context, userId string) error
	// Fetch Stax User or Federated User
	// (GET /20190206/users/{user_id})
	TeamsReadUser(ctx echo.Context, userId string) error
	// Fetch Workload Catalogue Items
	// (GET /20190206/workload-catalogue)
	WorkloadsReadCatalogueItems(ctx echo.Context, params WorkloadsReadCatalogueItemsParams) error
	// Create Workload Catalogue Item
	// (POST /20190206/workload-catalogue)
	WorkloadsCreateCatalogueItem(ctx echo.Context) error
	// Fetch Workload Catalogue Manifest
	// (GET /20190206/workload-catalogue/manifest/{version_id})
	WorkloadsReadCatalogueManifest(ctx echo.Context, versionId string) error
	// Fetch Workload Catalogue Cloudformation Template
	// (GET /20190206/workload-catalogue/template/{version_id}/{name})
	WorkloadsReadCatalogueTemplate(ctx echo.Context, versionId string, name string) error
	// Delete Workload Catalogue Item
	// (DELETE /20190206/workload-catalogue/{catalogue_id})
	WorkloadsDeleteCatalogueItem(ctx echo.Context, catalogueId string) error
	// Fetch Workload Catalogue Item
	// (GET /20190206/workload-catalogue/{catalogue_id})
	WorkloadsReadCatalogueItem(ctx echo.Context, catalogueId string, params WorkloadsReadCatalogueItemParams) error
	// Update Workload Catalogue Item
	// (PUT /20190206/workload-catalogue/{catalogue_id})
	WorkloadsCreateCatalogueVersion(ctx echo.Context, catalogueId string) error
	// Delete Workload Catalogue Version
	// (DELETE /20190206/workload-catalogue/{catalogue_id}/{version_id})
	WorkloadsDeleteCatalogueVersion(ctx echo.Context, catalogueId string, versionId string) error
	// Fetch Workload Catalogue Version
	// (GET /20190206/workload-catalogue/{catalogue_id}/{version_id})
	WorkloadsReadCatalogueVersion(ctx echo.Context, catalogueId string, versionId string, params WorkloadsReadCatalogueVersionParams) error
	// Update All Workloads
	// (POST /20190206/workload-update)
	WorkloadsUpdateAll(ctx echo.Context) error
	// Fetch Workloads
	// (GET /20190206/workloads)
	WorkloadsReadWorkloads(ctx echo.Context, params WorkloadsReadWorkloadsParams) error
	// Deploy Workload
	// (POST /20190206/workloads)
	WorkloadsCreateWorkload(ctx echo.Context) error
	// Terminate Workload
	// (DELETE /20190206/workloads/{workload_id})
	WorkloadsDeleteWorkload(ctx echo.Context, workloadId string) error
	// Fetch Workload
	// (GET /20190206/workloads/{workload_id})
	WorkloadsReadWorkload(ctx echo.Context, workloadId string, params WorkloadsReadWorkloadParams) error
	// Update Workload
	// (PUT /20190206/workloads/{workload_id})
	WorkloadsUpdateWorkload(ctx echo.Context, workloadId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AccountsUpdateAccountTypeMembers converts echo context to params.
func (w *ServerInterfaceWrapper) AccountsUpdateAccountTypeMembers(ctx echo.Context) error {
	var err error

	ctx.Set(Sigv4Scopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountsUpdateAccountTypeMembers(ctx)
	return err
}

// AccountsUpdateAccountTypePolicies converts echo context to params.
func (w *ServerInterfaceWrapper) AccountsUpdateAccountTypePolicies(ctx echo.Context) error {
	var err error

	ctx.Set(Sigv4Scopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountsUpdateAccountTypePolicies(ctx)
	return err
}

// AccountsReadAccounts converts echo context to params.
func (w *ServerInterfaceWrapper) AccountsReadAccounts(ctx echo.Context) error {
	var err error

	ctx.Set(Sigv4Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountsReadAccountsParams
	// ------------- Optional query parameter "account_names" -------------

	err = runtime.BindQueryParameter("form", true, false, "account_names", ctx.QueryParams(), &params.AccountNames)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_names: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "id_filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "id_filter", ctx.QueryParams(), &params.IdFilter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id_filter: %s", err))
	}

	// ------------- Optional query parameter "aws_account_id_filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "aws_account_id_filter", ctx.QueryParams(), &params.AwsAccountIdFilter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter aws_account_id_filter: %s", err))
	}

	// ------------- Optional query parameter "account_type_filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "account_type_filter", ctx.QueryParams(), &params.AccountTypeFilter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_type_filter: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// ------------- Optional query parameter "sort_order" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort_order", ctx.QueryParams(), &params.SortOrder)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort_order: %s", err))
	}

	// ------------- Optional query parameter "include_tags" -------------

	err = runtime.BindQueryParameter("form", true, false, "include_tags", ctx.QueryParams(), &params.IncludeTags)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include_tags: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountsReadAccounts(ctx, params)
	return err
}

// AccountsCreateAccount converts echo context to params.
func (w *ServerInterfaceWrapper) AccountsCreateAccount(ctx echo.Context) error {
	var err error

	ctx.Set(Sigv4Scopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountsCreateAccount(ctx)
	return err
}

// AccountsCloseAccount converts echo context to params.
func (w *ServerInterfaceWrapper) AccountsCloseAccount(ctx echo.Context) error {
	var err error

	ctx.Set(Sigv4Scopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountsCloseAccount(ctx)
	return err
}

// AccountsDiscoverAccounts converts echo context to params.
func (w *ServerInterfaceWrapper) AccountsDiscoverAccounts(ctx echo.Context) error {
	var err error

	ctx.Set(Sigv4Scopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountsDiscoverAccounts(ctx)
	return err
}

// AccountsDiscoverAccount converts echo context to params.
func (w *ServerInterfaceWrapper) AccountsDiscoverAccount(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "aws_account_id" -------------
	var awsAccountId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "aws_account_id", runtime.ParamLocationPath, ctx.Param("aws_account_id"), &awsAccountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter aws_account_id: %s", err))
	}

	ctx.Set(Sigv4Scopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountsDiscoverAccount(ctx, awsAccountId)
	return err
}

// AccountsOnboardAccount converts echo context to params.
func (w *ServerInterfaceWrapper) AccountsOnboardAccount(ctx echo.Context) error {
	var err error

	ctx.Set(Sigv4Scopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountsOnboardAccount(ctx)
	return err
}

// AccountsReadAccountTypes converts echo context to params.
func (w *ServerInterfaceWrapper) AccountsReadAccountTypes(ctx echo.Context) error {
	var err error

	ctx.Set(Sigv4Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountsReadAccountTypesParams
	// ------------- Optional query parameter "id_filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "id_filter", ctx.QueryParams(), &params.IdFilter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id_filter: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountsReadAccountTypes(ctx, params)
	return err
}

// AccountsCreateAccountType converts echo context to params.
func (w *ServerInterfaceWrapper) AccountsCreateAccountType(ctx echo.Context) error {
	var err error

	ctx.Set(Sigv4Scopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountsCreateAccountType(ctx)
	return err
}

// AccountsUpdateAccountTypeAccess converts echo context to params.
func (w *ServerInterfaceWrapper) AccountsUpdateAccountTypeAccess(ctx echo.Context) error {
	var err error

	ctx.Set(Sigv4Scopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountsUpdateAccountTypeAccess(ctx)
	return err
}

// AccountsDeleteAccountType converts echo context to params.
func (w *ServerInterfaceWrapper) AccountsDeleteAccountType(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account_type_id" -------------
	var accountTypeId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "account_type_id", runtime.ParamLocationPath, ctx.Param("account_type_id"), &accountTypeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_type_id: %s", err))
	}

	ctx.Set(Sigv4Scopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountsDeleteAccountType(ctx, accountTypeId)
	return err
}

// AccountsReadAccountType converts echo context to params.
func (w *ServerInterfaceWrapper) AccountsReadAccountType(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account_type_id" -------------
	var accountTypeId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "account_type_id", runtime.ParamLocationPath, ctx.Param("account_type_id"), &accountTypeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_type_id: %s", err))
	}

	ctx.Set(Sigv4Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountsReadAccountTypeParams
	// ------------- Optional query parameter "id_filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "id_filter", ctx.QueryParams(), &params.IdFilter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id_filter: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountsReadAccountType(ctx, accountTypeId, params)
	return err
}

// AccountsUpdateAccountType converts echo context to params.
func (w *ServerInterfaceWrapper) AccountsUpdateAccountType(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account_type_id" -------------
	var accountTypeId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "account_type_id", runtime.ParamLocationPath, ctx.Param("account_type_id"), &accountTypeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_type_id: %s", err))
	}

	ctx.Set(Sigv4Scopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountsUpdateAccountType(ctx, accountTypeId)
	return err
}

// AccountsReadAccount converts echo context to params.
func (w *ServerInterfaceWrapper) AccountsReadAccount(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account_id" -------------
	var accountId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "account_id", runtime.ParamLocationPath, ctx.Param("account_id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_id: %s", err))
	}

	ctx.Set(Sigv4Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountsReadAccountParams
	// ------------- Optional query parameter "account_names" -------------

	err = runtime.BindQueryParameter("form", true, false, "account_names", ctx.QueryParams(), &params.AccountNames)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_names: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "id_filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "id_filter", ctx.QueryParams(), &params.IdFilter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id_filter: %s", err))
	}

	// ------------- Optional query parameter "aws_account_id_filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "aws_account_id_filter", ctx.QueryParams(), &params.AwsAccountIdFilter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter aws_account_id_filter: %s", err))
	}

	// ------------- Optional query parameter "account_type_filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "account_type_filter", ctx.QueryParams(), &params.AccountTypeFilter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_type_filter: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// ------------- Optional query parameter "sort_order" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort_order", ctx.QueryParams(), &params.SortOrder)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort_order: %s", err))
	}

	// ------------- Optional query parameter "include_tags" -------------

	err = runtime.BindQueryParameter("form", true, false, "include_tags", ctx.QueryParams(), &params.IncludeTags)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include_tags: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountsReadAccount(ctx, accountId, params)
	return err
}

// AccountsUpdateAccount converts echo context to params.
func (w *ServerInterfaceWrapper) AccountsUpdateAccount(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account_id" -------------
	var accountId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "account_id", runtime.ParamLocationPath, ctx.Param("account_id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_id: %s", err))
	}

	ctx.Set(Sigv4Scopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountsUpdateAccount(ctx, accountId)
	return err
}

// TeamsReadApiTokens converts echo context to params.
func (w *ServerInterfaceWrapper) TeamsReadApiTokens(ctx echo.Context) error {
	var err error

	ctx.Set(Sigv4Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params TeamsReadApiTokensParams
	// ------------- Optional query parameter "id_filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "id_filter", ctx.QueryParams(), &params.IdFilter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id_filter: %s", err))
	}

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TeamsReadApiTokens(ctx, params)
	return err
}

// TeamsCreateApiToken converts echo context to params.
func (w *ServerInterfaceWrapper) TeamsCreateApiToken(ctx echo.Context) error {
	var err error

	ctx.Set(Sigv4Scopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TeamsCreateApiToken(ctx)
	return err
}

// TeamsDeleteApiToken converts echo context to params.
func (w *ServerInterfaceWrapper) TeamsDeleteApiToken(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccessKey" -------------
	var accessKey string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccessKey", runtime.ParamLocationPath, ctx.Param("AccessKey"), &accessKey)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccessKey: %s", err))
	}

	ctx.Set(Sigv4Scopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TeamsDeleteApiToken(ctx, accessKey)
	return err
}

// TeamsReadApiToken converts echo context to params.
func (w *ServerInterfaceWrapper) TeamsReadApiToken(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccessKey" -------------
	var accessKey string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccessKey", runtime.ParamLocationPath, ctx.Param("AccessKey"), &accessKey)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccessKey: %s", err))
	}

	ctx.Set(Sigv4Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params TeamsReadApiTokenParams
	// ------------- Optional query parameter "id_filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "id_filter", ctx.QueryParams(), &params.IdFilter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id_filter: %s", err))
	}

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TeamsReadApiToken(ctx, accessKey, params)
	return err
}

// TeamsUpdateApiToken converts echo context to params.
func (w *ServerInterfaceWrapper) TeamsUpdateApiToken(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccessKey" -------------
	var accessKey string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccessKey", runtime.ParamLocationPath, ctx.Param("AccessKey"), &accessKey)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccessKey: %s", err))
	}

	ctx.Set(Sigv4Scopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TeamsUpdateApiToken(ctx, accessKey)
	return err
}

// TeamsReadGroups converts echo context to params.
func (w *ServerInterfaceWrapper) TeamsReadGroups(ctx echo.Context) error {
	var err error

	ctx.Set(Sigv4Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params TeamsReadGroupsParams
	// ------------- Optional query parameter "id_filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "id_filter", ctx.QueryParams(), &params.IdFilter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id_filter: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TeamsReadGroups(ctx, params)
	return err
}

// TeamsCreateGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TeamsCreateGroup(ctx echo.Context) error {
	var err error

	ctx.Set(Sigv4Scopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TeamsCreateGroup(ctx)
	return err
}

// TeamsUpdateGroupMembers converts echo context to params.
func (w *ServerInterfaceWrapper) TeamsUpdateGroupMembers(ctx echo.Context) error {
	var err error

	ctx.Set(Sigv4Scopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TeamsUpdateGroupMembers(ctx)
	return err
}

// TeamsDeleteGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TeamsDeleteGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "group_id" -------------
	var groupId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "group_id", runtime.ParamLocationPath, ctx.Param("group_id"), &groupId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter group_id: %s", err))
	}

	ctx.Set(Sigv4Scopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TeamsDeleteGroup(ctx, groupId)
	return err
}

// TeamsReadGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TeamsReadGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "group_id" -------------
	var groupId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "group_id", runtime.ParamLocationPath, ctx.Param("group_id"), &groupId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter group_id: %s", err))
	}

	ctx.Set(Sigv4Scopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TeamsReadGroup(ctx, groupId)
	return err
}

// TeamsUpdateGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TeamsUpdateGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "group_id" -------------
	var groupId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "group_id", runtime.ParamLocationPath, ctx.Param("group_id"), &groupId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter group_id: %s", err))
	}

	ctx.Set(Sigv4Scopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TeamsUpdateGroup(ctx, groupId)
	return err
}

// TeamsReadIdamUsers converts echo context to params.
func (w *ServerInterfaceWrapper) TeamsReadIdamUsers(ctx echo.Context) error {
	var err error

	ctx.Set(Sigv4Scopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TeamsReadIdamUsers(ctx)
	return err
}

// TeamsCreateUser converts echo context to params.
func (w *ServerInterfaceWrapper) TeamsCreateUser(ctx echo.Context) error {
	var err error

	ctx.Set(Sigv4Scopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TeamsCreateUser(ctx)
	return err
}

// TeamsUpdateUserInvite converts echo context to params.
func (w *ServerInterfaceWrapper) TeamsUpdateUserInvite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "user_id", runtime.ParamLocationPath, ctx.Param("user_id"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	ctx.Set(Sigv4Scopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TeamsUpdateUserInvite(ctx, userId)
	return err
}

// TeamsUpdateUserPassword converts echo context to params.
func (w *ServerInterfaceWrapper) TeamsUpdateUserPassword(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "user_id", runtime.ParamLocationPath, ctx.Param("user_id"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	ctx.Set(Sigv4Scopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TeamsUpdateUserPassword(ctx, userId)
	return err
}

// TeamsReadIdamUser converts echo context to params.
func (w *ServerInterfaceWrapper) TeamsReadIdamUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "org_id" -------------
	var orgId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "org_id", runtime.ParamLocationPath, ctx.Param("org_id"), &orgId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter org_id: %s", err))
	}

	ctx.Set(Sigv4Scopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TeamsReadIdamUser(ctx, orgId)
	return err
}

// TeamsUpdateUser converts echo context to params.
func (w *ServerInterfaceWrapper) TeamsUpdateUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "user_id", runtime.ParamLocationPath, ctx.Param("user_id"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	ctx.Set(Sigv4Scopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TeamsUpdateUser(ctx, userId)
	return err
}

// NetworkingReadDnsResolvers converts echo context to params.
func (w *ServerInterfaceWrapper) NetworkingReadDnsResolvers(ctx echo.Context) error {
	var err error

	ctx.Set(Sigv4Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params NetworkingReadDnsResolversParams
	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NetworkingReadDnsResolvers(ctx, params)
	return err
}

// NetworkingDeleteDnsResolver converts echo context to params.
func (w *ServerInterfaceWrapper) NetworkingDeleteDnsResolver(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "dns_resolver_id" -------------
	var dnsResolverId Uuidv4

	err = runtime.BindStyledParameterWithLocation("simple", false, "dns_resolver_id", runtime.ParamLocationPath, ctx.Param("dns_resolver_id"), &dnsResolverId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dns_resolver_id: %s", err))
	}

	ctx.Set(Sigv4Scopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NetworkingDeleteDnsResolver(ctx, dnsResolverId)
	return err
}

// NetworkingReadDnsResolver converts echo context to params.
func (w *ServerInterfaceWrapper) NetworkingReadDnsResolver(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "dns_resolver_id" -------------
	var dnsResolverId Uuidv4

	err = runtime.BindStyledParameterWithLocation("simple", false, "dns_resolver_id", runtime.ParamLocationPath, ctx.Param("dns_resolver_id"), &dnsResolverId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dns_resolver_id: %s", err))
	}

	ctx.Set(Sigv4Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params NetworkingReadDnsResolverParams
	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NetworkingReadDnsResolver(ctx, dnsResolverId, params)
	return err
}

// NetworkingUpdateDnsResolver converts echo context to params.
func (w *ServerInterfaceWrapper) NetworkingUpdateDnsResolver(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "dns_resolver_id" -------------
	var dnsResolverId Uuidv4

	err = runtime.BindStyledParameterWithLocation("simple", false, "dns_resolver_id", runtime.ParamLocationPath, ctx.Param("dns_resolver_id"), &dnsResolverId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dns_resolver_id: %s", err))
	}

	ctx.Set(Sigv4Scopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NetworkingUpdateDnsResolver(ctx, dnsResolverId)
	return err
}

// NetworkingReadResolverDnsRules converts echo context to params.
func (w *ServerInterfaceWrapper) NetworkingReadResolverDnsRules(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "dns_resolver_id" -------------
	var dnsResolverId Uuidv4

	err = runtime.BindStyledParameterWithLocation("simple", false, "dns_resolver_id", runtime.ParamLocationPath, ctx.Param("dns_resolver_id"), &dnsResolverId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dns_resolver_id: %s", err))
	}

	ctx.Set(Sigv4Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params NetworkingReadResolverDnsRulesParams
	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NetworkingReadResolverDnsRules(ctx, dnsResolverId, params)
	return err
}

// NetworkingCreateDnsRule converts echo context to params.
func (w *ServerInterfaceWrapper) NetworkingCreateDnsRule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "dns_resolver_id" -------------
	var dnsResolverId Uuidv4

	err = runtime.BindStyledParameterWithLocation("simple", false, "dns_resolver_id", runtime.ParamLocationPath, ctx.Param("dns_resolver_id"), &dnsResolverId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dns_resolver_id: %s", err))
	}

	ctx.Set(Sigv4Scopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NetworkingCreateDnsRule(ctx, dnsResolverId)
	return err
}

// NetworkingReadDnsRules converts echo context to params.
func (w *ServerInterfaceWrapper) NetworkingReadDnsRules(ctx echo.Context) error {
	var err error

	ctx.Set(Sigv4Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params NetworkingReadDnsRulesParams
	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NetworkingReadDnsRules(ctx, params)
	return err
}

// NetworkingDeleteDnsRule converts echo context to params.
func (w *ServerInterfaceWrapper) NetworkingDeleteDnsRule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "dns_rule_id" -------------
	var dnsRuleId Uuidv4

	err = runtime.BindStyledParameterWithLocation("simple", false, "dns_rule_id", runtime.ParamLocationPath, ctx.Param("dns_rule_id"), &dnsRuleId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dns_rule_id: %s", err))
	}

	ctx.Set(Sigv4Scopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NetworkingDeleteDnsRule(ctx, dnsRuleId)
	return err
}

// NetworkingReadDnsRule converts echo context to params.
func (w *ServerInterfaceWrapper) NetworkingReadDnsRule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "dns_rule_id" -------------
	var dnsRuleId Uuidv4

	err = runtime.BindStyledParameterWithLocation("simple", false, "dns_rule_id", runtime.ParamLocationPath, ctx.Param("dns_rule_id"), &dnsRuleId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dns_rule_id: %s", err))
	}

	ctx.Set(Sigv4Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params NetworkingReadDnsRuleParams
	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NetworkingReadDnsRule(ctx, dnsRuleId, params)
	return err
}

// NetworkingUpdateDnsRule converts echo context to params.
func (w *ServerInterfaceWrapper) NetworkingUpdateDnsRule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "dns_rule_id" -------------
	var dnsRuleId Uuidv4

	err = runtime.BindStyledParameterWithLocation("simple", false, "dns_rule_id", runtime.ParamLocationPath, ctx.Param("dns_rule_id"), &dnsRuleId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dns_rule_id: %s", err))
	}

	ctx.Set(Sigv4Scopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NetworkingUpdateDnsRule(ctx, dnsRuleId)
	return err
}

// NetworkingReadDxAssociations converts echo context to params.
func (w *ServerInterfaceWrapper) NetworkingReadDxAssociations(ctx echo.Context) error {
	var err error

	ctx.Set(Sigv4Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params NetworkingReadDxAssociationsParams
	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NetworkingReadDxAssociations(ctx, params)
	return err
}

// NetworkingDeleteDxAssociation converts echo context to params.
func (w *ServerInterfaceWrapper) NetworkingDeleteDxAssociation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "dx_association_id" -------------
	var dxAssociationId Uuidv4

	err = runtime.BindStyledParameterWithLocation("simple", false, "dx_association_id", runtime.ParamLocationPath, ctx.Param("dx_association_id"), &dxAssociationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dx_association_id: %s", err))
	}

	ctx.Set(Sigv4Scopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NetworkingDeleteDxAssociation(ctx, dxAssociationId)
	return err
}

// NetworkingReadDxAssociation converts echo context to params.
func (w *ServerInterfaceWrapper) NetworkingReadDxAssociation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "dx_association_id" -------------
	var dxAssociationId Uuidv4

	err = runtime.BindStyledParameterWithLocation("simple", false, "dx_association_id", runtime.ParamLocationPath, ctx.Param("dx_association_id"), &dxAssociationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dx_association_id: %s", err))
	}

	ctx.Set(Sigv4Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params NetworkingReadDxAssociationParams
	// ------------- Required query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, true, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NetworkingReadDxAssociation(ctx, dxAssociationId, params)
	return err
}

// NetworkingUpdateDxAssociation converts echo context to params.
func (w *ServerInterfaceWrapper) NetworkingUpdateDxAssociation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "dx_association_id" -------------
	var dxAssociationId Uuidv4

	err = runtime.BindStyledParameterWithLocation("simple", false, "dx_association_id", runtime.ParamLocationPath, ctx.Param("dx_association_id"), &dxAssociationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dx_association_id: %s", err))
	}

	ctx.Set(Sigv4Scopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NetworkingUpdateDxAssociation(ctx, dxAssociationId)
	return err
}

// NetworkingReadDxGateways converts echo context to params.
func (w *ServerInterfaceWrapper) NetworkingReadDxGateways(ctx echo.Context) error {
	var err error

	ctx.Set(Sigv4Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params NetworkingReadDxGatewaysParams
	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NetworkingReadDxGateways(ctx, params)
	return err
}

// NetworkingDeleteDxGateway converts echo context to params.
func (w *ServerInterfaceWrapper) NetworkingDeleteDxGateway(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "dx_gateway_id" -------------
	var dxGatewayId Uuidv4

	err = runtime.BindStyledParameterWithLocation("simple", false, "dx_gateway_id", runtime.ParamLocationPath, ctx.Param("dx_gateway_id"), &dxGatewayId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dx_gateway_id: %s", err))
	}

	ctx.Set(Sigv4Scopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NetworkingDeleteDxGateway(ctx, dxGatewayId)
	return err
}

// NetworkingReadDxGateway converts echo context to params.
func (w *ServerInterfaceWrapper) NetworkingReadDxGateway(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "dx_gateway_id" -------------
	var dxGatewayId Uuidv4

	err = runtime.BindStyledParameterWithLocation("simple", false, "dx_gateway_id", runtime.ParamLocationPath, ctx.Param("dx_gateway_id"), &dxGatewayId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dx_gateway_id: %s", err))
	}

	ctx.Set(Sigv4Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params NetworkingReadDxGatewayParams
	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NetworkingReadDxGateway(ctx, dxGatewayId, params)
	return err
}

// NetworkingReadGatewayDxAssociations converts echo context to params.
func (w *ServerInterfaceWrapper) NetworkingReadGatewayDxAssociations(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "dx_gateway_id" -------------
	var dxGatewayId Uuidv4

	err = runtime.BindStyledParameterWithLocation("simple", false, "dx_gateway_id", runtime.ParamLocationPath, ctx.Param("dx_gateway_id"), &dxGatewayId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dx_gateway_id: %s", err))
	}

	ctx.Set(Sigv4Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params NetworkingReadGatewayDxAssociationsParams
	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NetworkingReadGatewayDxAssociations(ctx, dxGatewayId, params)
	return err
}

// NetworkingCreateDxAssociation converts echo context to params.
func (w *ServerInterfaceWrapper) NetworkingCreateDxAssociation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "dx_gateway_id" -------------
	var dxGatewayId Uuidv4

	err = runtime.BindStyledParameterWithLocation("simple", false, "dx_gateway_id", runtime.ParamLocationPath, ctx.Param("dx_gateway_id"), &dxGatewayId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dx_gateway_id: %s", err))
	}

	ctx.Set(Sigv4Scopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NetworkingCreateDxAssociation(ctx, dxGatewayId)
	return err
}

// NetworkingReadGatewayDxVifs converts echo context to params.
func (w *ServerInterfaceWrapper) NetworkingReadGatewayDxVifs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "dx_gateway_id" -------------
	var dxGatewayId Uuidv4

	err = runtime.BindStyledParameterWithLocation("simple", false, "dx_gateway_id", runtime.ParamLocationPath, ctx.Param("dx_gateway_id"), &dxGatewayId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dx_gateway_id: %s", err))
	}

	ctx.Set(Sigv4Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params NetworkingReadGatewayDxVifsParams
	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NetworkingReadGatewayDxVifs(ctx, dxGatewayId, params)
	return err
}

// NetworkingCreateDxResource converts echo context to params.
func (w *ServerInterfaceWrapper) NetworkingCreateDxResource(ctx echo.Context) error {
	var err error

	ctx.Set(Sigv4Scopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NetworkingCreateDxResource(ctx)
	return err
}

// NetworkingReadDxVifs converts echo context to params.
func (w *ServerInterfaceWrapper) NetworkingReadDxVifs(ctx echo.Context) error {
	var err error

	ctx.Set(Sigv4Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params NetworkingReadDxVifsParams
	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NetworkingReadDxVifs(ctx, params)
	return err
}

// NetworkingDeleteDxVif converts echo context to params.
func (w *ServerInterfaceWrapper) NetworkingDeleteDxVif(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "dx_vif_id" -------------
	var dxVifId Uuidv4

	err = runtime.BindStyledParameterWithLocation("simple", false, "dx_vif_id", runtime.ParamLocationPath, ctx.Param("dx_vif_id"), &dxVifId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dx_vif_id: %s", err))
	}

	ctx.Set(Sigv4Scopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NetworkingDeleteDxVif(ctx, dxVifId)
	return err
}

// NetworkingReadDxVif converts echo context to params.
func (w *ServerInterfaceWrapper) NetworkingReadDxVif(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "dx_vif_id" -------------
	var dxVifId Uuidv4

	err = runtime.BindStyledParameterWithLocation("simple", false, "dx_vif_id", runtime.ParamLocationPath, ctx.Param("dx_vif_id"), &dxVifId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dx_vif_id: %s", err))
	}

	ctx.Set(Sigv4Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params NetworkingReadDxVifParams
	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NetworkingReadDxVif(ctx, dxVifId, params)
	return err
}

// NetworkingUpdateDxVif converts echo context to params.
func (w *ServerInterfaceWrapper) NetworkingUpdateDxVif(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "dx_vif_id" -------------
	var dxVifId Uuidv4

	err = runtime.BindStyledParameterWithLocation("simple", false, "dx_vif_id", runtime.ParamLocationPath, ctx.Param("dx_vif_id"), &dxVifId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dx_vif_id: %s", err))
	}

	ctx.Set(Sigv4Scopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NetworkingUpdateDxVif(ctx, dxVifId)
	return err
}

// NetworkingReadDxVifStatus converts echo context to params.
func (w *ServerInterfaceWrapper) NetworkingReadDxVifStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "dx_vif_id" -------------
	var dxVifId Uuidv4

	err = runtime.BindStyledParameterWithLocation("simple", false, "dx_vif_id", runtime.ParamLocationPath, ctx.Param("dx_vif_id"), &dxVifId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dx_vif_id: %s", err))
	}

	ctx.Set(Sigv4Scopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NetworkingReadDxVifStatus(ctx, dxVifId)
	return err
}

// NetworkingReadCidrExclusions converts echo context to params.
func (w *ServerInterfaceWrapper) NetworkingReadCidrExclusions(ctx echo.Context) error {
	var err error

	ctx.Set(Sigv4Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params NetworkingReadCidrExclusionsParams
	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NetworkingReadCidrExclusions(ctx, params)
	return err
}

// NetworkingDeleteCidrExclusion converts echo context to params.
func (w *ServerInterfaceWrapper) NetworkingDeleteCidrExclusion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "exclusion_id" -------------
	var exclusionId Uuidv4

	err = runtime.BindStyledParameterWithLocation("simple", false, "exclusion_id", runtime.ParamLocationPath, ctx.Param("exclusion_id"), &exclusionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclusion_id: %s", err))
	}

	ctx.Set(Sigv4Scopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NetworkingDeleteCidrExclusion(ctx, exclusionId)
	return err
}

// NetworkingReadCidrExclusion converts echo context to params.
func (w *ServerInterfaceWrapper) NetworkingReadCidrExclusion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "exclusion_id" -------------
	var exclusionId Uuidv4

	err = runtime.BindStyledParameterWithLocation("simple", false, "exclusion_id", runtime.ParamLocationPath, ctx.Param("exclusion_id"), &exclusionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclusion_id: %s", err))
	}

	ctx.Set(Sigv4Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params NetworkingReadCidrExclusionParams
	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NetworkingReadCidrExclusion(ctx, exclusionId, params)
	return err
}

// NetworkingUpdateCidrExclusion converts echo context to params.
func (w *ServerInterfaceWrapper) NetworkingUpdateCidrExclusion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "exclusion_id" -------------
	var exclusionId Uuidv4

	err = runtime.BindStyledParameterWithLocation("simple", false, "exclusion_id", runtime.ParamLocationPath, ctx.Param("exclusion_id"), &exclusionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclusion_id: %s", err))
	}

	ctx.Set(Sigv4Scopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NetworkingUpdateCidrExclusion(ctx, exclusionId)
	return err
}

// NetworkingReadHubPeerings converts echo context to params.
func (w *ServerInterfaceWrapper) NetworkingReadHubPeerings(ctx echo.Context) error {
	var err error

	ctx.Set(Sigv4Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params NetworkingReadHubPeeringsParams
	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NetworkingReadHubPeerings(ctx, params)
	return err
}

// NetworkingDeleteHubPeering converts echo context to params.
func (w *ServerInterfaceWrapper) NetworkingDeleteHubPeering(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hub_peering_id" -------------
	var hubPeeringId Uuidv4

	err = runtime.BindStyledParameterWithLocation("simple", false, "hub_peering_id", runtime.ParamLocationPath, ctx.Param("hub_peering_id"), &hubPeeringId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hub_peering_id: %s", err))
	}

	ctx.Set(Sigv4Scopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NetworkingDeleteHubPeering(ctx, hubPeeringId)
	return err
}

// NetworkingReadHubPeering converts echo context to params.
func (w *ServerInterfaceWrapper) NetworkingReadHubPeering(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hub_peering_id" -------------
	var hubPeeringId Uuidv4

	err = runtime.BindStyledParameterWithLocation("simple", false, "hub_peering_id", runtime.ParamLocationPath, ctx.Param("hub_peering_id"), &hubPeeringId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hub_peering_id: %s", err))
	}

	ctx.Set(Sigv4Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params NetworkingReadHubPeeringParams
	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NetworkingReadHubPeering(ctx, hubPeeringId, params)
	return err
}

// NetworkingUpdateHubPeering converts echo context to params.
func (w *ServerInterfaceWrapper) NetworkingUpdateHubPeering(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hub_peering_id" -------------
	var hubPeeringId Uuidv4

	err = runtime.BindStyledParameterWithLocation("simple", false, "hub_peering_id", runtime.ParamLocationPath, ctx.Param("hub_peering_id"), &hubPeeringId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hub_peering_id: %s", err))
	}

	ctx.Set(Sigv4Scopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NetworkingUpdateHubPeering(ctx, hubPeeringId)
	return err
}

// NetworkingReadHubs converts echo context to params.
func (w *ServerInterfaceWrapper) NetworkingReadHubs(ctx echo.Context) error {
	var err error

	ctx.Set(Sigv4Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params NetworkingReadHubsParams
	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NetworkingReadHubs(ctx, params)
	return err
}

// NetworkingCreateHub converts echo context to params.
func (w *ServerInterfaceWrapper) NetworkingCreateHub(ctx echo.Context) error {
	var err error

	ctx.Set(Sigv4Scopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NetworkingCreateHub(ctx)
	return err
}

// NetworkingDeleteHub converts echo context to params.
func (w *ServerInterfaceWrapper) NetworkingDeleteHub(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hub_id" -------------
	var hubId Uuidv4

	err = runtime.BindStyledParameterWithLocation("simple", false, "hub_id", runtime.ParamLocationPath, ctx.Param("hub_id"), &hubId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hub_id: %s", err))
	}

	ctx.Set(Sigv4Scopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NetworkingDeleteHub(ctx, hubId)
	return err
}

// NetworkingReadHub converts echo context to params.
func (w *ServerInterfaceWrapper) NetworkingReadHub(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hub_id" -------------
	var hubId Uuidv4

	err = runtime.BindStyledParameterWithLocation("simple", false, "hub_id", runtime.ParamLocationPath, ctx.Param("hub_id"), &hubId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hub_id: %s", err))
	}

	ctx.Set(Sigv4Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params NetworkingReadHubParams
	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NetworkingReadHub(ctx, hubId, params)
	return err
}

// NetworkingUpdateHub converts echo context to params.
func (w *ServerInterfaceWrapper) NetworkingUpdateHub(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hub_id" -------------
	var hubId Uuidv4

	err = runtime.BindStyledParameterWithLocation("simple", false, "hub_id", runtime.ParamLocationPath, ctx.Param("hub_id"), &hubId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hub_id: %s", err))
	}

	ctx.Set(Sigv4Scopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NetworkingUpdateHub(ctx, hubId)
	return err
}

// NetworkingReadHubDnsResolvers converts echo context to params.
func (w *ServerInterfaceWrapper) NetworkingReadHubDnsResolvers(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hub_id" -------------
	var hubId Uuidv4

	err = runtime.BindStyledParameterWithLocation("simple", false, "hub_id", runtime.ParamLocationPath, ctx.Param("hub_id"), &hubId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hub_id: %s", err))
	}

	ctx.Set(Sigv4Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params NetworkingReadHubDnsResolversParams
	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NetworkingReadHubDnsResolvers(ctx, hubId, params)
	return err
}

// NetworkingCreateDnsResolver converts echo context to params.
func (w *ServerInterfaceWrapper) NetworkingCreateDnsResolver(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hub_id" -------------
	var hubId Uuidv4

	err = runtime.BindStyledParameterWithLocation("simple", false, "hub_id", runtime.ParamLocationPath, ctx.Param("hub_id"), &hubId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hub_id: %s", err))
	}

	ctx.Set(Sigv4Scopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NetworkingCreateDnsResolver(ctx, hubId)
	return err
}

// NetworkingReadHubDxAssociations converts echo context to params.
func (w *ServerInterfaceWrapper) NetworkingReadHubDxAssociations(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hub_id" -------------
	var hubId Uuidv4

	err = runtime.BindStyledParameterWithLocation("simple", false, "hub_id", runtime.ParamLocationPath, ctx.Param("hub_id"), &hubId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hub_id: %s", err))
	}

	ctx.Set(Sigv4Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params NetworkingReadHubDxAssociationsParams
	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NetworkingReadHubDxAssociations(ctx, hubId, params)
	return err
}

// NetworkingReadHubDxGateways converts echo context to params.
func (w *ServerInterfaceWrapper) NetworkingReadHubDxGateways(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hub_id" -------------
	var hubId Uuidv4

	err = runtime.BindStyledParameterWithLocation("simple", false, "hub_id", runtime.ParamLocationPath, ctx.Param("hub_id"), &hubId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hub_id: %s", err))
	}

	ctx.Set(Sigv4Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params NetworkingReadHubDxGatewaysParams
	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NetworkingReadHubDxGateways(ctx, hubId, params)
	return err
}

// NetworkingReadHubCidrExclusions converts echo context to params.
func (w *ServerInterfaceWrapper) NetworkingReadHubCidrExclusions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hub_id" -------------
	var hubId Uuidv4

	err = runtime.BindStyledParameterWithLocation("simple", false, "hub_id", runtime.ParamLocationPath, ctx.Param("hub_id"), &hubId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hub_id: %s", err))
	}

	ctx.Set(Sigv4Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params NetworkingReadHubCidrExclusionsParams
	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NetworkingReadHubCidrExclusions(ctx, hubId, params)
	return err
}

// NetworkingCreateCidrExclusion converts echo context to params.
func (w *ServerInterfaceWrapper) NetworkingCreateCidrExclusion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hub_id" -------------
	var hubId Uuidv4

	err = runtime.BindStyledParameterWithLocation("simple", false, "hub_id", runtime.ParamLocationPath, ctx.Param("hub_id"), &hubId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hub_id: %s", err))
	}

	ctx.Set(Sigv4Scopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NetworkingCreateCidrExclusion(ctx, hubId)
	return err
}

// NetworkingReadHubPrefixLists converts echo context to params.
func (w *ServerInterfaceWrapper) NetworkingReadHubPrefixLists(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hub_id" -------------
	var hubId Uuidv4

	err = runtime.BindStyledParameterWithLocation("simple", false, "hub_id", runtime.ParamLocationPath, ctx.Param("hub_id"), &hubId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hub_id: %s", err))
	}

	ctx.Set(Sigv4Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params NetworkingReadHubPrefixListsParams
	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NetworkingReadHubPrefixLists(ctx, hubId, params)
	return err
}

// NetworkingCreateHubPrefixList converts echo context to params.
func (w *ServerInterfaceWrapper) NetworkingCreateHubPrefixList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hub_id" -------------
	var hubId Uuidv4

	err = runtime.BindStyledParameterWithLocation("simple", false, "hub_id", runtime.ParamLocationPath, ctx.Param("hub_id"), &hubId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hub_id: %s", err))
	}

	ctx.Set(Sigv4Scopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NetworkingCreateHubPrefixList(ctx, hubId)
	return err
}

// NetworkingCreateVpcPrefixList converts echo context to params.
func (w *ServerInterfaceWrapper) NetworkingCreateVpcPrefixList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hub_id" -------------
	var hubId Uuidv4

	err = runtime.BindStyledParameterWithLocation("simple", false, "hub_id", runtime.ParamLocationPath, ctx.Param("hub_id"), &hubId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hub_id: %s", err))
	}

	ctx.Set(Sigv4Scopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NetworkingCreateVpcPrefixList(ctx, hubId)
	return err
}

// NetworkingReadHubCidrRanges converts echo context to params.
func (w *ServerInterfaceWrapper) NetworkingReadHubCidrRanges(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hub_id" -------------
	var hubId Uuidv4

	err = runtime.BindStyledParameterWithLocation("simple", false, "hub_id", runtime.ParamLocationPath, ctx.Param("hub_id"), &hubId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hub_id: %s", err))
	}

	ctx.Set(Sigv4Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params NetworkingReadHubCidrRangesParams
	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// ------------- Optional query parameter "id_filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "id_filter", ctx.QueryParams(), &params.IdFilter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id_filter: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NetworkingReadHubCidrRanges(ctx, hubId, params)
	return err
}

// NetworkingCreateCidrRange converts echo context to params.
func (w *ServerInterfaceWrapper) NetworkingCreateCidrRange(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hub_id" -------------
	var hubId Uuidv4

	err = runtime.BindStyledParameterWithLocation("simple", false, "hub_id", runtime.ParamLocationPath, ctx.Param("hub_id"), &hubId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hub_id: %s", err))
	}

	ctx.Set(Sigv4Scopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NetworkingCreateCidrRange(ctx, hubId)
	return err
}

// NetworkingReadHubVpcs converts echo context to params.
func (w *ServerInterfaceWrapper) NetworkingReadHubVpcs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hub_id" -------------
	var hubId Uuidv4

	err = runtime.BindStyledParameterWithLocation("simple", false, "hub_id", runtime.ParamLocationPath, ctx.Param("hub_id"), &hubId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hub_id: %s", err))
	}

	ctx.Set(Sigv4Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params NetworkingReadHubVpcsParams
	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// ------------- Optional query parameter "type" -------------

	err = runtime.BindQueryParameter("form", true, false, "type", ctx.QueryParams(), &params.Type)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter type: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NetworkingReadHubVpcs(ctx, hubId, params)
	return err
}

// NetworkingCreateVpc converts echo context to params.
func (w *ServerInterfaceWrapper) NetworkingCreateVpc(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hub_id" -------------
	var hubId Uuidv4

	err = runtime.BindStyledParameterWithLocation("simple", false, "hub_id", runtime.ParamLocationPath, ctx.Param("hub_id"), &hubId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hub_id: %s", err))
	}

	ctx.Set(Sigv4Scopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NetworkingCreateVpc(ctx, hubId)
	return err
}

// NetworkingReadHubVpnConnections converts echo context to params.
func (w *ServerInterfaceWrapper) NetworkingReadHubVpnConnections(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hub_id" -------------
	var hubId Uuidv4

	err = runtime.BindStyledParameterWithLocation("simple", false, "hub_id", runtime.ParamLocationPath, ctx.Param("hub_id"), &hubId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hub_id: %s", err))
	}

	ctx.Set(Sigv4Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params NetworkingReadHubVpnConnectionsParams
	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NetworkingReadHubVpnConnections(ctx, hubId, params)
	return err
}

// NetworkingReadHubVpnCustomerGateways converts echo context to params.
func (w *ServerInterfaceWrapper) NetworkingReadHubVpnCustomerGateways(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hub_id" -------------
	var hubId Uuidv4

	err = runtime.BindStyledParameterWithLocation("simple", false, "hub_id", runtime.ParamLocationPath, ctx.Param("hub_id"), &hubId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hub_id: %s", err))
	}

	ctx.Set(Sigv4Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params NetworkingReadHubVpnCustomerGatewaysParams
	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NetworkingReadHubVpnCustomerGateways(ctx, hubId, params)
	return err
}

// NetworkingReadHubHubPeerings converts echo context to params.
func (w *ServerInterfaceWrapper) NetworkingReadHubHubPeerings(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "networking_hub_id" -------------
	var networkingHubId Uuidv4

	err = runtime.BindStyledParameterWithLocation("simple", false, "networking_hub_id", runtime.ParamLocationPath, ctx.Param("networking_hub_id"), &networkingHubId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter networking_hub_id: %s", err))
	}

	ctx.Set(Sigv4Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params NetworkingReadHubHubPeeringsParams
	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NetworkingReadHubHubPeerings(ctx, networkingHubId, params)
	return err
}

// NetworkingCreateHubPeering converts echo context to params.
func (w *ServerInterfaceWrapper) NetworkingCreateHubPeering(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "networking_hub_id" -------------
	var networkingHubId Uuidv4

	err = runtime.BindStyledParameterWithLocation("simple", false, "networking_hub_id", runtime.ParamLocationPath, ctx.Param("networking_hub_id"), &networkingHubId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter networking_hub_id: %s", err))
	}

	ctx.Set(Sigv4Scopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NetworkingCreateHubPeering(ctx, networkingHubId)
	return err
}

// NetworkingReadPrefixLists converts echo context to params.
func (w *ServerInterfaceWrapper) NetworkingReadPrefixLists(ctx echo.Context) error {
	var err error

	ctx.Set(Sigv4Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params NetworkingReadPrefixListsParams
	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NetworkingReadPrefixLists(ctx, params)
	return err
}

// NetworkingUpdateHubPrefixListAssociation converts echo context to params.
func (w *ServerInterfaceWrapper) NetworkingUpdateHubPrefixListAssociation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "prefix_list_id" -------------
	var prefixListId Uuidv4

	err = runtime.BindStyledParameterWithLocation("simple", false, "prefix_list_id", runtime.ParamLocationPath, ctx.Param("prefix_list_id"), &prefixListId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter prefix_list_id: %s", err))
	}

	ctx.Set(Sigv4Scopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NetworkingUpdateHubPrefixListAssociation(ctx, prefixListId)
	return err
}

// NetworkingUpdateVpcPrefixListAssociation converts echo context to params.
func (w *ServerInterfaceWrapper) NetworkingUpdateVpcPrefixListAssociation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "prefix_list_id" -------------
	var prefixListId Uuidv4

	err = runtime.BindStyledParameterWithLocation("simple", false, "prefix_list_id", runtime.ParamLocationPath, ctx.Param("prefix_list_id"), &prefixListId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter prefix_list_id: %s", err))
	}

	ctx.Set(Sigv4Scopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NetworkingUpdateVpcPrefixListAssociation(ctx, prefixListId)
	return err
}

// NetworkingDeletePrefixList converts echo context to params.
func (w *ServerInterfaceWrapper) NetworkingDeletePrefixList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "prefix_list_id" -------------
	var prefixListId Uuidv4

	err = runtime.BindStyledParameterWithLocation("simple", false, "prefix_list_id", runtime.ParamLocationPath, ctx.Param("prefix_list_id"), &prefixListId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter prefix_list_id: %s", err))
	}

	ctx.Set(Sigv4Scopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NetworkingDeletePrefixList(ctx, prefixListId)
	return err
}

// NetworkingReadPrefixList converts echo context to params.
func (w *ServerInterfaceWrapper) NetworkingReadPrefixList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "prefix_list_id" -------------
	var prefixListId Uuidv4

	err = runtime.BindStyledParameterWithLocation("simple", false, "prefix_list_id", runtime.ParamLocationPath, ctx.Param("prefix_list_id"), &prefixListId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter prefix_list_id: %s", err))
	}

	ctx.Set(Sigv4Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params NetworkingReadPrefixListParams
	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NetworkingReadPrefixList(ctx, prefixListId, params)
	return err
}

// NetworkingUpdatePrefixList converts echo context to params.
func (w *ServerInterfaceWrapper) NetworkingUpdatePrefixList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "prefix_list_id" -------------
	var prefixListId Uuidv4

	err = runtime.BindStyledParameterWithLocation("simple", false, "prefix_list_id", runtime.ParamLocationPath, ctx.Param("prefix_list_id"), &prefixListId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter prefix_list_id: %s", err))
	}

	ctx.Set(Sigv4Scopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NetworkingUpdatePrefixList(ctx, prefixListId)
	return err
}

// NetworkingReadCidrRanges converts echo context to params.
func (w *ServerInterfaceWrapper) NetworkingReadCidrRanges(ctx echo.Context) error {
	var err error

	ctx.Set(Sigv4Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params NetworkingReadCidrRangesParams
	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// ------------- Optional query parameter "id_filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "id_filter", ctx.QueryParams(), &params.IdFilter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id_filter: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NetworkingReadCidrRanges(ctx, params)
	return err
}

// NetworkingDeleteCidrRange converts echo context to params.
func (w *ServerInterfaceWrapper) NetworkingDeleteCidrRange(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "range_id" -------------
	var rangeId Uuidv4

	err = runtime.BindStyledParameterWithLocation("simple", false, "range_id", runtime.ParamLocationPath, ctx.Param("range_id"), &rangeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter range_id: %s", err))
	}

	ctx.Set(Sigv4Scopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NetworkingDeleteCidrRange(ctx, rangeId)
	return err
}

// NetworkingReadCidrRange converts echo context to params.
func (w *ServerInterfaceWrapper) NetworkingReadCidrRange(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "range_id" -------------
	var rangeId Uuidv4

	err = runtime.BindStyledParameterWithLocation("simple", false, "range_id", runtime.ParamLocationPath, ctx.Param("range_id"), &rangeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter range_id: %s", err))
	}

	ctx.Set(Sigv4Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params NetworkingReadCidrRangeParams
	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// ------------- Optional query parameter "id_filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "id_filter", ctx.QueryParams(), &params.IdFilter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id_filter: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NetworkingReadCidrRange(ctx, rangeId, params)
	return err
}

// NetworkingUpdateCidrRange converts echo context to params.
func (w *ServerInterfaceWrapper) NetworkingUpdateCidrRange(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "range_id" -------------
	var rangeId Uuidv4

	err = runtime.BindStyledParameterWithLocation("simple", false, "range_id", runtime.ParamLocationPath, ctx.Param("range_id"), &rangeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter range_id: %s", err))
	}

	ctx.Set(Sigv4Scopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NetworkingUpdateCidrRange(ctx, rangeId)
	return err
}

// NetworkingReadVpcs converts echo context to params.
func (w *ServerInterfaceWrapper) NetworkingReadVpcs(ctx echo.Context) error {
	var err error

	ctx.Set(Sigv4Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params NetworkingReadVpcsParams
	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// ------------- Optional query parameter "type" -------------

	err = runtime.BindQueryParameter("form", true, false, "type", ctx.QueryParams(), &params.Type)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter type: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NetworkingReadVpcs(ctx, params)
	return err
}

// NetworkingDeleteVpc converts echo context to params.
func (w *ServerInterfaceWrapper) NetworkingDeleteVpc(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "vpc_id" -------------
	var vpcId Uuidv4

	err = runtime.BindStyledParameterWithLocation("simple", false, "vpc_id", runtime.ParamLocationPath, ctx.Param("vpc_id"), &vpcId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter vpc_id: %s", err))
	}

	ctx.Set(Sigv4Scopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NetworkingDeleteVpc(ctx, vpcId)
	return err
}

// NetworkingReadVpc converts echo context to params.
func (w *ServerInterfaceWrapper) NetworkingReadVpc(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "vpc_id" -------------
	var vpcId Uuidv4

	err = runtime.BindStyledParameterWithLocation("simple", false, "vpc_id", runtime.ParamLocationPath, ctx.Param("vpc_id"), &vpcId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter vpc_id: %s", err))
	}

	ctx.Set(Sigv4Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params NetworkingReadVpcParams
	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// ------------- Optional query parameter "type" -------------

	err = runtime.BindQueryParameter("form", true, false, "type", ctx.QueryParams(), &params.Type)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter type: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NetworkingReadVpc(ctx, vpcId, params)
	return err
}

// NetworkingUpdateVpc converts echo context to params.
func (w *ServerInterfaceWrapper) NetworkingUpdateVpc(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "vpc_id" -------------
	var vpcId Uuidv4

	err = runtime.BindStyledParameterWithLocation("simple", false, "vpc_id", runtime.ParamLocationPath, ctx.Param("vpc_id"), &vpcId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter vpc_id: %s", err))
	}

	ctx.Set(Sigv4Scopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NetworkingUpdateVpc(ctx, vpcId)
	return err
}

// NetworkingReadVpnConnections converts echo context to params.
func (w *ServerInterfaceWrapper) NetworkingReadVpnConnections(ctx echo.Context) error {
	var err error

	ctx.Set(Sigv4Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params NetworkingReadVpnConnectionsParams
	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NetworkingReadVpnConnections(ctx, params)
	return err
}

// NetworkingDeleteVpnConnection converts echo context to params.
func (w *ServerInterfaceWrapper) NetworkingDeleteVpnConnection(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "vpn_connection_id" -------------
	var vpnConnectionId Uuidv4

	err = runtime.BindStyledParameterWithLocation("simple", false, "vpn_connection_id", runtime.ParamLocationPath, ctx.Param("vpn_connection_id"), &vpnConnectionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter vpn_connection_id: %s", err))
	}

	ctx.Set(Sigv4Scopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NetworkingDeleteVpnConnection(ctx, vpnConnectionId)
	return err
}

// NetworkingReadVpnConnection converts echo context to params.
func (w *ServerInterfaceWrapper) NetworkingReadVpnConnection(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "vpn_connection_id" -------------
	var vpnConnectionId Uuidv4

	err = runtime.BindStyledParameterWithLocation("simple", false, "vpn_connection_id", runtime.ParamLocationPath, ctx.Param("vpn_connection_id"), &vpnConnectionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter vpn_connection_id: %s", err))
	}

	ctx.Set(Sigv4Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params NetworkingReadVpnConnectionParams
	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NetworkingReadVpnConnection(ctx, vpnConnectionId, params)
	return err
}

// NetworkingUpdateVpnConnection converts echo context to params.
func (w *ServerInterfaceWrapper) NetworkingUpdateVpnConnection(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "vpn_connection_id" -------------
	var vpnConnectionId Uuidv4

	err = runtime.BindStyledParameterWithLocation("simple", false, "vpn_connection_id", runtime.ParamLocationPath, ctx.Param("vpn_connection_id"), &vpnConnectionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter vpn_connection_id: %s", err))
	}

	ctx.Set(Sigv4Scopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NetworkingUpdateVpnConnection(ctx, vpnConnectionId)
	return err
}

// NetworkingReadVpnConnectionStatus converts echo context to params.
func (w *ServerInterfaceWrapper) NetworkingReadVpnConnectionStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "vpn_connection_id" -------------
	var vpnConnectionId Uuidv4

	err = runtime.BindStyledParameterWithLocation("simple", false, "vpn_connection_id", runtime.ParamLocationPath, ctx.Param("vpn_connection_id"), &vpnConnectionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter vpn_connection_id: %s", err))
	}

	ctx.Set(Sigv4Scopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NetworkingReadVpnConnectionStatus(ctx, vpnConnectionId)
	return err
}

// NetworkingReadVpnCustomerGateways converts echo context to params.
func (w *ServerInterfaceWrapper) NetworkingReadVpnCustomerGateways(ctx echo.Context) error {
	var err error

	ctx.Set(Sigv4Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params NetworkingReadVpnCustomerGatewaysParams
	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NetworkingReadVpnCustomerGateways(ctx, params)
	return err
}

// NetworkingCreateVpnCustomerGateway converts echo context to params.
func (w *ServerInterfaceWrapper) NetworkingCreateVpnCustomerGateway(ctx echo.Context) error {
	var err error

	ctx.Set(Sigv4Scopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NetworkingCreateVpnCustomerGateway(ctx)
	return err
}

// NetworkingDeleteVpnCustomerGateway converts echo context to params.
func (w *ServerInterfaceWrapper) NetworkingDeleteVpnCustomerGateway(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "vpn_customer_gateway_id" -------------
	var vpnCustomerGatewayId Uuidv4

	err = runtime.BindStyledParameterWithLocation("simple", false, "vpn_customer_gateway_id", runtime.ParamLocationPath, ctx.Param("vpn_customer_gateway_id"), &vpnCustomerGatewayId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter vpn_customer_gateway_id: %s", err))
	}

	ctx.Set(Sigv4Scopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NetworkingDeleteVpnCustomerGateway(ctx, vpnCustomerGatewayId)
	return err
}

// NetworkingReadVpnCustomerGateway converts echo context to params.
func (w *ServerInterfaceWrapper) NetworkingReadVpnCustomerGateway(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "vpn_customer_gateway_id" -------------
	var vpnCustomerGatewayId Uuidv4

	err = runtime.BindStyledParameterWithLocation("simple", false, "vpn_customer_gateway_id", runtime.ParamLocationPath, ctx.Param("vpn_customer_gateway_id"), &vpnCustomerGatewayId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter vpn_customer_gateway_id: %s", err))
	}

	ctx.Set(Sigv4Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params NetworkingReadVpnCustomerGatewayParams
	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NetworkingReadVpnCustomerGateway(ctx, vpnCustomerGatewayId, params)
	return err
}

// NetworkingUpdateVpnCustomerGateway converts echo context to params.
func (w *ServerInterfaceWrapper) NetworkingUpdateVpnCustomerGateway(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "vpn_customer_gateway_id" -------------
	var vpnCustomerGatewayId Uuidv4

	err = runtime.BindStyledParameterWithLocation("simple", false, "vpn_customer_gateway_id", runtime.ParamLocationPath, ctx.Param("vpn_customer_gateway_id"), &vpnCustomerGatewayId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter vpn_customer_gateway_id: %s", err))
	}

	ctx.Set(Sigv4Scopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NetworkingUpdateVpnCustomerGateway(ctx, vpnCustomerGatewayId)
	return err
}

// NetworkingCreateVpnConnection converts echo context to params.
func (w *ServerInterfaceWrapper) NetworkingCreateVpnConnection(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "vpn_customer_gateway_id" -------------
	var vpnCustomerGatewayId Uuidv4

	err = runtime.BindStyledParameterWithLocation("simple", false, "vpn_customer_gateway_id", runtime.ParamLocationPath, ctx.Param("vpn_customer_gateway_id"), &vpnCustomerGatewayId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter vpn_customer_gateway_id: %s", err))
	}

	ctx.Set(Sigv4Scopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NetworkingCreateVpnConnection(ctx, vpnCustomerGatewayId)
	return err
}

// NetworkingReadGatewayVpnConnections converts echo context to params.
func (w *ServerInterfaceWrapper) NetworkingReadGatewayVpnConnections(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "vpn_customer_gateway_id" -------------
	var vpnCustomerGatewayId Uuidv4

	err = runtime.BindStyledParameterWithLocation("simple", false, "vpn_customer_gateway_id", runtime.ParamLocationPath, ctx.Param("vpn_customer_gateway_id"), &vpnCustomerGatewayId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter vpn_customer_gateway_id: %s", err))
	}

	ctx.Set(Sigv4Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params NetworkingReadGatewayVpnConnectionsParams
	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NetworkingReadGatewayVpnConnections(ctx, vpnCustomerGatewayId, params)
	return err
}

// NetworkingReadDxConnections converts echo context to params.
func (w *ServerInterfaceWrapper) NetworkingReadDxConnections(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account_id" -------------
	var accountId Uuidv4

	err = runtime.BindStyledParameterWithLocation("simple", false, "account_id", runtime.ParamLocationPath, ctx.Param("account_id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_id: %s", err))
	}

	ctx.Set(Sigv4Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params NetworkingReadDxConnectionsParams
	// ------------- Optional query parameter "state" -------------

	err = runtime.BindQueryParameter("form", true, false, "state", ctx.QueryParams(), &params.State)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter state: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.NetworkingReadDxConnections(ctx, accountId, params)
	return err
}

// OrganisationsReadOrganisations converts echo context to params.
func (w *ServerInterfaceWrapper) OrganisationsReadOrganisations(ctx echo.Context) error {
	var err error

	ctx.Set(Sigv4Scopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.OrganisationsReadOrganisations(ctx)
	return err
}

// OrganisationsReadOrganisation converts echo context to params.
func (w *ServerInterfaceWrapper) OrganisationsReadOrganisation(ctx echo.Context) error {
	var err error

	ctx.Set(Sigv4Scopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.OrganisationsReadOrganisation(ctx)
	return err
}

// OrganisationsReadOrganisationalUnits converts echo context to params.
func (w *ServerInterfaceWrapper) OrganisationsReadOrganisationalUnits(ctx echo.Context) error {
	var err error

	ctx.Set(Sigv4Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params OrganisationsReadOrganisationalUnitsParams
	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.OrganisationsReadOrganisationalUnits(ctx, params)
	return err
}

// OrganisationsReadOrganisationalUnit converts echo context to params.
func (w *ServerInterfaceWrapper) OrganisationsReadOrganisationalUnit(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "organisational_unit_id" -------------
	var organisationalUnitId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "organisational_unit_id", runtime.ParamLocationPath, ctx.Param("organisational_unit_id"), &organisationalUnitId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter organisational_unit_id: %s", err))
	}

	ctx.Set(Sigv4Scopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.OrganisationsReadOrganisationalUnit(ctx, organisationalUnitId)
	return err
}

// OrganisationsReadPolicies converts echo context to params.
func (w *ServerInterfaceWrapper) OrganisationsReadPolicies(ctx echo.Context) error {
	var err error

	ctx.Set(Sigv4Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params OrganisationsReadPoliciesParams
	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.OrganisationsReadPolicies(ctx, params)
	return err
}

// OrganisationsCreatePolicy converts echo context to params.
func (w *ServerInterfaceWrapper) OrganisationsCreatePolicy(ctx echo.Context) error {
	var err error

	ctx.Set(Sigv4Scopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.OrganisationsCreatePolicy(ctx)
	return err
}

// OrganisationsDetachPolicy converts echo context to params.
func (w *ServerInterfaceWrapper) OrganisationsDetachPolicy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "policy_id" -------------
	var policyId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "policy_id", runtime.ParamLocationPath, ctx.Param("policy_id"), &policyId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter policy_id: %s", err))
	}

	ctx.Set(Sigv4Scopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.OrganisationsDetachPolicy(ctx, policyId)
	return err
}

// OrganisationsAttachPolicy converts echo context to params.
func (w *ServerInterfaceWrapper) OrganisationsAttachPolicy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "policy_id" -------------
	var policyId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "policy_id", runtime.ParamLocationPath, ctx.Param("policy_id"), &policyId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter policy_id: %s", err))
	}

	ctx.Set(Sigv4Scopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.OrganisationsAttachPolicy(ctx, policyId)
	return err
}

// OrganisationsDeletePolicy converts echo context to params.
func (w *ServerInterfaceWrapper) OrganisationsDeletePolicy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "policy_id" -------------
	var policyId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "policy_id", runtime.ParamLocationPath, ctx.Param("policy_id"), &policyId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter policy_id: %s", err))
	}

	ctx.Set(Sigv4Scopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.OrganisationsDeletePolicy(ctx, policyId)
	return err
}

// OrganisationsReadPolicy converts echo context to params.
func (w *ServerInterfaceWrapper) OrganisationsReadPolicy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "policy_id" -------------
	var policyId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "policy_id", runtime.ParamLocationPath, ctx.Param("policy_id"), &policyId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter policy_id: %s", err))
	}

	ctx.Set(Sigv4Scopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.OrganisationsReadPolicy(ctx, policyId)
	return err
}

// OrganisationsUpdatePolicy converts echo context to params.
func (w *ServerInterfaceWrapper) OrganisationsUpdatePolicy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "policy_id" -------------
	var policyId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "policy_id", runtime.ParamLocationPath, ctx.Param("policy_id"), &policyId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter policy_id: %s", err))
	}

	ctx.Set(Sigv4Scopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.OrganisationsUpdatePolicy(ctx, policyId)
	return err
}

// PublicCheckAlias converts echo context to params.
func (w *ServerInterfaceWrapper) PublicCheckAlias(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "alias" -------------
	var alias string

	err = runtime.BindStyledParameterWithLocation("simple", false, "alias", runtime.ParamLocationPath, ctx.Param("alias"), &alias)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter alias: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PublicCheckAlias(ctx, alias)
	return err
}

// PublicReadConfig converts echo context to params.
func (w *ServerInterfaceWrapper) PublicReadConfig(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PublicReadConfig(ctx)
	return err
}

// ServicesReadConfigurations converts echo context to params.
func (w *ServerInterfaceWrapper) ServicesReadConfigurations(ctx echo.Context) error {
	var err error

	ctx.Set(Sigv4Scopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ServicesReadConfigurations(ctx)
	return err
}

// ServicesReadSecurityHubConfiguration converts echo context to params.
func (w *ServerInterfaceWrapper) ServicesReadSecurityHubConfiguration(ctx echo.Context) error {
	var err error

	ctx.Set(Sigv4Scopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ServicesReadSecurityHubConfiguration(ctx)
	return err
}

// ServicesConfigureSecurityHub converts echo context to params.
func (w *ServerInterfaceWrapper) ServicesConfigureSecurityHub(ctx echo.Context) error {
	var err error

	ctx.Set(Sigv4Scopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ServicesConfigureSecurityHub(ctx)
	return err
}

// TasksReadTask converts echo context to params.
func (w *ServerInterfaceWrapper) TasksReadTask(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "task_id" -------------
	var taskId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "task_id", runtime.ParamLocationPath, ctx.Param("task_id"), &taskId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter task_id: %s", err))
	}

	ctx.Set(Sigv4Scopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TasksReadTask(ctx, taskId)
	return err
}

// TeamsReadUsers converts echo context to params.
func (w *ServerInterfaceWrapper) TeamsReadUsers(ctx echo.Context) error {
	var err error

	ctx.Set(Sigv4Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params TeamsReadUsersParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "id_filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "id_filter", ctx.QueryParams(), &params.IdFilter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id_filter: %s", err))
	}

	// ------------- Optional query parameter "status_filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "status_filter", ctx.QueryParams(), &params.StatusFilter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status_filter: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TeamsReadUsers(ctx, params)
	return err
}

// TeamsFetchCurrentUser converts echo context to params.
func (w *ServerInterfaceWrapper) TeamsFetchCurrentUser(ctx echo.Context) error {
	var err error

	ctx.Set(Sigv4Scopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TeamsFetchCurrentUser(ctx)
	return err
}

// TeamsDeleteUser converts echo context to params.
func (w *ServerInterfaceWrapper) TeamsDeleteUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "user_id", runtime.ParamLocationPath, ctx.Param("user_id"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	ctx.Set(Sigv4Scopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TeamsDeleteUser(ctx, userId)
	return err
}

// TeamsReadUser converts echo context to params.
func (w *ServerInterfaceWrapper) TeamsReadUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "user_id", runtime.ParamLocationPath, ctx.Param("user_id"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	ctx.Set(Sigv4Scopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TeamsReadUser(ctx, userId)
	return err
}

// WorkloadsReadCatalogueItems converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadsReadCatalogueItems(ctx echo.Context) error {
	var err error

	ctx.Set(Sigv4Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params WorkloadsReadCatalogueItemsParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "id_filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "id_filter", ctx.QueryParams(), &params.IdFilter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id_filter: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// ------------- Optional query parameter "sort_order" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort_order", ctx.QueryParams(), &params.SortOrder)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort_order: %s", err))
	}

	// ------------- Optional query parameter "include_versions" -------------

	err = runtime.BindQueryParameter("form", true, false, "include_versions", ctx.QueryParams(), &params.IncludeVersions)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include_versions: %s", err))
	}

	// ------------- Optional query parameter "include_parameters" -------------

	err = runtime.BindQueryParameter("form", true, false, "include_parameters", ctx.QueryParams(), &params.IncludeParameters)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include_parameters: %s", err))
	}

	// ------------- Optional query parameter "include_tags" -------------

	err = runtime.BindQueryParameter("form", true, false, "include_tags", ctx.QueryParams(), &params.IncludeTags)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include_tags: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WorkloadsReadCatalogueItems(ctx, params)
	return err
}

// WorkloadsCreateCatalogueItem converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadsCreateCatalogueItem(ctx echo.Context) error {
	var err error

	ctx.Set(Sigv4Scopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WorkloadsCreateCatalogueItem(ctx)
	return err
}

// WorkloadsReadCatalogueManifest converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadsReadCatalogueManifest(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "version_id" -------------
	var versionId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "version_id", runtime.ParamLocationPath, ctx.Param("version_id"), &versionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version_id: %s", err))
	}

	ctx.Set(Sigv4Scopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WorkloadsReadCatalogueManifest(ctx, versionId)
	return err
}

// WorkloadsReadCatalogueTemplate converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadsReadCatalogueTemplate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "version_id" -------------
	var versionId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "version_id", runtime.ParamLocationPath, ctx.Param("version_id"), &versionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version_id: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(Sigv4Scopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WorkloadsReadCatalogueTemplate(ctx, versionId, name)
	return err
}

// WorkloadsDeleteCatalogueItem converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadsDeleteCatalogueItem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catalogue_id" -------------
	var catalogueId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catalogue_id", runtime.ParamLocationPath, ctx.Param("catalogue_id"), &catalogueId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catalogue_id: %s", err))
	}

	ctx.Set(Sigv4Scopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WorkloadsDeleteCatalogueItem(ctx, catalogueId)
	return err
}

// WorkloadsReadCatalogueItem converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadsReadCatalogueItem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catalogue_id" -------------
	var catalogueId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catalogue_id", runtime.ParamLocationPath, ctx.Param("catalogue_id"), &catalogueId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catalogue_id: %s", err))
	}

	ctx.Set(Sigv4Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params WorkloadsReadCatalogueItemParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "id_filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "id_filter", ctx.QueryParams(), &params.IdFilter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id_filter: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// ------------- Optional query parameter "sort_order" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort_order", ctx.QueryParams(), &params.SortOrder)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort_order: %s", err))
	}

	// ------------- Optional query parameter "include_versions" -------------

	err = runtime.BindQueryParameter("form", true, false, "include_versions", ctx.QueryParams(), &params.IncludeVersions)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include_versions: %s", err))
	}

	// ------------- Optional query parameter "include_parameters" -------------

	err = runtime.BindQueryParameter("form", true, false, "include_parameters", ctx.QueryParams(), &params.IncludeParameters)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include_parameters: %s", err))
	}

	// ------------- Optional query parameter "include_tags" -------------

	err = runtime.BindQueryParameter("form", true, false, "include_tags", ctx.QueryParams(), &params.IncludeTags)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include_tags: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WorkloadsReadCatalogueItem(ctx, catalogueId, params)
	return err
}

// WorkloadsCreateCatalogueVersion converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadsCreateCatalogueVersion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catalogue_id" -------------
	var catalogueId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catalogue_id", runtime.ParamLocationPath, ctx.Param("catalogue_id"), &catalogueId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catalogue_id: %s", err))
	}

	ctx.Set(Sigv4Scopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WorkloadsCreateCatalogueVersion(ctx, catalogueId)
	return err
}

// WorkloadsDeleteCatalogueVersion converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadsDeleteCatalogueVersion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catalogue_id" -------------
	var catalogueId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catalogue_id", runtime.ParamLocationPath, ctx.Param("catalogue_id"), &catalogueId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catalogue_id: %s", err))
	}

	// ------------- Path parameter "version_id" -------------
	var versionId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "version_id", runtime.ParamLocationPath, ctx.Param("version_id"), &versionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version_id: %s", err))
	}

	ctx.Set(Sigv4Scopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WorkloadsDeleteCatalogueVersion(ctx, catalogueId, versionId)
	return err
}

// WorkloadsReadCatalogueVersion converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadsReadCatalogueVersion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catalogue_id" -------------
	var catalogueId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catalogue_id", runtime.ParamLocationPath, ctx.Param("catalogue_id"), &catalogueId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catalogue_id: %s", err))
	}

	// ------------- Path parameter "version_id" -------------
	var versionId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "version_id", runtime.ParamLocationPath, ctx.Param("version_id"), &versionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version_id: %s", err))
	}

	ctx.Set(Sigv4Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params WorkloadsReadCatalogueVersionParams
	// ------------- Optional query parameter "include_parameters" -------------

	err = runtime.BindQueryParameter("form", true, false, "include_parameters", ctx.QueryParams(), &params.IncludeParameters)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include_parameters: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WorkloadsReadCatalogueVersion(ctx, catalogueId, versionId, params)
	return err
}

// WorkloadsUpdateAll converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadsUpdateAll(ctx echo.Context) error {
	var err error

	ctx.Set(Sigv4Scopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WorkloadsUpdateAll(ctx)
	return err
}

// WorkloadsReadWorkloads converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadsReadWorkloads(ctx echo.Context) error {
	var err error

	ctx.Set(Sigv4Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params WorkloadsReadWorkloadsParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "account_names" -------------

	err = runtime.BindQueryParameter("form", true, false, "account_names", ctx.QueryParams(), &params.AccountNames)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_names: %s", err))
	}

	// ------------- Optional query parameter "account_types" -------------

	err = runtime.BindQueryParameter("form", true, false, "account_types", ctx.QueryParams(), &params.AccountTypes)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_types: %s", err))
	}

	// ------------- Optional query parameter "account_ids" -------------

	err = runtime.BindQueryParameter("form", true, false, "account_ids", ctx.QueryParams(), &params.AccountIds)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_ids: %s", err))
	}

	// ------------- Optional query parameter "id_filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "id_filter", ctx.QueryParams(), &params.IdFilter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id_filter: %s", err))
	}

	// ------------- Optional query parameter "catalogue_names" -------------

	err = runtime.BindQueryParameter("form", true, false, "catalogue_names", ctx.QueryParams(), &params.CatalogueNames)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catalogue_names: %s", err))
	}

	// ------------- Optional query parameter "catalogue_ids" -------------

	err = runtime.BindQueryParameter("form", true, false, "catalogue_ids", ctx.QueryParams(), &params.CatalogueIds)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catalogue_ids: %s", err))
	}

	// ------------- Optional query parameter "catalogue_version" -------------

	err = runtime.BindQueryParameter("form", true, false, "catalogue_version", ctx.QueryParams(), &params.CatalogueVersion)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catalogue_version: %s", err))
	}

	// ------------- Optional query parameter "catalogue_version_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "catalogue_version_id", ctx.QueryParams(), &params.CatalogueVersionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catalogue_version_id: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// ------------- Optional query parameter "sort_order" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort_order", ctx.QueryParams(), &params.SortOrder)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort_order: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WorkloadsReadWorkloads(ctx, params)
	return err
}

// WorkloadsCreateWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadsCreateWorkload(ctx echo.Context) error {
	var err error

	ctx.Set(Sigv4Scopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WorkloadsCreateWorkload(ctx)
	return err
}

// WorkloadsDeleteWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadsDeleteWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "workload_id" -------------
	var workloadId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "workload_id", runtime.ParamLocationPath, ctx.Param("workload_id"), &workloadId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workload_id: %s", err))
	}

	ctx.Set(Sigv4Scopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WorkloadsDeleteWorkload(ctx, workloadId)
	return err
}

// WorkloadsReadWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadsReadWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "workload_id" -------------
	var workloadId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "workload_id", runtime.ParamLocationPath, ctx.Param("workload_id"), &workloadId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workload_id: %s", err))
	}

	ctx.Set(Sigv4Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params WorkloadsReadWorkloadParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "account_names" -------------

	err = runtime.BindQueryParameter("form", true, false, "account_names", ctx.QueryParams(), &params.AccountNames)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_names: %s", err))
	}

	// ------------- Optional query parameter "account_types" -------------

	err = runtime.BindQueryParameter("form", true, false, "account_types", ctx.QueryParams(), &params.AccountTypes)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_types: %s", err))
	}

	// ------------- Optional query parameter "account_ids" -------------

	err = runtime.BindQueryParameter("form", true, false, "account_ids", ctx.QueryParams(), &params.AccountIds)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_ids: %s", err))
	}

	// ------------- Optional query parameter "id_filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "id_filter", ctx.QueryParams(), &params.IdFilter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id_filter: %s", err))
	}

	// ------------- Optional query parameter "catalogue_names" -------------

	err = runtime.BindQueryParameter("form", true, false, "catalogue_names", ctx.QueryParams(), &params.CatalogueNames)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catalogue_names: %s", err))
	}

	// ------------- Optional query parameter "catalogue_ids" -------------

	err = runtime.BindQueryParameter("form", true, false, "catalogue_ids", ctx.QueryParams(), &params.CatalogueIds)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catalogue_ids: %s", err))
	}

	// ------------- Optional query parameter "catalogue_version" -------------

	err = runtime.BindQueryParameter("form", true, false, "catalogue_version", ctx.QueryParams(), &params.CatalogueVersion)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catalogue_version: %s", err))
	}

	// ------------- Optional query parameter "catalogue_version_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "catalogue_version_id", ctx.QueryParams(), &params.CatalogueVersionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catalogue_version_id: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// ------------- Optional query parameter "sort_order" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort_order", ctx.QueryParams(), &params.SortOrder)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort_order: %s", err))
	}

	// ------------- Optional query parameter "include_tags" -------------

	err = runtime.BindQueryParameter("form", true, false, "include_tags", ctx.QueryParams(), &params.IncludeTags)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include_tags: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WorkloadsReadWorkload(ctx, workloadId, params)
	return err
}

// WorkloadsUpdateWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadsUpdateWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "workload_id" -------------
	var workloadId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "workload_id", runtime.ParamLocationPath, ctx.Param("workload_id"), &workloadId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workload_id: %s", err))
	}

	ctx.Set(Sigv4Scopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WorkloadsUpdateWorkload(ctx, workloadId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.PUT(baseURL+"/20190206/account-types/members", wrapper.AccountsUpdateAccountTypeMembers)
	router.PUT(baseURL+"/20190206/account-types/policies", wrapper.AccountsUpdateAccountTypePolicies)
	router.GET(baseURL+"/20190206/accounts", wrapper.AccountsReadAccounts)
	router.POST(baseURL+"/20190206/accounts", wrapper.AccountsCreateAccount)
	router.POST(baseURL+"/20190206/accounts/close", wrapper.AccountsCloseAccount)
	router.POST(baseURL+"/20190206/accounts/discover", wrapper.AccountsDiscoverAccounts)
	router.POST(baseURL+"/20190206/accounts/discover/:aws_account_id", wrapper.AccountsDiscoverAccount)
	router.POST(baseURL+"/20190206/accounts/onboard", wrapper.AccountsOnboardAccount)
	router.GET(baseURL+"/20190206/accounts/types", wrapper.AccountsReadAccountTypes)
	router.POST(baseURL+"/20190206/accounts/types", wrapper.AccountsCreateAccountType)
	router.PUT(baseURL+"/20190206/accounts/types/access", wrapper.AccountsUpdateAccountTypeAccess)
	router.DELETE(baseURL+"/20190206/accounts/types/:account_type_id", wrapper.AccountsDeleteAccountType)
	router.GET(baseURL+"/20190206/accounts/types/:account_type_id", wrapper.AccountsReadAccountType)
	router.PUT(baseURL+"/20190206/accounts/types/:account_type_id", wrapper.AccountsUpdateAccountType)
	router.GET(baseURL+"/20190206/accounts/:account_id", wrapper.AccountsReadAccount)
	router.PUT(baseURL+"/20190206/accounts/:account_id", wrapper.AccountsUpdateAccount)
	router.GET(baseURL+"/20190206/api-tokens", wrapper.TeamsReadApiTokens)
	router.POST(baseURL+"/20190206/api-tokens", wrapper.TeamsCreateApiToken)
	router.DELETE(baseURL+"/20190206/api-tokens/:AccessKey", wrapper.TeamsDeleteApiToken)
	router.GET(baseURL+"/20190206/api-tokens/:AccessKey", wrapper.TeamsReadApiToken)
	router.PUT(baseURL+"/20190206/api-tokens/:AccessKey", wrapper.TeamsUpdateApiToken)
	router.GET(baseURL+"/20190206/groups", wrapper.TeamsReadGroups)
	router.POST(baseURL+"/20190206/groups", wrapper.TeamsCreateGroup)
	router.PUT(baseURL+"/20190206/groups/members", wrapper.TeamsUpdateGroupMembers)
	router.DELETE(baseURL+"/20190206/groups/:group_id", wrapper.TeamsDeleteGroup)
	router.GET(baseURL+"/20190206/groups/:group_id", wrapper.TeamsReadGroup)
	router.PUT(baseURL+"/20190206/groups/:group_id", wrapper.TeamsUpdateGroup)
	router.GET(baseURL+"/20190206/idam/user", wrapper.TeamsReadIdamUsers)
	router.POST(baseURL+"/20190206/idam/user", wrapper.TeamsCreateUser)
	router.PUT(baseURL+"/20190206/idam/user/resend-invite/:user_id", wrapper.TeamsUpdateUserInvite)
	router.PUT(baseURL+"/20190206/idam/user/reset-password/:user_id", wrapper.TeamsUpdateUserPassword)
	router.GET(baseURL+"/20190206/idam/user/:org_id", wrapper.TeamsReadIdamUser)
	router.PUT(baseURL+"/20190206/idam/user/:user_id", wrapper.TeamsUpdateUser)
	router.GET(baseURL+"/20190206/networking/dnsresolvers", wrapper.NetworkingReadDnsResolvers)
	router.DELETE(baseURL+"/20190206/networking/dnsresolvers/:dns_resolver_id", wrapper.NetworkingDeleteDnsResolver)
	router.GET(baseURL+"/20190206/networking/dnsresolvers/:dns_resolver_id", wrapper.NetworkingReadDnsResolver)
	router.PUT(baseURL+"/20190206/networking/dnsresolvers/:dns_resolver_id", wrapper.NetworkingUpdateDnsResolver)
	router.GET(baseURL+"/20190206/networking/dnsresolvers/:dns_resolver_id/dnsrules", wrapper.NetworkingReadResolverDnsRules)
	router.POST(baseURL+"/20190206/networking/dnsresolvers/:dns_resolver_id/dnsrules", wrapper.NetworkingCreateDnsRule)
	router.GET(baseURL+"/20190206/networking/dnsrules", wrapper.NetworkingReadDnsRules)
	router.DELETE(baseURL+"/20190206/networking/dnsrules/:dns_rule_id", wrapper.NetworkingDeleteDnsRule)
	router.GET(baseURL+"/20190206/networking/dnsrules/:dns_rule_id", wrapper.NetworkingReadDnsRule)
	router.PUT(baseURL+"/20190206/networking/dnsrules/:dns_rule_id", wrapper.NetworkingUpdateDnsRule)
	router.GET(baseURL+"/20190206/networking/dxassociations", wrapper.NetworkingReadDxAssociations)
	router.DELETE(baseURL+"/20190206/networking/dxassociations/:dx_association_id", wrapper.NetworkingDeleteDxAssociation)
	router.GET(baseURL+"/20190206/networking/dxassociations/:dx_association_id", wrapper.NetworkingReadDxAssociation)
	router.PUT(baseURL+"/20190206/networking/dxassociations/:dx_association_id", wrapper.NetworkingUpdateDxAssociation)
	router.GET(baseURL+"/20190206/networking/dxgateways", wrapper.NetworkingReadDxGateways)
	router.DELETE(baseURL+"/20190206/networking/dxgateways/:dx_gateway_id", wrapper.NetworkingDeleteDxGateway)
	router.GET(baseURL+"/20190206/networking/dxgateways/:dx_gateway_id", wrapper.NetworkingReadDxGateway)
	router.GET(baseURL+"/20190206/networking/dxgateways/:dx_gateway_id/dxassociations", wrapper.NetworkingReadGatewayDxAssociations)
	router.POST(baseURL+"/20190206/networking/dxgateways/:dx_gateway_id/dxassociations", wrapper.NetworkingCreateDxAssociation)
	router.GET(baseURL+"/20190206/networking/dxgateways/:dx_gateway_id/dxvifs", wrapper.NetworkingReadGatewayDxVifs)
	router.POST(baseURL+"/20190206/networking/dxresources", wrapper.NetworkingCreateDxResource)
	router.GET(baseURL+"/20190206/networking/dxvifs", wrapper.NetworkingReadDxVifs)
	router.DELETE(baseURL+"/20190206/networking/dxvifs/:dx_vif_id", wrapper.NetworkingDeleteDxVif)
	router.GET(baseURL+"/20190206/networking/dxvifs/:dx_vif_id", wrapper.NetworkingReadDxVif)
	router.PUT(baseURL+"/20190206/networking/dxvifs/:dx_vif_id", wrapper.NetworkingUpdateDxVif)
	router.GET(baseURL+"/20190206/networking/dxvifs/:dx_vif_id/status", wrapper.NetworkingReadDxVifStatus)
	router.GET(baseURL+"/20190206/networking/exclusions", wrapper.NetworkingReadCidrExclusions)
	router.DELETE(baseURL+"/20190206/networking/exclusions/:exclusion_id", wrapper.NetworkingDeleteCidrExclusion)
	router.GET(baseURL+"/20190206/networking/exclusions/:exclusion_id", wrapper.NetworkingReadCidrExclusion)
	router.PUT(baseURL+"/20190206/networking/exclusions/:exclusion_id", wrapper.NetworkingUpdateCidrExclusion)
	router.GET(baseURL+"/20190206/networking/hubpeerings", wrapper.NetworkingReadHubPeerings)
	router.DELETE(baseURL+"/20190206/networking/hubpeerings/:hub_peering_id", wrapper.NetworkingDeleteHubPeering)
	router.GET(baseURL+"/20190206/networking/hubpeerings/:hub_peering_id", wrapper.NetworkingReadHubPeering)
	router.PUT(baseURL+"/20190206/networking/hubpeerings/:hub_peering_id", wrapper.NetworkingUpdateHubPeering)
	router.GET(baseURL+"/20190206/networking/hubs", wrapper.NetworkingReadHubs)
	router.POST(baseURL+"/20190206/networking/hubs", wrapper.NetworkingCreateHub)
	router.DELETE(baseURL+"/20190206/networking/hubs/:hub_id", wrapper.NetworkingDeleteHub)
	router.GET(baseURL+"/20190206/networking/hubs/:hub_id", wrapper.NetworkingReadHub)
	router.PUT(baseURL+"/20190206/networking/hubs/:hub_id", wrapper.NetworkingUpdateHub)
	router.GET(baseURL+"/20190206/networking/hubs/:hub_id/dnsresolvers", wrapper.NetworkingReadHubDnsResolvers)
	router.POST(baseURL+"/20190206/networking/hubs/:hub_id/dnsresolvers", wrapper.NetworkingCreateDnsResolver)
	router.GET(baseURL+"/20190206/networking/hubs/:hub_id/dxassociations", wrapper.NetworkingReadHubDxAssociations)
	router.GET(baseURL+"/20190206/networking/hubs/:hub_id/dxgateways", wrapper.NetworkingReadHubDxGateways)
	router.GET(baseURL+"/20190206/networking/hubs/:hub_id/exclusions", wrapper.NetworkingReadHubCidrExclusions)
	router.POST(baseURL+"/20190206/networking/hubs/:hub_id/exclusions", wrapper.NetworkingCreateCidrExclusion)
	router.GET(baseURL+"/20190206/networking/hubs/:hub_id/prefixlists", wrapper.NetworkingReadHubPrefixLists)
	router.POST(baseURL+"/20190206/networking/hubs/:hub_id/prefixlists/hubs", wrapper.NetworkingCreateHubPrefixList)
	router.POST(baseURL+"/20190206/networking/hubs/:hub_id/prefixlists/vpcs", wrapper.NetworkingCreateVpcPrefixList)
	router.GET(baseURL+"/20190206/networking/hubs/:hub_id/ranges", wrapper.NetworkingReadHubCidrRanges)
	router.POST(baseURL+"/20190206/networking/hubs/:hub_id/ranges", wrapper.NetworkingCreateCidrRange)
	router.GET(baseURL+"/20190206/networking/hubs/:hub_id/vpcs", wrapper.NetworkingReadHubVpcs)
	router.POST(baseURL+"/20190206/networking/hubs/:hub_id/vpcs", wrapper.NetworkingCreateVpc)
	router.GET(baseURL+"/20190206/networking/hubs/:hub_id/vpnconnections", wrapper.NetworkingReadHubVpnConnections)
	router.GET(baseURL+"/20190206/networking/hubs/:hub_id/vpncustomergateways", wrapper.NetworkingReadHubVpnCustomerGateways)
	router.GET(baseURL+"/20190206/networking/hubs/:networking_hub_id/hubpeerings", wrapper.NetworkingReadHubHubPeerings)
	router.POST(baseURL+"/20190206/networking/hubs/:networking_hub_id/hubpeerings", wrapper.NetworkingCreateHubPeering)
	router.GET(baseURL+"/20190206/networking/prefixlists", wrapper.NetworkingReadPrefixLists)
	router.PUT(baseURL+"/20190206/networking/prefixlists/hubs/:prefix_list_id/associations", wrapper.NetworkingUpdateHubPrefixListAssociation)
	router.PUT(baseURL+"/20190206/networking/prefixlists/vpcs/:prefix_list_id/associations", wrapper.NetworkingUpdateVpcPrefixListAssociation)
	router.DELETE(baseURL+"/20190206/networking/prefixlists/:prefix_list_id", wrapper.NetworkingDeletePrefixList)
	router.GET(baseURL+"/20190206/networking/prefixlists/:prefix_list_id", wrapper.NetworkingReadPrefixList)
	router.PUT(baseURL+"/20190206/networking/prefixlists/:prefix_list_id", wrapper.NetworkingUpdatePrefixList)
	router.GET(baseURL+"/20190206/networking/ranges", wrapper.NetworkingReadCidrRanges)
	router.DELETE(baseURL+"/20190206/networking/ranges/:range_id", wrapper.NetworkingDeleteCidrRange)
	router.GET(baseURL+"/20190206/networking/ranges/:range_id", wrapper.NetworkingReadCidrRange)
	router.PUT(baseURL+"/20190206/networking/ranges/:range_id", wrapper.NetworkingUpdateCidrRange)
	router.GET(baseURL+"/20190206/networking/vpcs", wrapper.NetworkingReadVpcs)
	router.DELETE(baseURL+"/20190206/networking/vpcs/:vpc_id", wrapper.NetworkingDeleteVpc)
	router.GET(baseURL+"/20190206/networking/vpcs/:vpc_id", wrapper.NetworkingReadVpc)
	router.PUT(baseURL+"/20190206/networking/vpcs/:vpc_id", wrapper.NetworkingUpdateVpc)
	router.GET(baseURL+"/20190206/networking/vpnconnections", wrapper.NetworkingReadVpnConnections)
	router.DELETE(baseURL+"/20190206/networking/vpnconnections/:vpn_connection_id", wrapper.NetworkingDeleteVpnConnection)
	router.GET(baseURL+"/20190206/networking/vpnconnections/:vpn_connection_id", wrapper.NetworkingReadVpnConnection)
	router.PUT(baseURL+"/20190206/networking/vpnconnections/:vpn_connection_id", wrapper.NetworkingUpdateVpnConnection)
	router.GET(baseURL+"/20190206/networking/vpnconnections/:vpn_connection_id/status", wrapper.NetworkingReadVpnConnectionStatus)
	router.GET(baseURL+"/20190206/networking/vpncustomergateways", wrapper.NetworkingReadVpnCustomerGateways)
	router.POST(baseURL+"/20190206/networking/vpncustomergateways", wrapper.NetworkingCreateVpnCustomerGateway)
	router.DELETE(baseURL+"/20190206/networking/vpncustomergateways/:vpn_customer_gateway_id", wrapper.NetworkingDeleteVpnCustomerGateway)
	router.GET(baseURL+"/20190206/networking/vpncustomergateways/:vpn_customer_gateway_id", wrapper.NetworkingReadVpnCustomerGateway)
	router.PUT(baseURL+"/20190206/networking/vpncustomergateways/:vpn_customer_gateway_id", wrapper.NetworkingUpdateVpnCustomerGateway)
	router.POST(baseURL+"/20190206/networking/vpncustomergateways/:vpn_customer_gateway_id/vpnconnection", wrapper.NetworkingCreateVpnConnection)
	router.GET(baseURL+"/20190206/networking/vpncustomergateways/:vpn_customer_gateway_id/vpnconnections", wrapper.NetworkingReadGatewayVpnConnections)
	router.GET(baseURL+"/20190206/networking/:account_id/dxconnections", wrapper.NetworkingReadDxConnections)
	router.GET(baseURL+"/20190206/organisations", wrapper.OrganisationsReadOrganisations)
	router.GET(baseURL+"/20190206/organisations/current", wrapper.OrganisationsReadOrganisation)
	router.GET(baseURL+"/20190206/organisations/organisational-units", wrapper.OrganisationsReadOrganisationalUnits)
	router.GET(baseURL+"/20190206/organisations/organisational-units/:organisational_unit_id", wrapper.OrganisationsReadOrganisationalUnit)
	router.GET(baseURL+"/20190206/policies", wrapper.OrganisationsReadPolicies)
	router.POST(baseURL+"/20190206/policies", wrapper.OrganisationsCreatePolicy)
	router.DELETE(baseURL+"/20190206/policies/organisation/:policy_id", wrapper.OrganisationsDetachPolicy)
	router.PUT(baseURL+"/20190206/policies/organisation/:policy_id", wrapper.OrganisationsAttachPolicy)
	router.DELETE(baseURL+"/20190206/policies/:policy_id", wrapper.OrganisationsDeletePolicy)
	router.GET(baseURL+"/20190206/policies/:policy_id", wrapper.OrganisationsReadPolicy)
	router.PUT(baseURL+"/20190206/policies/:policy_id", wrapper.OrganisationsUpdatePolicy)
	router.GET(baseURL+"/20190206/public/check-alias/:alias", wrapper.PublicCheckAlias)
	router.GET(baseURL+"/20190206/public/config", wrapper.PublicReadConfig)
	router.GET(baseURL+"/20190206/services/configuration", wrapper.ServicesReadConfigurations)
	router.GET(baseURL+"/20190206/services/securityhub/configuration", wrapper.ServicesReadSecurityHubConfiguration)
	router.PUT(baseURL+"/20190206/services/securityhub/configuration", wrapper.ServicesConfigureSecurityHub)
	router.GET(baseURL+"/20190206/task/:task_id", wrapper.TasksReadTask)
	router.GET(baseURL+"/20190206/users", wrapper.TeamsReadUsers)
	router.GET(baseURL+"/20190206/users/me", wrapper.TeamsFetchCurrentUser)
	router.DELETE(baseURL+"/20190206/users/:user_id", wrapper.TeamsDeleteUser)
	router.GET(baseURL+"/20190206/users/:user_id", wrapper.TeamsReadUser)
	router.GET(baseURL+"/20190206/workload-catalogue", wrapper.WorkloadsReadCatalogueItems)
	router.POST(baseURL+"/20190206/workload-catalogue", wrapper.WorkloadsCreateCatalogueItem)
	router.GET(baseURL+"/20190206/workload-catalogue/manifest/:version_id", wrapper.WorkloadsReadCatalogueManifest)
	router.GET(baseURL+"/20190206/workload-catalogue/template/:version_id/:name", wrapper.WorkloadsReadCatalogueTemplate)
	router.DELETE(baseURL+"/20190206/workload-catalogue/:catalogue_id", wrapper.WorkloadsDeleteCatalogueItem)
	router.GET(baseURL+"/20190206/workload-catalogue/:catalogue_id", wrapper.WorkloadsReadCatalogueItem)
	router.PUT(baseURL+"/20190206/workload-catalogue/:catalogue_id", wrapper.WorkloadsCreateCatalogueVersion)
	router.DELETE(baseURL+"/20190206/workload-catalogue/:catalogue_id/:version_id", wrapper.WorkloadsDeleteCatalogueVersion)
	router.GET(baseURL+"/20190206/workload-catalogue/:catalogue_id/:version_id", wrapper.WorkloadsReadCatalogueVersion)
	router.POST(baseURL+"/20190206/workload-update", wrapper.WorkloadsUpdateAll)
	router.GET(baseURL+"/20190206/workloads", wrapper.WorkloadsReadWorkloads)
	router.POST(baseURL+"/20190206/workloads", wrapper.WorkloadsCreateWorkload)
	router.DELETE(baseURL+"/20190206/workloads/:workload_id", wrapper.WorkloadsDeleteWorkload)
	router.GET(baseURL+"/20190206/workloads/:workload_id", wrapper.WorkloadsReadWorkload)
	router.PUT(baseURL+"/20190206/workloads/:workload_id", wrapper.WorkloadsUpdateWorkload)

}
