// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package client

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	. "github.com/stax-labs/terraform-provider-stax/internal/api/openapi/core/models"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// AccountsUpdateAccountTypeMembers request with any body
	AccountsUpdateAccountTypeMembersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AccountsUpdateAccountTypeMembers(ctx context.Context, body AccountsUpdateAccountTypeMembersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AccountsUpdateAccountTypePolicies request with any body
	AccountsUpdateAccountTypePoliciesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AccountsUpdateAccountTypePolicies(ctx context.Context, body AccountsUpdateAccountTypePoliciesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AccountsReadAccounts request
	AccountsReadAccounts(ctx context.Context, params *AccountsReadAccountsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AccountsCreateAccount request with any body
	AccountsCreateAccountWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AccountsCreateAccount(ctx context.Context, body AccountsCreateAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AccountsCloseAccount request with any body
	AccountsCloseAccountWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AccountsCloseAccount(ctx context.Context, body AccountsCloseAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AccountsDiscoverAccounts request
	AccountsDiscoverAccounts(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AccountsDiscoverAccount request
	AccountsDiscoverAccount(ctx context.Context, awsAccountId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AccountsOnboardAccount request with any body
	AccountsOnboardAccountWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AccountsOnboardAccount(ctx context.Context, body AccountsOnboardAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AccountsReadAccountTypes request
	AccountsReadAccountTypes(ctx context.Context, params *AccountsReadAccountTypesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AccountsCreateAccountType request with any body
	AccountsCreateAccountTypeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AccountsCreateAccountType(ctx context.Context, body AccountsCreateAccountTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AccountsUpdateAccountTypeAccess request with any body
	AccountsUpdateAccountTypeAccessWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AccountsUpdateAccountTypeAccess(ctx context.Context, body AccountsUpdateAccountTypeAccessJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AccountsDeleteAccountType request
	AccountsDeleteAccountType(ctx context.Context, accountTypeId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AccountsReadAccountType request
	AccountsReadAccountType(ctx context.Context, accountTypeId string, params *AccountsReadAccountTypeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AccountsUpdateAccountType request with any body
	AccountsUpdateAccountTypeWithBody(ctx context.Context, accountTypeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AccountsUpdateAccountType(ctx context.Context, accountTypeId string, body AccountsUpdateAccountTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AccountsReadAccount request
	AccountsReadAccount(ctx context.Context, accountId string, params *AccountsReadAccountParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AccountsUpdateAccount request with any body
	AccountsUpdateAccountWithBody(ctx context.Context, accountId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AccountsUpdateAccount(ctx context.Context, accountId string, body AccountsUpdateAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TeamsReadApiTokens request
	TeamsReadApiTokens(ctx context.Context, params *TeamsReadApiTokensParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TeamsCreateApiToken request with any body
	TeamsCreateApiTokenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TeamsCreateApiToken(ctx context.Context, body TeamsCreateApiTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TeamsDeleteApiToken request
	TeamsDeleteApiToken(ctx context.Context, accessKey string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TeamsReadApiToken request
	TeamsReadApiToken(ctx context.Context, accessKey string, params *TeamsReadApiTokenParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TeamsUpdateApiToken request with any body
	TeamsUpdateApiTokenWithBody(ctx context.Context, accessKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TeamsUpdateApiToken(ctx context.Context, accessKey string, body TeamsUpdateApiTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TeamsReadGroups request
	TeamsReadGroups(ctx context.Context, params *TeamsReadGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TeamsCreateGroup request with any body
	TeamsCreateGroupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TeamsCreateGroup(ctx context.Context, body TeamsCreateGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TeamsUpdateGroupMembers request with any body
	TeamsUpdateGroupMembersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TeamsUpdateGroupMembers(ctx context.Context, body TeamsUpdateGroupMembersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TeamsDeleteGroup request
	TeamsDeleteGroup(ctx context.Context, groupId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TeamsReadGroup request
	TeamsReadGroup(ctx context.Context, groupId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TeamsUpdateGroup request with any body
	TeamsUpdateGroupWithBody(ctx context.Context, groupId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TeamsUpdateGroup(ctx context.Context, groupId string, body TeamsUpdateGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TeamsReadIdamUsers request
	TeamsReadIdamUsers(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TeamsCreateUser request with any body
	TeamsCreateUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TeamsCreateUser(ctx context.Context, body TeamsCreateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TeamsUpdateUserInvite request
	TeamsUpdateUserInvite(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TeamsUpdateUserPassword request
	TeamsUpdateUserPassword(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TeamsReadIdamUser request
	TeamsReadIdamUser(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TeamsUpdateUser request with any body
	TeamsUpdateUserWithBody(ctx context.Context, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TeamsUpdateUser(ctx context.Context, userId string, body TeamsUpdateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkingReadDnsResolvers request
	NetworkingReadDnsResolvers(ctx context.Context, params *NetworkingReadDnsResolversParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkingDeleteDnsResolver request
	NetworkingDeleteDnsResolver(ctx context.Context, dnsResolverId Uuidv4, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkingReadDnsResolver request
	NetworkingReadDnsResolver(ctx context.Context, dnsResolverId Uuidv4, params *NetworkingReadDnsResolverParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkingUpdateDnsResolver request with any body
	NetworkingUpdateDnsResolverWithBody(ctx context.Context, dnsResolverId Uuidv4, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	NetworkingUpdateDnsResolver(ctx context.Context, dnsResolverId Uuidv4, body NetworkingUpdateDnsResolverJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkingReadResolverDnsRules request
	NetworkingReadResolverDnsRules(ctx context.Context, dnsResolverId Uuidv4, params *NetworkingReadResolverDnsRulesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkingCreateDnsRule request with any body
	NetworkingCreateDnsRuleWithBody(ctx context.Context, dnsResolverId Uuidv4, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	NetworkingCreateDnsRule(ctx context.Context, dnsResolverId Uuidv4, body NetworkingCreateDnsRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkingReadDnsRules request
	NetworkingReadDnsRules(ctx context.Context, params *NetworkingReadDnsRulesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkingDeleteDnsRule request
	NetworkingDeleteDnsRule(ctx context.Context, dnsRuleId Uuidv4, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkingReadDnsRule request
	NetworkingReadDnsRule(ctx context.Context, dnsRuleId Uuidv4, params *NetworkingReadDnsRuleParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkingUpdateDnsRule request with any body
	NetworkingUpdateDnsRuleWithBody(ctx context.Context, dnsRuleId Uuidv4, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	NetworkingUpdateDnsRule(ctx context.Context, dnsRuleId Uuidv4, body NetworkingUpdateDnsRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkingReadDxAssociations request
	NetworkingReadDxAssociations(ctx context.Context, params *NetworkingReadDxAssociationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkingDeleteDxAssociation request
	NetworkingDeleteDxAssociation(ctx context.Context, dxAssociationId Uuidv4, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkingReadDxAssociation request
	NetworkingReadDxAssociation(ctx context.Context, dxAssociationId Uuidv4, params *NetworkingReadDxAssociationParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkingUpdateDxAssociation request with any body
	NetworkingUpdateDxAssociationWithBody(ctx context.Context, dxAssociationId Uuidv4, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	NetworkingUpdateDxAssociation(ctx context.Context, dxAssociationId Uuidv4, body NetworkingUpdateDxAssociationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkingReadDxGateways request
	NetworkingReadDxGateways(ctx context.Context, params *NetworkingReadDxGatewaysParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkingDeleteDxGateway request
	NetworkingDeleteDxGateway(ctx context.Context, dxGatewayId Uuidv4, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkingReadDxGateway request
	NetworkingReadDxGateway(ctx context.Context, dxGatewayId Uuidv4, params *NetworkingReadDxGatewayParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkingReadGatewayDxAssociations request
	NetworkingReadGatewayDxAssociations(ctx context.Context, dxGatewayId Uuidv4, params *NetworkingReadGatewayDxAssociationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkingCreateDxAssociation request with any body
	NetworkingCreateDxAssociationWithBody(ctx context.Context, dxGatewayId Uuidv4, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	NetworkingCreateDxAssociation(ctx context.Context, dxGatewayId Uuidv4, body NetworkingCreateDxAssociationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkingReadGatewayDxVifs request
	NetworkingReadGatewayDxVifs(ctx context.Context, dxGatewayId Uuidv4, params *NetworkingReadGatewayDxVifsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkingCreateDxResource request with any body
	NetworkingCreateDxResourceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	NetworkingCreateDxResource(ctx context.Context, body NetworkingCreateDxResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkingReadDxVifs request
	NetworkingReadDxVifs(ctx context.Context, params *NetworkingReadDxVifsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkingDeleteDxVif request
	NetworkingDeleteDxVif(ctx context.Context, dxVifId Uuidv4, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkingReadDxVif request
	NetworkingReadDxVif(ctx context.Context, dxVifId Uuidv4, params *NetworkingReadDxVifParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkingUpdateDxVif request with any body
	NetworkingUpdateDxVifWithBody(ctx context.Context, dxVifId Uuidv4, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	NetworkingUpdateDxVif(ctx context.Context, dxVifId Uuidv4, body NetworkingUpdateDxVifJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkingReadDxVifStatus request
	NetworkingReadDxVifStatus(ctx context.Context, dxVifId Uuidv4, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkingReadCidrExclusions request
	NetworkingReadCidrExclusions(ctx context.Context, params *NetworkingReadCidrExclusionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkingDeleteCidrExclusion request
	NetworkingDeleteCidrExclusion(ctx context.Context, exclusionId Uuidv4, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkingReadCidrExclusion request
	NetworkingReadCidrExclusion(ctx context.Context, exclusionId Uuidv4, params *NetworkingReadCidrExclusionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkingUpdateCidrExclusion request with any body
	NetworkingUpdateCidrExclusionWithBody(ctx context.Context, exclusionId Uuidv4, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	NetworkingUpdateCidrExclusion(ctx context.Context, exclusionId Uuidv4, body NetworkingUpdateCidrExclusionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkingReadHubPeerings request
	NetworkingReadHubPeerings(ctx context.Context, params *NetworkingReadHubPeeringsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkingDeleteHubPeering request
	NetworkingDeleteHubPeering(ctx context.Context, hubPeeringId Uuidv4, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkingReadHubPeering request
	NetworkingReadHubPeering(ctx context.Context, hubPeeringId Uuidv4, params *NetworkingReadHubPeeringParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkingUpdateHubPeering request with any body
	NetworkingUpdateHubPeeringWithBody(ctx context.Context, hubPeeringId Uuidv4, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	NetworkingUpdateHubPeering(ctx context.Context, hubPeeringId Uuidv4, body NetworkingUpdateHubPeeringJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkingReadHubs request
	NetworkingReadHubs(ctx context.Context, params *NetworkingReadHubsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkingCreateHub request with any body
	NetworkingCreateHubWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	NetworkingCreateHub(ctx context.Context, body NetworkingCreateHubJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkingDeleteHub request
	NetworkingDeleteHub(ctx context.Context, hubId Uuidv4, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkingReadHub request
	NetworkingReadHub(ctx context.Context, hubId Uuidv4, params *NetworkingReadHubParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkingUpdateHub request with any body
	NetworkingUpdateHubWithBody(ctx context.Context, hubId Uuidv4, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	NetworkingUpdateHub(ctx context.Context, hubId Uuidv4, body NetworkingUpdateHubJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkingReadHubDnsResolvers request
	NetworkingReadHubDnsResolvers(ctx context.Context, hubId Uuidv4, params *NetworkingReadHubDnsResolversParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkingCreateDnsResolver request with any body
	NetworkingCreateDnsResolverWithBody(ctx context.Context, hubId Uuidv4, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	NetworkingCreateDnsResolver(ctx context.Context, hubId Uuidv4, body NetworkingCreateDnsResolverJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkingReadHubDxAssociations request
	NetworkingReadHubDxAssociations(ctx context.Context, hubId Uuidv4, params *NetworkingReadHubDxAssociationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkingReadHubDxGateways request
	NetworkingReadHubDxGateways(ctx context.Context, hubId Uuidv4, params *NetworkingReadHubDxGatewaysParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkingReadHubCidrExclusions request
	NetworkingReadHubCidrExclusions(ctx context.Context, hubId Uuidv4, params *NetworkingReadHubCidrExclusionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkingCreateCidrExclusion request with any body
	NetworkingCreateCidrExclusionWithBody(ctx context.Context, hubId Uuidv4, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	NetworkingCreateCidrExclusion(ctx context.Context, hubId Uuidv4, body NetworkingCreateCidrExclusionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkingReadHubPrefixLists request
	NetworkingReadHubPrefixLists(ctx context.Context, hubId Uuidv4, params *NetworkingReadHubPrefixListsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkingCreateHubPrefixList request with any body
	NetworkingCreateHubPrefixListWithBody(ctx context.Context, hubId Uuidv4, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	NetworkingCreateHubPrefixList(ctx context.Context, hubId Uuidv4, body NetworkingCreateHubPrefixListJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkingCreateVpcPrefixList request with any body
	NetworkingCreateVpcPrefixListWithBody(ctx context.Context, hubId Uuidv4, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	NetworkingCreateVpcPrefixList(ctx context.Context, hubId Uuidv4, body NetworkingCreateVpcPrefixListJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkingReadHubCidrRanges request
	NetworkingReadHubCidrRanges(ctx context.Context, hubId Uuidv4, params *NetworkingReadHubCidrRangesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkingCreateCidrRange request with any body
	NetworkingCreateCidrRangeWithBody(ctx context.Context, hubId Uuidv4, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	NetworkingCreateCidrRange(ctx context.Context, hubId Uuidv4, body NetworkingCreateCidrRangeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkingReadHubVpcs request
	NetworkingReadHubVpcs(ctx context.Context, hubId Uuidv4, params *NetworkingReadHubVpcsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkingCreateVpc request with any body
	NetworkingCreateVpcWithBody(ctx context.Context, hubId Uuidv4, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	NetworkingCreateVpc(ctx context.Context, hubId Uuidv4, body NetworkingCreateVpcJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkingReadHubVpnConnections request
	NetworkingReadHubVpnConnections(ctx context.Context, hubId Uuidv4, params *NetworkingReadHubVpnConnectionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkingReadHubVpnCustomerGateways request
	NetworkingReadHubVpnCustomerGateways(ctx context.Context, hubId Uuidv4, params *NetworkingReadHubVpnCustomerGatewaysParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkingReadHubHubPeerings request
	NetworkingReadHubHubPeerings(ctx context.Context, networkingHubId Uuidv4, params *NetworkingReadHubHubPeeringsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkingCreateHubPeering request with any body
	NetworkingCreateHubPeeringWithBody(ctx context.Context, networkingHubId Uuidv4, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	NetworkingCreateHubPeering(ctx context.Context, networkingHubId Uuidv4, body NetworkingCreateHubPeeringJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkingReadPrefixLists request
	NetworkingReadPrefixLists(ctx context.Context, params *NetworkingReadPrefixListsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkingUpdateHubPrefixListAssociation request with any body
	NetworkingUpdateHubPrefixListAssociationWithBody(ctx context.Context, prefixListId Uuidv4, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	NetworkingUpdateHubPrefixListAssociation(ctx context.Context, prefixListId Uuidv4, body NetworkingUpdateHubPrefixListAssociationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkingUpdateVpcPrefixListAssociation request with any body
	NetworkingUpdateVpcPrefixListAssociationWithBody(ctx context.Context, prefixListId Uuidv4, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	NetworkingUpdateVpcPrefixListAssociation(ctx context.Context, prefixListId Uuidv4, body NetworkingUpdateVpcPrefixListAssociationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkingDeletePrefixList request
	NetworkingDeletePrefixList(ctx context.Context, prefixListId Uuidv4, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkingReadPrefixList request
	NetworkingReadPrefixList(ctx context.Context, prefixListId Uuidv4, params *NetworkingReadPrefixListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkingUpdatePrefixList request with any body
	NetworkingUpdatePrefixListWithBody(ctx context.Context, prefixListId Uuidv4, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	NetworkingUpdatePrefixList(ctx context.Context, prefixListId Uuidv4, body NetworkingUpdatePrefixListJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkingReadCidrRanges request
	NetworkingReadCidrRanges(ctx context.Context, params *NetworkingReadCidrRangesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkingDeleteCidrRange request
	NetworkingDeleteCidrRange(ctx context.Context, rangeId Uuidv4, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkingReadCidrRange request
	NetworkingReadCidrRange(ctx context.Context, rangeId Uuidv4, params *NetworkingReadCidrRangeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkingUpdateCidrRange request with any body
	NetworkingUpdateCidrRangeWithBody(ctx context.Context, rangeId Uuidv4, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	NetworkingUpdateCidrRange(ctx context.Context, rangeId Uuidv4, body NetworkingUpdateCidrRangeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkingReadVpcs request
	NetworkingReadVpcs(ctx context.Context, params *NetworkingReadVpcsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkingDeleteVpc request
	NetworkingDeleteVpc(ctx context.Context, vpcId Uuidv4, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkingReadVpc request
	NetworkingReadVpc(ctx context.Context, vpcId Uuidv4, params *NetworkingReadVpcParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkingUpdateVpc request with any body
	NetworkingUpdateVpcWithBody(ctx context.Context, vpcId Uuidv4, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	NetworkingUpdateVpc(ctx context.Context, vpcId Uuidv4, body NetworkingUpdateVpcJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkingReadVpnConnections request
	NetworkingReadVpnConnections(ctx context.Context, params *NetworkingReadVpnConnectionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkingDeleteVpnConnection request
	NetworkingDeleteVpnConnection(ctx context.Context, vpnConnectionId Uuidv4, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkingReadVpnConnection request
	NetworkingReadVpnConnection(ctx context.Context, vpnConnectionId Uuidv4, params *NetworkingReadVpnConnectionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkingUpdateVpnConnection request with any body
	NetworkingUpdateVpnConnectionWithBody(ctx context.Context, vpnConnectionId Uuidv4, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	NetworkingUpdateVpnConnection(ctx context.Context, vpnConnectionId Uuidv4, body NetworkingUpdateVpnConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkingReadVpnConnectionStatus request
	NetworkingReadVpnConnectionStatus(ctx context.Context, vpnConnectionId Uuidv4, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkingReadVpnCustomerGateways request
	NetworkingReadVpnCustomerGateways(ctx context.Context, params *NetworkingReadVpnCustomerGatewaysParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkingCreateVpnCustomerGateway request with any body
	NetworkingCreateVpnCustomerGatewayWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	NetworkingCreateVpnCustomerGateway(ctx context.Context, body NetworkingCreateVpnCustomerGatewayJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkingDeleteVpnCustomerGateway request
	NetworkingDeleteVpnCustomerGateway(ctx context.Context, vpnCustomerGatewayId Uuidv4, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkingReadVpnCustomerGateway request
	NetworkingReadVpnCustomerGateway(ctx context.Context, vpnCustomerGatewayId Uuidv4, params *NetworkingReadVpnCustomerGatewayParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkingUpdateVpnCustomerGateway request with any body
	NetworkingUpdateVpnCustomerGatewayWithBody(ctx context.Context, vpnCustomerGatewayId Uuidv4, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	NetworkingUpdateVpnCustomerGateway(ctx context.Context, vpnCustomerGatewayId Uuidv4, body NetworkingUpdateVpnCustomerGatewayJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkingCreateVpnConnection request with any body
	NetworkingCreateVpnConnectionWithBody(ctx context.Context, vpnCustomerGatewayId Uuidv4, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	NetworkingCreateVpnConnection(ctx context.Context, vpnCustomerGatewayId Uuidv4, body NetworkingCreateVpnConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkingReadGatewayVpnConnections request
	NetworkingReadGatewayVpnConnections(ctx context.Context, vpnCustomerGatewayId Uuidv4, params *NetworkingReadGatewayVpnConnectionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NetworkingReadDxConnections request
	NetworkingReadDxConnections(ctx context.Context, accountId Uuidv4, params *NetworkingReadDxConnectionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OrganisationsReadOrganisations request
	OrganisationsReadOrganisations(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OrganisationsReadOrganisation request
	OrganisationsReadOrganisation(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OrganisationsReadOrganisationalUnits request
	OrganisationsReadOrganisationalUnits(ctx context.Context, params *OrganisationsReadOrganisationalUnitsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OrganisationsReadOrganisationalUnit request
	OrganisationsReadOrganisationalUnit(ctx context.Context, organisationalUnitId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OrganisationsReadPolicies request
	OrganisationsReadPolicies(ctx context.Context, params *OrganisationsReadPoliciesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OrganisationsCreatePolicy request with any body
	OrganisationsCreatePolicyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	OrganisationsCreatePolicy(ctx context.Context, body OrganisationsCreatePolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OrganisationsDetachPolicy request
	OrganisationsDetachPolicy(ctx context.Context, policyId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OrganisationsAttachPolicy request with any body
	OrganisationsAttachPolicyWithBody(ctx context.Context, policyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	OrganisationsAttachPolicy(ctx context.Context, policyId string, body OrganisationsAttachPolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OrganisationsDeletePolicy request
	OrganisationsDeletePolicy(ctx context.Context, policyId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OrganisationsReadPolicy request
	OrganisationsReadPolicy(ctx context.Context, policyId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OrganisationsUpdatePolicy request with any body
	OrganisationsUpdatePolicyWithBody(ctx context.Context, policyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	OrganisationsUpdatePolicy(ctx context.Context, policyId string, body OrganisationsUpdatePolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PublicCheckAlias request
	PublicCheckAlias(ctx context.Context, alias string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PublicReadConfig request
	PublicReadConfig(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ServicesReadConfigurations request
	ServicesReadConfigurations(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ServicesReadSecurityHubConfiguration request
	ServicesReadSecurityHubConfiguration(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ServicesConfigureSecurityHub request with any body
	ServicesConfigureSecurityHubWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ServicesConfigureSecurityHub(ctx context.Context, body ServicesConfigureSecurityHubJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TasksReadTask request
	TasksReadTask(ctx context.Context, taskId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TeamsReadUsers request
	TeamsReadUsers(ctx context.Context, params *TeamsReadUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TeamsFetchCurrentUser request
	TeamsFetchCurrentUser(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TeamsDeleteUser request
	TeamsDeleteUser(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TeamsReadUser request
	TeamsReadUser(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WorkloadsReadCatalogueItems request
	WorkloadsReadCatalogueItems(ctx context.Context, params *WorkloadsReadCatalogueItemsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WorkloadsCreateCatalogueItem request with any body
	WorkloadsCreateCatalogueItemWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	WorkloadsCreateCatalogueItem(ctx context.Context, body WorkloadsCreateCatalogueItemJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WorkloadsReadCatalogueManifest request
	WorkloadsReadCatalogueManifest(ctx context.Context, versionId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WorkloadsReadCatalogueTemplate request
	WorkloadsReadCatalogueTemplate(ctx context.Context, versionId string, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WorkloadsDeleteCatalogueItem request
	WorkloadsDeleteCatalogueItem(ctx context.Context, catalogueId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WorkloadsReadCatalogueItem request
	WorkloadsReadCatalogueItem(ctx context.Context, catalogueId string, params *WorkloadsReadCatalogueItemParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WorkloadsCreateCatalogueVersion request with any body
	WorkloadsCreateCatalogueVersionWithBody(ctx context.Context, catalogueId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	WorkloadsCreateCatalogueVersion(ctx context.Context, catalogueId string, body WorkloadsCreateCatalogueVersionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WorkloadsDeleteCatalogueVersion request
	WorkloadsDeleteCatalogueVersion(ctx context.Context, catalogueId string, versionId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WorkloadsReadCatalogueVersion request
	WorkloadsReadCatalogueVersion(ctx context.Context, catalogueId string, versionId string, params *WorkloadsReadCatalogueVersionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WorkloadsUpdateAll request with any body
	WorkloadsUpdateAllWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	WorkloadsUpdateAll(ctx context.Context, body WorkloadsUpdateAllJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WorkloadsReadWorkloads request
	WorkloadsReadWorkloads(ctx context.Context, params *WorkloadsReadWorkloadsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WorkloadsCreateWorkload request with any body
	WorkloadsCreateWorkloadWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	WorkloadsCreateWorkload(ctx context.Context, body WorkloadsCreateWorkloadJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WorkloadsDeleteWorkload request
	WorkloadsDeleteWorkload(ctx context.Context, workloadId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WorkloadsReadWorkload request
	WorkloadsReadWorkload(ctx context.Context, workloadId string, params *WorkloadsReadWorkloadParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WorkloadsUpdateWorkload request with any body
	WorkloadsUpdateWorkloadWithBody(ctx context.Context, workloadId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	WorkloadsUpdateWorkload(ctx context.Context, workloadId string, body WorkloadsUpdateWorkloadJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) AccountsUpdateAccountTypeMembersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountsUpdateAccountTypeMembersRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountsUpdateAccountTypeMembers(ctx context.Context, body AccountsUpdateAccountTypeMembersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountsUpdateAccountTypeMembersRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountsUpdateAccountTypePoliciesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountsUpdateAccountTypePoliciesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountsUpdateAccountTypePolicies(ctx context.Context, body AccountsUpdateAccountTypePoliciesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountsUpdateAccountTypePoliciesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountsReadAccounts(ctx context.Context, params *AccountsReadAccountsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountsReadAccountsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountsCreateAccountWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountsCreateAccountRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountsCreateAccount(ctx context.Context, body AccountsCreateAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountsCreateAccountRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountsCloseAccountWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountsCloseAccountRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountsCloseAccount(ctx context.Context, body AccountsCloseAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountsCloseAccountRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountsDiscoverAccounts(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountsDiscoverAccountsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountsDiscoverAccount(ctx context.Context, awsAccountId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountsDiscoverAccountRequest(c.Server, awsAccountId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountsOnboardAccountWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountsOnboardAccountRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountsOnboardAccount(ctx context.Context, body AccountsOnboardAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountsOnboardAccountRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountsReadAccountTypes(ctx context.Context, params *AccountsReadAccountTypesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountsReadAccountTypesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountsCreateAccountTypeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountsCreateAccountTypeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountsCreateAccountType(ctx context.Context, body AccountsCreateAccountTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountsCreateAccountTypeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountsUpdateAccountTypeAccessWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountsUpdateAccountTypeAccessRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountsUpdateAccountTypeAccess(ctx context.Context, body AccountsUpdateAccountTypeAccessJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountsUpdateAccountTypeAccessRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountsDeleteAccountType(ctx context.Context, accountTypeId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountsDeleteAccountTypeRequest(c.Server, accountTypeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountsReadAccountType(ctx context.Context, accountTypeId string, params *AccountsReadAccountTypeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountsReadAccountTypeRequest(c.Server, accountTypeId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountsUpdateAccountTypeWithBody(ctx context.Context, accountTypeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountsUpdateAccountTypeRequestWithBody(c.Server, accountTypeId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountsUpdateAccountType(ctx context.Context, accountTypeId string, body AccountsUpdateAccountTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountsUpdateAccountTypeRequest(c.Server, accountTypeId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountsReadAccount(ctx context.Context, accountId string, params *AccountsReadAccountParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountsReadAccountRequest(c.Server, accountId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountsUpdateAccountWithBody(ctx context.Context, accountId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountsUpdateAccountRequestWithBody(c.Server, accountId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AccountsUpdateAccount(ctx context.Context, accountId string, body AccountsUpdateAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAccountsUpdateAccountRequest(c.Server, accountId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TeamsReadApiTokens(ctx context.Context, params *TeamsReadApiTokensParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTeamsReadApiTokensRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TeamsCreateApiTokenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTeamsCreateApiTokenRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TeamsCreateApiToken(ctx context.Context, body TeamsCreateApiTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTeamsCreateApiTokenRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TeamsDeleteApiToken(ctx context.Context, accessKey string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTeamsDeleteApiTokenRequest(c.Server, accessKey)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TeamsReadApiToken(ctx context.Context, accessKey string, params *TeamsReadApiTokenParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTeamsReadApiTokenRequest(c.Server, accessKey, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TeamsUpdateApiTokenWithBody(ctx context.Context, accessKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTeamsUpdateApiTokenRequestWithBody(c.Server, accessKey, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TeamsUpdateApiToken(ctx context.Context, accessKey string, body TeamsUpdateApiTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTeamsUpdateApiTokenRequest(c.Server, accessKey, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TeamsReadGroups(ctx context.Context, params *TeamsReadGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTeamsReadGroupsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TeamsCreateGroupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTeamsCreateGroupRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TeamsCreateGroup(ctx context.Context, body TeamsCreateGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTeamsCreateGroupRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TeamsUpdateGroupMembersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTeamsUpdateGroupMembersRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TeamsUpdateGroupMembers(ctx context.Context, body TeamsUpdateGroupMembersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTeamsUpdateGroupMembersRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TeamsDeleteGroup(ctx context.Context, groupId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTeamsDeleteGroupRequest(c.Server, groupId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TeamsReadGroup(ctx context.Context, groupId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTeamsReadGroupRequest(c.Server, groupId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TeamsUpdateGroupWithBody(ctx context.Context, groupId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTeamsUpdateGroupRequestWithBody(c.Server, groupId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TeamsUpdateGroup(ctx context.Context, groupId string, body TeamsUpdateGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTeamsUpdateGroupRequest(c.Server, groupId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TeamsReadIdamUsers(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTeamsReadIdamUsersRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TeamsCreateUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTeamsCreateUserRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TeamsCreateUser(ctx context.Context, body TeamsCreateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTeamsCreateUserRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TeamsUpdateUserInvite(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTeamsUpdateUserInviteRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TeamsUpdateUserPassword(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTeamsUpdateUserPasswordRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TeamsReadIdamUser(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTeamsReadIdamUserRequest(c.Server, orgId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TeamsUpdateUserWithBody(ctx context.Context, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTeamsUpdateUserRequestWithBody(c.Server, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TeamsUpdateUser(ctx context.Context, userId string, body TeamsUpdateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTeamsUpdateUserRequest(c.Server, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkingReadDnsResolvers(ctx context.Context, params *NetworkingReadDnsResolversParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkingReadDnsResolversRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkingDeleteDnsResolver(ctx context.Context, dnsResolverId Uuidv4, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkingDeleteDnsResolverRequest(c.Server, dnsResolverId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkingReadDnsResolver(ctx context.Context, dnsResolverId Uuidv4, params *NetworkingReadDnsResolverParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkingReadDnsResolverRequest(c.Server, dnsResolverId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkingUpdateDnsResolverWithBody(ctx context.Context, dnsResolverId Uuidv4, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkingUpdateDnsResolverRequestWithBody(c.Server, dnsResolverId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkingUpdateDnsResolver(ctx context.Context, dnsResolverId Uuidv4, body NetworkingUpdateDnsResolverJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkingUpdateDnsResolverRequest(c.Server, dnsResolverId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkingReadResolverDnsRules(ctx context.Context, dnsResolverId Uuidv4, params *NetworkingReadResolverDnsRulesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkingReadResolverDnsRulesRequest(c.Server, dnsResolverId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkingCreateDnsRuleWithBody(ctx context.Context, dnsResolverId Uuidv4, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkingCreateDnsRuleRequestWithBody(c.Server, dnsResolverId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkingCreateDnsRule(ctx context.Context, dnsResolverId Uuidv4, body NetworkingCreateDnsRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkingCreateDnsRuleRequest(c.Server, dnsResolverId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkingReadDnsRules(ctx context.Context, params *NetworkingReadDnsRulesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkingReadDnsRulesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkingDeleteDnsRule(ctx context.Context, dnsRuleId Uuidv4, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkingDeleteDnsRuleRequest(c.Server, dnsRuleId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkingReadDnsRule(ctx context.Context, dnsRuleId Uuidv4, params *NetworkingReadDnsRuleParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkingReadDnsRuleRequest(c.Server, dnsRuleId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkingUpdateDnsRuleWithBody(ctx context.Context, dnsRuleId Uuidv4, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkingUpdateDnsRuleRequestWithBody(c.Server, dnsRuleId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkingUpdateDnsRule(ctx context.Context, dnsRuleId Uuidv4, body NetworkingUpdateDnsRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkingUpdateDnsRuleRequest(c.Server, dnsRuleId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkingReadDxAssociations(ctx context.Context, params *NetworkingReadDxAssociationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkingReadDxAssociationsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkingDeleteDxAssociation(ctx context.Context, dxAssociationId Uuidv4, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkingDeleteDxAssociationRequest(c.Server, dxAssociationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkingReadDxAssociation(ctx context.Context, dxAssociationId Uuidv4, params *NetworkingReadDxAssociationParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkingReadDxAssociationRequest(c.Server, dxAssociationId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkingUpdateDxAssociationWithBody(ctx context.Context, dxAssociationId Uuidv4, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkingUpdateDxAssociationRequestWithBody(c.Server, dxAssociationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkingUpdateDxAssociation(ctx context.Context, dxAssociationId Uuidv4, body NetworkingUpdateDxAssociationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkingUpdateDxAssociationRequest(c.Server, dxAssociationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkingReadDxGateways(ctx context.Context, params *NetworkingReadDxGatewaysParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkingReadDxGatewaysRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkingDeleteDxGateway(ctx context.Context, dxGatewayId Uuidv4, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkingDeleteDxGatewayRequest(c.Server, dxGatewayId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkingReadDxGateway(ctx context.Context, dxGatewayId Uuidv4, params *NetworkingReadDxGatewayParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkingReadDxGatewayRequest(c.Server, dxGatewayId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkingReadGatewayDxAssociations(ctx context.Context, dxGatewayId Uuidv4, params *NetworkingReadGatewayDxAssociationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkingReadGatewayDxAssociationsRequest(c.Server, dxGatewayId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkingCreateDxAssociationWithBody(ctx context.Context, dxGatewayId Uuidv4, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkingCreateDxAssociationRequestWithBody(c.Server, dxGatewayId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkingCreateDxAssociation(ctx context.Context, dxGatewayId Uuidv4, body NetworkingCreateDxAssociationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkingCreateDxAssociationRequest(c.Server, dxGatewayId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkingReadGatewayDxVifs(ctx context.Context, dxGatewayId Uuidv4, params *NetworkingReadGatewayDxVifsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkingReadGatewayDxVifsRequest(c.Server, dxGatewayId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkingCreateDxResourceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkingCreateDxResourceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkingCreateDxResource(ctx context.Context, body NetworkingCreateDxResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkingCreateDxResourceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkingReadDxVifs(ctx context.Context, params *NetworkingReadDxVifsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkingReadDxVifsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkingDeleteDxVif(ctx context.Context, dxVifId Uuidv4, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkingDeleteDxVifRequest(c.Server, dxVifId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkingReadDxVif(ctx context.Context, dxVifId Uuidv4, params *NetworkingReadDxVifParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkingReadDxVifRequest(c.Server, dxVifId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkingUpdateDxVifWithBody(ctx context.Context, dxVifId Uuidv4, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkingUpdateDxVifRequestWithBody(c.Server, dxVifId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkingUpdateDxVif(ctx context.Context, dxVifId Uuidv4, body NetworkingUpdateDxVifJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkingUpdateDxVifRequest(c.Server, dxVifId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkingReadDxVifStatus(ctx context.Context, dxVifId Uuidv4, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkingReadDxVifStatusRequest(c.Server, dxVifId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkingReadCidrExclusions(ctx context.Context, params *NetworkingReadCidrExclusionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkingReadCidrExclusionsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkingDeleteCidrExclusion(ctx context.Context, exclusionId Uuidv4, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkingDeleteCidrExclusionRequest(c.Server, exclusionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkingReadCidrExclusion(ctx context.Context, exclusionId Uuidv4, params *NetworkingReadCidrExclusionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkingReadCidrExclusionRequest(c.Server, exclusionId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkingUpdateCidrExclusionWithBody(ctx context.Context, exclusionId Uuidv4, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkingUpdateCidrExclusionRequestWithBody(c.Server, exclusionId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkingUpdateCidrExclusion(ctx context.Context, exclusionId Uuidv4, body NetworkingUpdateCidrExclusionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkingUpdateCidrExclusionRequest(c.Server, exclusionId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkingReadHubPeerings(ctx context.Context, params *NetworkingReadHubPeeringsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkingReadHubPeeringsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkingDeleteHubPeering(ctx context.Context, hubPeeringId Uuidv4, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkingDeleteHubPeeringRequest(c.Server, hubPeeringId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkingReadHubPeering(ctx context.Context, hubPeeringId Uuidv4, params *NetworkingReadHubPeeringParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkingReadHubPeeringRequest(c.Server, hubPeeringId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkingUpdateHubPeeringWithBody(ctx context.Context, hubPeeringId Uuidv4, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkingUpdateHubPeeringRequestWithBody(c.Server, hubPeeringId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkingUpdateHubPeering(ctx context.Context, hubPeeringId Uuidv4, body NetworkingUpdateHubPeeringJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkingUpdateHubPeeringRequest(c.Server, hubPeeringId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkingReadHubs(ctx context.Context, params *NetworkingReadHubsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkingReadHubsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkingCreateHubWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkingCreateHubRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkingCreateHub(ctx context.Context, body NetworkingCreateHubJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkingCreateHubRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkingDeleteHub(ctx context.Context, hubId Uuidv4, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkingDeleteHubRequest(c.Server, hubId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkingReadHub(ctx context.Context, hubId Uuidv4, params *NetworkingReadHubParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkingReadHubRequest(c.Server, hubId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkingUpdateHubWithBody(ctx context.Context, hubId Uuidv4, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkingUpdateHubRequestWithBody(c.Server, hubId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkingUpdateHub(ctx context.Context, hubId Uuidv4, body NetworkingUpdateHubJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkingUpdateHubRequest(c.Server, hubId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkingReadHubDnsResolvers(ctx context.Context, hubId Uuidv4, params *NetworkingReadHubDnsResolversParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkingReadHubDnsResolversRequest(c.Server, hubId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkingCreateDnsResolverWithBody(ctx context.Context, hubId Uuidv4, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkingCreateDnsResolverRequestWithBody(c.Server, hubId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkingCreateDnsResolver(ctx context.Context, hubId Uuidv4, body NetworkingCreateDnsResolverJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkingCreateDnsResolverRequest(c.Server, hubId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkingReadHubDxAssociations(ctx context.Context, hubId Uuidv4, params *NetworkingReadHubDxAssociationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkingReadHubDxAssociationsRequest(c.Server, hubId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkingReadHubDxGateways(ctx context.Context, hubId Uuidv4, params *NetworkingReadHubDxGatewaysParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkingReadHubDxGatewaysRequest(c.Server, hubId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkingReadHubCidrExclusions(ctx context.Context, hubId Uuidv4, params *NetworkingReadHubCidrExclusionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkingReadHubCidrExclusionsRequest(c.Server, hubId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkingCreateCidrExclusionWithBody(ctx context.Context, hubId Uuidv4, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkingCreateCidrExclusionRequestWithBody(c.Server, hubId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkingCreateCidrExclusion(ctx context.Context, hubId Uuidv4, body NetworkingCreateCidrExclusionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkingCreateCidrExclusionRequest(c.Server, hubId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkingReadHubPrefixLists(ctx context.Context, hubId Uuidv4, params *NetworkingReadHubPrefixListsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkingReadHubPrefixListsRequest(c.Server, hubId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkingCreateHubPrefixListWithBody(ctx context.Context, hubId Uuidv4, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkingCreateHubPrefixListRequestWithBody(c.Server, hubId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkingCreateHubPrefixList(ctx context.Context, hubId Uuidv4, body NetworkingCreateHubPrefixListJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkingCreateHubPrefixListRequest(c.Server, hubId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkingCreateVpcPrefixListWithBody(ctx context.Context, hubId Uuidv4, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkingCreateVpcPrefixListRequestWithBody(c.Server, hubId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkingCreateVpcPrefixList(ctx context.Context, hubId Uuidv4, body NetworkingCreateVpcPrefixListJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkingCreateVpcPrefixListRequest(c.Server, hubId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkingReadHubCidrRanges(ctx context.Context, hubId Uuidv4, params *NetworkingReadHubCidrRangesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkingReadHubCidrRangesRequest(c.Server, hubId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkingCreateCidrRangeWithBody(ctx context.Context, hubId Uuidv4, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkingCreateCidrRangeRequestWithBody(c.Server, hubId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkingCreateCidrRange(ctx context.Context, hubId Uuidv4, body NetworkingCreateCidrRangeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkingCreateCidrRangeRequest(c.Server, hubId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkingReadHubVpcs(ctx context.Context, hubId Uuidv4, params *NetworkingReadHubVpcsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkingReadHubVpcsRequest(c.Server, hubId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkingCreateVpcWithBody(ctx context.Context, hubId Uuidv4, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkingCreateVpcRequestWithBody(c.Server, hubId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkingCreateVpc(ctx context.Context, hubId Uuidv4, body NetworkingCreateVpcJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkingCreateVpcRequest(c.Server, hubId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkingReadHubVpnConnections(ctx context.Context, hubId Uuidv4, params *NetworkingReadHubVpnConnectionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkingReadHubVpnConnectionsRequest(c.Server, hubId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkingReadHubVpnCustomerGateways(ctx context.Context, hubId Uuidv4, params *NetworkingReadHubVpnCustomerGatewaysParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkingReadHubVpnCustomerGatewaysRequest(c.Server, hubId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkingReadHubHubPeerings(ctx context.Context, networkingHubId Uuidv4, params *NetworkingReadHubHubPeeringsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkingReadHubHubPeeringsRequest(c.Server, networkingHubId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkingCreateHubPeeringWithBody(ctx context.Context, networkingHubId Uuidv4, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkingCreateHubPeeringRequestWithBody(c.Server, networkingHubId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkingCreateHubPeering(ctx context.Context, networkingHubId Uuidv4, body NetworkingCreateHubPeeringJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkingCreateHubPeeringRequest(c.Server, networkingHubId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkingReadPrefixLists(ctx context.Context, params *NetworkingReadPrefixListsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkingReadPrefixListsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkingUpdateHubPrefixListAssociationWithBody(ctx context.Context, prefixListId Uuidv4, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkingUpdateHubPrefixListAssociationRequestWithBody(c.Server, prefixListId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkingUpdateHubPrefixListAssociation(ctx context.Context, prefixListId Uuidv4, body NetworkingUpdateHubPrefixListAssociationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkingUpdateHubPrefixListAssociationRequest(c.Server, prefixListId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkingUpdateVpcPrefixListAssociationWithBody(ctx context.Context, prefixListId Uuidv4, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkingUpdateVpcPrefixListAssociationRequestWithBody(c.Server, prefixListId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkingUpdateVpcPrefixListAssociation(ctx context.Context, prefixListId Uuidv4, body NetworkingUpdateVpcPrefixListAssociationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkingUpdateVpcPrefixListAssociationRequest(c.Server, prefixListId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkingDeletePrefixList(ctx context.Context, prefixListId Uuidv4, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkingDeletePrefixListRequest(c.Server, prefixListId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkingReadPrefixList(ctx context.Context, prefixListId Uuidv4, params *NetworkingReadPrefixListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkingReadPrefixListRequest(c.Server, prefixListId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkingUpdatePrefixListWithBody(ctx context.Context, prefixListId Uuidv4, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkingUpdatePrefixListRequestWithBody(c.Server, prefixListId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkingUpdatePrefixList(ctx context.Context, prefixListId Uuidv4, body NetworkingUpdatePrefixListJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkingUpdatePrefixListRequest(c.Server, prefixListId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkingReadCidrRanges(ctx context.Context, params *NetworkingReadCidrRangesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkingReadCidrRangesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkingDeleteCidrRange(ctx context.Context, rangeId Uuidv4, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkingDeleteCidrRangeRequest(c.Server, rangeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkingReadCidrRange(ctx context.Context, rangeId Uuidv4, params *NetworkingReadCidrRangeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkingReadCidrRangeRequest(c.Server, rangeId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkingUpdateCidrRangeWithBody(ctx context.Context, rangeId Uuidv4, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkingUpdateCidrRangeRequestWithBody(c.Server, rangeId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkingUpdateCidrRange(ctx context.Context, rangeId Uuidv4, body NetworkingUpdateCidrRangeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkingUpdateCidrRangeRequest(c.Server, rangeId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkingReadVpcs(ctx context.Context, params *NetworkingReadVpcsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkingReadVpcsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkingDeleteVpc(ctx context.Context, vpcId Uuidv4, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkingDeleteVpcRequest(c.Server, vpcId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkingReadVpc(ctx context.Context, vpcId Uuidv4, params *NetworkingReadVpcParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkingReadVpcRequest(c.Server, vpcId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkingUpdateVpcWithBody(ctx context.Context, vpcId Uuidv4, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkingUpdateVpcRequestWithBody(c.Server, vpcId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkingUpdateVpc(ctx context.Context, vpcId Uuidv4, body NetworkingUpdateVpcJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkingUpdateVpcRequest(c.Server, vpcId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkingReadVpnConnections(ctx context.Context, params *NetworkingReadVpnConnectionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkingReadVpnConnectionsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkingDeleteVpnConnection(ctx context.Context, vpnConnectionId Uuidv4, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkingDeleteVpnConnectionRequest(c.Server, vpnConnectionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkingReadVpnConnection(ctx context.Context, vpnConnectionId Uuidv4, params *NetworkingReadVpnConnectionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkingReadVpnConnectionRequest(c.Server, vpnConnectionId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkingUpdateVpnConnectionWithBody(ctx context.Context, vpnConnectionId Uuidv4, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkingUpdateVpnConnectionRequestWithBody(c.Server, vpnConnectionId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkingUpdateVpnConnection(ctx context.Context, vpnConnectionId Uuidv4, body NetworkingUpdateVpnConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkingUpdateVpnConnectionRequest(c.Server, vpnConnectionId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkingReadVpnConnectionStatus(ctx context.Context, vpnConnectionId Uuidv4, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkingReadVpnConnectionStatusRequest(c.Server, vpnConnectionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkingReadVpnCustomerGateways(ctx context.Context, params *NetworkingReadVpnCustomerGatewaysParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkingReadVpnCustomerGatewaysRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkingCreateVpnCustomerGatewayWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkingCreateVpnCustomerGatewayRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkingCreateVpnCustomerGateway(ctx context.Context, body NetworkingCreateVpnCustomerGatewayJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkingCreateVpnCustomerGatewayRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkingDeleteVpnCustomerGateway(ctx context.Context, vpnCustomerGatewayId Uuidv4, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkingDeleteVpnCustomerGatewayRequest(c.Server, vpnCustomerGatewayId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkingReadVpnCustomerGateway(ctx context.Context, vpnCustomerGatewayId Uuidv4, params *NetworkingReadVpnCustomerGatewayParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkingReadVpnCustomerGatewayRequest(c.Server, vpnCustomerGatewayId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkingUpdateVpnCustomerGatewayWithBody(ctx context.Context, vpnCustomerGatewayId Uuidv4, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkingUpdateVpnCustomerGatewayRequestWithBody(c.Server, vpnCustomerGatewayId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkingUpdateVpnCustomerGateway(ctx context.Context, vpnCustomerGatewayId Uuidv4, body NetworkingUpdateVpnCustomerGatewayJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkingUpdateVpnCustomerGatewayRequest(c.Server, vpnCustomerGatewayId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkingCreateVpnConnectionWithBody(ctx context.Context, vpnCustomerGatewayId Uuidv4, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkingCreateVpnConnectionRequestWithBody(c.Server, vpnCustomerGatewayId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkingCreateVpnConnection(ctx context.Context, vpnCustomerGatewayId Uuidv4, body NetworkingCreateVpnConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkingCreateVpnConnectionRequest(c.Server, vpnCustomerGatewayId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkingReadGatewayVpnConnections(ctx context.Context, vpnCustomerGatewayId Uuidv4, params *NetworkingReadGatewayVpnConnectionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkingReadGatewayVpnConnectionsRequest(c.Server, vpnCustomerGatewayId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NetworkingReadDxConnections(ctx context.Context, accountId Uuidv4, params *NetworkingReadDxConnectionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNetworkingReadDxConnectionsRequest(c.Server, accountId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrganisationsReadOrganisations(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrganisationsReadOrganisationsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrganisationsReadOrganisation(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrganisationsReadOrganisationRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrganisationsReadOrganisationalUnits(ctx context.Context, params *OrganisationsReadOrganisationalUnitsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrganisationsReadOrganisationalUnitsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrganisationsReadOrganisationalUnit(ctx context.Context, organisationalUnitId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrganisationsReadOrganisationalUnitRequest(c.Server, organisationalUnitId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrganisationsReadPolicies(ctx context.Context, params *OrganisationsReadPoliciesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrganisationsReadPoliciesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrganisationsCreatePolicyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrganisationsCreatePolicyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrganisationsCreatePolicy(ctx context.Context, body OrganisationsCreatePolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrganisationsCreatePolicyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrganisationsDetachPolicy(ctx context.Context, policyId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrganisationsDetachPolicyRequest(c.Server, policyId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrganisationsAttachPolicyWithBody(ctx context.Context, policyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrganisationsAttachPolicyRequestWithBody(c.Server, policyId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrganisationsAttachPolicy(ctx context.Context, policyId string, body OrganisationsAttachPolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrganisationsAttachPolicyRequest(c.Server, policyId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrganisationsDeletePolicy(ctx context.Context, policyId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrganisationsDeletePolicyRequest(c.Server, policyId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrganisationsReadPolicy(ctx context.Context, policyId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrganisationsReadPolicyRequest(c.Server, policyId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrganisationsUpdatePolicyWithBody(ctx context.Context, policyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrganisationsUpdatePolicyRequestWithBody(c.Server, policyId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrganisationsUpdatePolicy(ctx context.Context, policyId string, body OrganisationsUpdatePolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrganisationsUpdatePolicyRequest(c.Server, policyId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PublicCheckAlias(ctx context.Context, alias string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPublicCheckAliasRequest(c.Server, alias)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PublicReadConfig(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPublicReadConfigRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ServicesReadConfigurations(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewServicesReadConfigurationsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ServicesReadSecurityHubConfiguration(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewServicesReadSecurityHubConfigurationRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ServicesConfigureSecurityHubWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewServicesConfigureSecurityHubRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ServicesConfigureSecurityHub(ctx context.Context, body ServicesConfigureSecurityHubJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewServicesConfigureSecurityHubRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TasksReadTask(ctx context.Context, taskId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTasksReadTaskRequest(c.Server, taskId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TeamsReadUsers(ctx context.Context, params *TeamsReadUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTeamsReadUsersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TeamsFetchCurrentUser(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTeamsFetchCurrentUserRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TeamsDeleteUser(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTeamsDeleteUserRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TeamsReadUser(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTeamsReadUserRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkloadsReadCatalogueItems(ctx context.Context, params *WorkloadsReadCatalogueItemsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkloadsReadCatalogueItemsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkloadsCreateCatalogueItemWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkloadsCreateCatalogueItemRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkloadsCreateCatalogueItem(ctx context.Context, body WorkloadsCreateCatalogueItemJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkloadsCreateCatalogueItemRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkloadsReadCatalogueManifest(ctx context.Context, versionId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkloadsReadCatalogueManifestRequest(c.Server, versionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkloadsReadCatalogueTemplate(ctx context.Context, versionId string, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkloadsReadCatalogueTemplateRequest(c.Server, versionId, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkloadsDeleteCatalogueItem(ctx context.Context, catalogueId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkloadsDeleteCatalogueItemRequest(c.Server, catalogueId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkloadsReadCatalogueItem(ctx context.Context, catalogueId string, params *WorkloadsReadCatalogueItemParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkloadsReadCatalogueItemRequest(c.Server, catalogueId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkloadsCreateCatalogueVersionWithBody(ctx context.Context, catalogueId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkloadsCreateCatalogueVersionRequestWithBody(c.Server, catalogueId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkloadsCreateCatalogueVersion(ctx context.Context, catalogueId string, body WorkloadsCreateCatalogueVersionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkloadsCreateCatalogueVersionRequest(c.Server, catalogueId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkloadsDeleteCatalogueVersion(ctx context.Context, catalogueId string, versionId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkloadsDeleteCatalogueVersionRequest(c.Server, catalogueId, versionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkloadsReadCatalogueVersion(ctx context.Context, catalogueId string, versionId string, params *WorkloadsReadCatalogueVersionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkloadsReadCatalogueVersionRequest(c.Server, catalogueId, versionId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkloadsUpdateAllWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkloadsUpdateAllRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkloadsUpdateAll(ctx context.Context, body WorkloadsUpdateAllJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkloadsUpdateAllRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkloadsReadWorkloads(ctx context.Context, params *WorkloadsReadWorkloadsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkloadsReadWorkloadsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkloadsCreateWorkloadWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkloadsCreateWorkloadRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkloadsCreateWorkload(ctx context.Context, body WorkloadsCreateWorkloadJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkloadsCreateWorkloadRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkloadsDeleteWorkload(ctx context.Context, workloadId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkloadsDeleteWorkloadRequest(c.Server, workloadId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkloadsReadWorkload(ctx context.Context, workloadId string, params *WorkloadsReadWorkloadParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkloadsReadWorkloadRequest(c.Server, workloadId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkloadsUpdateWorkloadWithBody(ctx context.Context, workloadId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkloadsUpdateWorkloadRequestWithBody(c.Server, workloadId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkloadsUpdateWorkload(ctx context.Context, workloadId string, body WorkloadsUpdateWorkloadJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkloadsUpdateWorkloadRequest(c.Server, workloadId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewAccountsUpdateAccountTypeMembersRequest calls the generic AccountsUpdateAccountTypeMembers builder with application/json body
func NewAccountsUpdateAccountTypeMembersRequest(server string, body AccountsUpdateAccountTypeMembersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAccountsUpdateAccountTypeMembersRequestWithBody(server, "application/json", bodyReader)
}

// NewAccountsUpdateAccountTypeMembersRequestWithBody generates requests for AccountsUpdateAccountTypeMembers with any type of body
func NewAccountsUpdateAccountTypeMembersRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/account-types/members")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAccountsUpdateAccountTypePoliciesRequest calls the generic AccountsUpdateAccountTypePolicies builder with application/json body
func NewAccountsUpdateAccountTypePoliciesRequest(server string, body AccountsUpdateAccountTypePoliciesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAccountsUpdateAccountTypePoliciesRequestWithBody(server, "application/json", bodyReader)
}

// NewAccountsUpdateAccountTypePoliciesRequestWithBody generates requests for AccountsUpdateAccountTypePolicies with any type of body
func NewAccountsUpdateAccountTypePoliciesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/account-types/policies")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAccountsReadAccountsRequest generates requests for AccountsReadAccounts
func NewAccountsReadAccountsRequest(server string, params *AccountsReadAccountsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/accounts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.AccountNames != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "account_names", runtime.ParamLocationQuery, *params.AccountNames); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdFilter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_filter", runtime.ParamLocationQuery, *params.IdFilter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AwsAccountIdFilter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aws_account_id_filter", runtime.ParamLocationQuery, *params.AwsAccountIdFilter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AccountTypeFilter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "account_type_filter", runtime.ParamLocationQuery, *params.AccountTypeFilter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortOrder != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort_order", runtime.ParamLocationQuery, *params.SortOrder); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeTags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_tags", runtime.ParamLocationQuery, *params.IncludeTags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAccountsCreateAccountRequest calls the generic AccountsCreateAccount builder with application/json body
func NewAccountsCreateAccountRequest(server string, body AccountsCreateAccountJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAccountsCreateAccountRequestWithBody(server, "application/json", bodyReader)
}

// NewAccountsCreateAccountRequestWithBody generates requests for AccountsCreateAccount with any type of body
func NewAccountsCreateAccountRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/accounts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAccountsCloseAccountRequest calls the generic AccountsCloseAccount builder with application/json body
func NewAccountsCloseAccountRequest(server string, body AccountsCloseAccountJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAccountsCloseAccountRequestWithBody(server, "application/json", bodyReader)
}

// NewAccountsCloseAccountRequestWithBody generates requests for AccountsCloseAccount with any type of body
func NewAccountsCloseAccountRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/accounts/close")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAccountsDiscoverAccountsRequest generates requests for AccountsDiscoverAccounts
func NewAccountsDiscoverAccountsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/accounts/discover")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAccountsDiscoverAccountRequest generates requests for AccountsDiscoverAccount
func NewAccountsDiscoverAccountRequest(server string, awsAccountId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "aws_account_id", runtime.ParamLocationPath, awsAccountId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/accounts/discover/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAccountsOnboardAccountRequest calls the generic AccountsOnboardAccount builder with application/json body
func NewAccountsOnboardAccountRequest(server string, body AccountsOnboardAccountJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAccountsOnboardAccountRequestWithBody(server, "application/json", bodyReader)
}

// NewAccountsOnboardAccountRequestWithBody generates requests for AccountsOnboardAccount with any type of body
func NewAccountsOnboardAccountRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/accounts/onboard")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAccountsReadAccountTypesRequest generates requests for AccountsReadAccountTypes
func NewAccountsReadAccountTypesRequest(server string, params *AccountsReadAccountTypesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/accounts/types")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.IdFilter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_filter", runtime.ParamLocationQuery, *params.IdFilter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAccountsCreateAccountTypeRequest calls the generic AccountsCreateAccountType builder with application/json body
func NewAccountsCreateAccountTypeRequest(server string, body AccountsCreateAccountTypeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAccountsCreateAccountTypeRequestWithBody(server, "application/json", bodyReader)
}

// NewAccountsCreateAccountTypeRequestWithBody generates requests for AccountsCreateAccountType with any type of body
func NewAccountsCreateAccountTypeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/accounts/types")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAccountsUpdateAccountTypeAccessRequest calls the generic AccountsUpdateAccountTypeAccess builder with application/json body
func NewAccountsUpdateAccountTypeAccessRequest(server string, body AccountsUpdateAccountTypeAccessJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAccountsUpdateAccountTypeAccessRequestWithBody(server, "application/json", bodyReader)
}

// NewAccountsUpdateAccountTypeAccessRequestWithBody generates requests for AccountsUpdateAccountTypeAccess with any type of body
func NewAccountsUpdateAccountTypeAccessRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/accounts/types/access")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAccountsDeleteAccountTypeRequest generates requests for AccountsDeleteAccountType
func NewAccountsDeleteAccountTypeRequest(server string, accountTypeId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "account_type_id", runtime.ParamLocationPath, accountTypeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/accounts/types/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAccountsReadAccountTypeRequest generates requests for AccountsReadAccountType
func NewAccountsReadAccountTypeRequest(server string, accountTypeId string, params *AccountsReadAccountTypeParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "account_type_id", runtime.ParamLocationPath, accountTypeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/accounts/types/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.IdFilter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_filter", runtime.ParamLocationQuery, *params.IdFilter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAccountsUpdateAccountTypeRequest calls the generic AccountsUpdateAccountType builder with application/json body
func NewAccountsUpdateAccountTypeRequest(server string, accountTypeId string, body AccountsUpdateAccountTypeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAccountsUpdateAccountTypeRequestWithBody(server, accountTypeId, "application/json", bodyReader)
}

// NewAccountsUpdateAccountTypeRequestWithBody generates requests for AccountsUpdateAccountType with any type of body
func NewAccountsUpdateAccountTypeRequestWithBody(server string, accountTypeId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "account_type_id", runtime.ParamLocationPath, accountTypeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/accounts/types/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAccountsReadAccountRequest generates requests for AccountsReadAccount
func NewAccountsReadAccountRequest(server string, accountId string, params *AccountsReadAccountParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "account_id", runtime.ParamLocationPath, accountId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/accounts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.AccountNames != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "account_names", runtime.ParamLocationQuery, *params.AccountNames); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdFilter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_filter", runtime.ParamLocationQuery, *params.IdFilter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AwsAccountIdFilter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aws_account_id_filter", runtime.ParamLocationQuery, *params.AwsAccountIdFilter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AccountTypeFilter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "account_type_filter", runtime.ParamLocationQuery, *params.AccountTypeFilter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortOrder != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort_order", runtime.ParamLocationQuery, *params.SortOrder); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeTags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_tags", runtime.ParamLocationQuery, *params.IncludeTags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAccountsUpdateAccountRequest calls the generic AccountsUpdateAccount builder with application/json body
func NewAccountsUpdateAccountRequest(server string, accountId string, body AccountsUpdateAccountJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAccountsUpdateAccountRequestWithBody(server, accountId, "application/json", bodyReader)
}

// NewAccountsUpdateAccountRequestWithBody generates requests for AccountsUpdateAccount with any type of body
func NewAccountsUpdateAccountRequestWithBody(server string, accountId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "account_id", runtime.ParamLocationPath, accountId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/accounts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTeamsReadApiTokensRequest generates requests for TeamsReadApiTokens
func NewTeamsReadApiTokensRequest(server string, params *TeamsReadApiTokensParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/api-tokens")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.IdFilter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_filter", runtime.ParamLocationQuery, *params.IdFilter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTeamsCreateApiTokenRequest calls the generic TeamsCreateApiToken builder with application/json body
func NewTeamsCreateApiTokenRequest(server string, body TeamsCreateApiTokenJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTeamsCreateApiTokenRequestWithBody(server, "application/json", bodyReader)
}

// NewTeamsCreateApiTokenRequestWithBody generates requests for TeamsCreateApiToken with any type of body
func NewTeamsCreateApiTokenRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/api-tokens")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTeamsDeleteApiTokenRequest generates requests for TeamsDeleteApiToken
func NewTeamsDeleteApiTokenRequest(server string, accessKey string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccessKey", runtime.ParamLocationPath, accessKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/api-tokens/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTeamsReadApiTokenRequest generates requests for TeamsReadApiToken
func NewTeamsReadApiTokenRequest(server string, accessKey string, params *TeamsReadApiTokenParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccessKey", runtime.ParamLocationPath, accessKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/api-tokens/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.IdFilter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_filter", runtime.ParamLocationQuery, *params.IdFilter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTeamsUpdateApiTokenRequest calls the generic TeamsUpdateApiToken builder with application/json body
func NewTeamsUpdateApiTokenRequest(server string, accessKey string, body TeamsUpdateApiTokenJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTeamsUpdateApiTokenRequestWithBody(server, accessKey, "application/json", bodyReader)
}

// NewTeamsUpdateApiTokenRequestWithBody generates requests for TeamsUpdateApiToken with any type of body
func NewTeamsUpdateApiTokenRequestWithBody(server string, accessKey string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccessKey", runtime.ParamLocationPath, accessKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/api-tokens/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTeamsReadGroupsRequest generates requests for TeamsReadGroups
func NewTeamsReadGroupsRequest(server string, params *TeamsReadGroupsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/groups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.IdFilter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_filter", runtime.ParamLocationQuery, *params.IdFilter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTeamsCreateGroupRequest calls the generic TeamsCreateGroup builder with application/json body
func NewTeamsCreateGroupRequest(server string, body TeamsCreateGroupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTeamsCreateGroupRequestWithBody(server, "application/json", bodyReader)
}

// NewTeamsCreateGroupRequestWithBody generates requests for TeamsCreateGroup with any type of body
func NewTeamsCreateGroupRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/groups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTeamsUpdateGroupMembersRequest calls the generic TeamsUpdateGroupMembers builder with application/json body
func NewTeamsUpdateGroupMembersRequest(server string, body TeamsUpdateGroupMembersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTeamsUpdateGroupMembersRequestWithBody(server, "application/json", bodyReader)
}

// NewTeamsUpdateGroupMembersRequestWithBody generates requests for TeamsUpdateGroupMembers with any type of body
func NewTeamsUpdateGroupMembersRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/groups/members")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTeamsDeleteGroupRequest generates requests for TeamsDeleteGroup
func NewTeamsDeleteGroupRequest(server string, groupId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "group_id", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/groups/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTeamsReadGroupRequest generates requests for TeamsReadGroup
func NewTeamsReadGroupRequest(server string, groupId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "group_id", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/groups/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTeamsUpdateGroupRequest calls the generic TeamsUpdateGroup builder with application/json body
func NewTeamsUpdateGroupRequest(server string, groupId string, body TeamsUpdateGroupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTeamsUpdateGroupRequestWithBody(server, groupId, "application/json", bodyReader)
}

// NewTeamsUpdateGroupRequestWithBody generates requests for TeamsUpdateGroup with any type of body
func NewTeamsUpdateGroupRequestWithBody(server string, groupId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "group_id", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/groups/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTeamsReadIdamUsersRequest generates requests for TeamsReadIdamUsers
func NewTeamsReadIdamUsersRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/idam/user")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTeamsCreateUserRequest calls the generic TeamsCreateUser builder with application/json body
func NewTeamsCreateUserRequest(server string, body TeamsCreateUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTeamsCreateUserRequestWithBody(server, "application/json", bodyReader)
}

// NewTeamsCreateUserRequestWithBody generates requests for TeamsCreateUser with any type of body
func NewTeamsCreateUserRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/idam/user")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTeamsUpdateUserInviteRequest generates requests for TeamsUpdateUserInvite
func NewTeamsUpdateUserInviteRequest(server string, userId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/idam/user/resend-invite/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTeamsUpdateUserPasswordRequest generates requests for TeamsUpdateUserPassword
func NewTeamsUpdateUserPasswordRequest(server string, userId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/idam/user/reset-password/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTeamsReadIdamUserRequest generates requests for TeamsReadIdamUser
func NewTeamsReadIdamUserRequest(server string, orgId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "org_id", runtime.ParamLocationPath, orgId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/idam/user/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTeamsUpdateUserRequest calls the generic TeamsUpdateUser builder with application/json body
func NewTeamsUpdateUserRequest(server string, userId string, body TeamsUpdateUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTeamsUpdateUserRequestWithBody(server, userId, "application/json", bodyReader)
}

// NewTeamsUpdateUserRequestWithBody generates requests for TeamsUpdateUser with any type of body
func NewTeamsUpdateUserRequestWithBody(server string, userId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/idam/user/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewNetworkingReadDnsResolversRequest generates requests for NetworkingReadDnsResolvers
func NewNetworkingReadDnsResolversRequest(server string, params *NetworkingReadDnsResolversParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/networking/dnsresolvers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNetworkingDeleteDnsResolverRequest generates requests for NetworkingDeleteDnsResolver
func NewNetworkingDeleteDnsResolverRequest(server string, dnsResolverId Uuidv4) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "dns_resolver_id", runtime.ParamLocationPath, dnsResolverId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/networking/dnsresolvers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNetworkingReadDnsResolverRequest generates requests for NetworkingReadDnsResolver
func NewNetworkingReadDnsResolverRequest(server string, dnsResolverId Uuidv4, params *NetworkingReadDnsResolverParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "dns_resolver_id", runtime.ParamLocationPath, dnsResolverId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/networking/dnsresolvers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNetworkingUpdateDnsResolverRequest calls the generic NetworkingUpdateDnsResolver builder with application/json body
func NewNetworkingUpdateDnsResolverRequest(server string, dnsResolverId Uuidv4, body NetworkingUpdateDnsResolverJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewNetworkingUpdateDnsResolverRequestWithBody(server, dnsResolverId, "application/json", bodyReader)
}

// NewNetworkingUpdateDnsResolverRequestWithBody generates requests for NetworkingUpdateDnsResolver with any type of body
func NewNetworkingUpdateDnsResolverRequestWithBody(server string, dnsResolverId Uuidv4, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "dns_resolver_id", runtime.ParamLocationPath, dnsResolverId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/networking/dnsresolvers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewNetworkingReadResolverDnsRulesRequest generates requests for NetworkingReadResolverDnsRules
func NewNetworkingReadResolverDnsRulesRequest(server string, dnsResolverId Uuidv4, params *NetworkingReadResolverDnsRulesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "dns_resolver_id", runtime.ParamLocationPath, dnsResolverId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/networking/dnsresolvers/%s/dnsrules", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNetworkingCreateDnsRuleRequest calls the generic NetworkingCreateDnsRule builder with application/json body
func NewNetworkingCreateDnsRuleRequest(server string, dnsResolverId Uuidv4, body NetworkingCreateDnsRuleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewNetworkingCreateDnsRuleRequestWithBody(server, dnsResolverId, "application/json", bodyReader)
}

// NewNetworkingCreateDnsRuleRequestWithBody generates requests for NetworkingCreateDnsRule with any type of body
func NewNetworkingCreateDnsRuleRequestWithBody(server string, dnsResolverId Uuidv4, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "dns_resolver_id", runtime.ParamLocationPath, dnsResolverId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/networking/dnsresolvers/%s/dnsrules", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewNetworkingReadDnsRulesRequest generates requests for NetworkingReadDnsRules
func NewNetworkingReadDnsRulesRequest(server string, params *NetworkingReadDnsRulesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/networking/dnsrules")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNetworkingDeleteDnsRuleRequest generates requests for NetworkingDeleteDnsRule
func NewNetworkingDeleteDnsRuleRequest(server string, dnsRuleId Uuidv4) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "dns_rule_id", runtime.ParamLocationPath, dnsRuleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/networking/dnsrules/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNetworkingReadDnsRuleRequest generates requests for NetworkingReadDnsRule
func NewNetworkingReadDnsRuleRequest(server string, dnsRuleId Uuidv4, params *NetworkingReadDnsRuleParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "dns_rule_id", runtime.ParamLocationPath, dnsRuleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/networking/dnsrules/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNetworkingUpdateDnsRuleRequest calls the generic NetworkingUpdateDnsRule builder with application/json body
func NewNetworkingUpdateDnsRuleRequest(server string, dnsRuleId Uuidv4, body NetworkingUpdateDnsRuleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewNetworkingUpdateDnsRuleRequestWithBody(server, dnsRuleId, "application/json", bodyReader)
}

// NewNetworkingUpdateDnsRuleRequestWithBody generates requests for NetworkingUpdateDnsRule with any type of body
func NewNetworkingUpdateDnsRuleRequestWithBody(server string, dnsRuleId Uuidv4, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "dns_rule_id", runtime.ParamLocationPath, dnsRuleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/networking/dnsrules/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewNetworkingReadDxAssociationsRequest generates requests for NetworkingReadDxAssociations
func NewNetworkingReadDxAssociationsRequest(server string, params *NetworkingReadDxAssociationsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/networking/dxassociations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNetworkingDeleteDxAssociationRequest generates requests for NetworkingDeleteDxAssociation
func NewNetworkingDeleteDxAssociationRequest(server string, dxAssociationId Uuidv4) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "dx_association_id", runtime.ParamLocationPath, dxAssociationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/networking/dxassociations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNetworkingReadDxAssociationRequest generates requests for NetworkingReadDxAssociation
func NewNetworkingReadDxAssociationRequest(server string, dxAssociationId Uuidv4, params *NetworkingReadDxAssociationParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "dx_association_id", runtime.ParamLocationPath, dxAssociationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/networking/dxassociations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, params.Status); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNetworkingUpdateDxAssociationRequest calls the generic NetworkingUpdateDxAssociation builder with application/json body
func NewNetworkingUpdateDxAssociationRequest(server string, dxAssociationId Uuidv4, body NetworkingUpdateDxAssociationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewNetworkingUpdateDxAssociationRequestWithBody(server, dxAssociationId, "application/json", bodyReader)
}

// NewNetworkingUpdateDxAssociationRequestWithBody generates requests for NetworkingUpdateDxAssociation with any type of body
func NewNetworkingUpdateDxAssociationRequestWithBody(server string, dxAssociationId Uuidv4, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "dx_association_id", runtime.ParamLocationPath, dxAssociationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/networking/dxassociations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewNetworkingReadDxGatewaysRequest generates requests for NetworkingReadDxGateways
func NewNetworkingReadDxGatewaysRequest(server string, params *NetworkingReadDxGatewaysParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/networking/dxgateways")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNetworkingDeleteDxGatewayRequest generates requests for NetworkingDeleteDxGateway
func NewNetworkingDeleteDxGatewayRequest(server string, dxGatewayId Uuidv4) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "dx_gateway_id", runtime.ParamLocationPath, dxGatewayId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/networking/dxgateways/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNetworkingReadDxGatewayRequest generates requests for NetworkingReadDxGateway
func NewNetworkingReadDxGatewayRequest(server string, dxGatewayId Uuidv4, params *NetworkingReadDxGatewayParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "dx_gateway_id", runtime.ParamLocationPath, dxGatewayId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/networking/dxgateways/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNetworkingReadGatewayDxAssociationsRequest generates requests for NetworkingReadGatewayDxAssociations
func NewNetworkingReadGatewayDxAssociationsRequest(server string, dxGatewayId Uuidv4, params *NetworkingReadGatewayDxAssociationsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "dx_gateway_id", runtime.ParamLocationPath, dxGatewayId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/networking/dxgateways/%s/dxassociations", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNetworkingCreateDxAssociationRequest calls the generic NetworkingCreateDxAssociation builder with application/json body
func NewNetworkingCreateDxAssociationRequest(server string, dxGatewayId Uuidv4, body NetworkingCreateDxAssociationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewNetworkingCreateDxAssociationRequestWithBody(server, dxGatewayId, "application/json", bodyReader)
}

// NewNetworkingCreateDxAssociationRequestWithBody generates requests for NetworkingCreateDxAssociation with any type of body
func NewNetworkingCreateDxAssociationRequestWithBody(server string, dxGatewayId Uuidv4, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "dx_gateway_id", runtime.ParamLocationPath, dxGatewayId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/networking/dxgateways/%s/dxassociations", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewNetworkingReadGatewayDxVifsRequest generates requests for NetworkingReadGatewayDxVifs
func NewNetworkingReadGatewayDxVifsRequest(server string, dxGatewayId Uuidv4, params *NetworkingReadGatewayDxVifsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "dx_gateway_id", runtime.ParamLocationPath, dxGatewayId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/networking/dxgateways/%s/dxvifs", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNetworkingCreateDxResourceRequest calls the generic NetworkingCreateDxResource builder with application/json body
func NewNetworkingCreateDxResourceRequest(server string, body NetworkingCreateDxResourceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewNetworkingCreateDxResourceRequestWithBody(server, "application/json", bodyReader)
}

// NewNetworkingCreateDxResourceRequestWithBody generates requests for NetworkingCreateDxResource with any type of body
func NewNetworkingCreateDxResourceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/networking/dxresources")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewNetworkingReadDxVifsRequest generates requests for NetworkingReadDxVifs
func NewNetworkingReadDxVifsRequest(server string, params *NetworkingReadDxVifsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/networking/dxvifs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNetworkingDeleteDxVifRequest generates requests for NetworkingDeleteDxVif
func NewNetworkingDeleteDxVifRequest(server string, dxVifId Uuidv4) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "dx_vif_id", runtime.ParamLocationPath, dxVifId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/networking/dxvifs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNetworkingReadDxVifRequest generates requests for NetworkingReadDxVif
func NewNetworkingReadDxVifRequest(server string, dxVifId Uuidv4, params *NetworkingReadDxVifParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "dx_vif_id", runtime.ParamLocationPath, dxVifId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/networking/dxvifs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNetworkingUpdateDxVifRequest calls the generic NetworkingUpdateDxVif builder with application/json body
func NewNetworkingUpdateDxVifRequest(server string, dxVifId Uuidv4, body NetworkingUpdateDxVifJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewNetworkingUpdateDxVifRequestWithBody(server, dxVifId, "application/json", bodyReader)
}

// NewNetworkingUpdateDxVifRequestWithBody generates requests for NetworkingUpdateDxVif with any type of body
func NewNetworkingUpdateDxVifRequestWithBody(server string, dxVifId Uuidv4, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "dx_vif_id", runtime.ParamLocationPath, dxVifId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/networking/dxvifs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewNetworkingReadDxVifStatusRequest generates requests for NetworkingReadDxVifStatus
func NewNetworkingReadDxVifStatusRequest(server string, dxVifId Uuidv4) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "dx_vif_id", runtime.ParamLocationPath, dxVifId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/networking/dxvifs/%s/status", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNetworkingReadCidrExclusionsRequest generates requests for NetworkingReadCidrExclusions
func NewNetworkingReadCidrExclusionsRequest(server string, params *NetworkingReadCidrExclusionsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/networking/exclusions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNetworkingDeleteCidrExclusionRequest generates requests for NetworkingDeleteCidrExclusion
func NewNetworkingDeleteCidrExclusionRequest(server string, exclusionId Uuidv4) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "exclusion_id", runtime.ParamLocationPath, exclusionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/networking/exclusions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNetworkingReadCidrExclusionRequest generates requests for NetworkingReadCidrExclusion
func NewNetworkingReadCidrExclusionRequest(server string, exclusionId Uuidv4, params *NetworkingReadCidrExclusionParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "exclusion_id", runtime.ParamLocationPath, exclusionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/networking/exclusions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNetworkingUpdateCidrExclusionRequest calls the generic NetworkingUpdateCidrExclusion builder with application/json body
func NewNetworkingUpdateCidrExclusionRequest(server string, exclusionId Uuidv4, body NetworkingUpdateCidrExclusionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewNetworkingUpdateCidrExclusionRequestWithBody(server, exclusionId, "application/json", bodyReader)
}

// NewNetworkingUpdateCidrExclusionRequestWithBody generates requests for NetworkingUpdateCidrExclusion with any type of body
func NewNetworkingUpdateCidrExclusionRequestWithBody(server string, exclusionId Uuidv4, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "exclusion_id", runtime.ParamLocationPath, exclusionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/networking/exclusions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewNetworkingReadHubPeeringsRequest generates requests for NetworkingReadHubPeerings
func NewNetworkingReadHubPeeringsRequest(server string, params *NetworkingReadHubPeeringsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/networking/hubpeerings")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNetworkingDeleteHubPeeringRequest generates requests for NetworkingDeleteHubPeering
func NewNetworkingDeleteHubPeeringRequest(server string, hubPeeringId Uuidv4) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "hub_peering_id", runtime.ParamLocationPath, hubPeeringId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/networking/hubpeerings/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNetworkingReadHubPeeringRequest generates requests for NetworkingReadHubPeering
func NewNetworkingReadHubPeeringRequest(server string, hubPeeringId Uuidv4, params *NetworkingReadHubPeeringParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "hub_peering_id", runtime.ParamLocationPath, hubPeeringId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/networking/hubpeerings/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNetworkingUpdateHubPeeringRequest calls the generic NetworkingUpdateHubPeering builder with application/json body
func NewNetworkingUpdateHubPeeringRequest(server string, hubPeeringId Uuidv4, body NetworkingUpdateHubPeeringJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewNetworkingUpdateHubPeeringRequestWithBody(server, hubPeeringId, "application/json", bodyReader)
}

// NewNetworkingUpdateHubPeeringRequestWithBody generates requests for NetworkingUpdateHubPeering with any type of body
func NewNetworkingUpdateHubPeeringRequestWithBody(server string, hubPeeringId Uuidv4, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "hub_peering_id", runtime.ParamLocationPath, hubPeeringId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/networking/hubpeerings/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewNetworkingReadHubsRequest generates requests for NetworkingReadHubs
func NewNetworkingReadHubsRequest(server string, params *NetworkingReadHubsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/networking/hubs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNetworkingCreateHubRequest calls the generic NetworkingCreateHub builder with application/json body
func NewNetworkingCreateHubRequest(server string, body NetworkingCreateHubJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewNetworkingCreateHubRequestWithBody(server, "application/json", bodyReader)
}

// NewNetworkingCreateHubRequestWithBody generates requests for NetworkingCreateHub with any type of body
func NewNetworkingCreateHubRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/networking/hubs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewNetworkingDeleteHubRequest generates requests for NetworkingDeleteHub
func NewNetworkingDeleteHubRequest(server string, hubId Uuidv4) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "hub_id", runtime.ParamLocationPath, hubId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/networking/hubs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNetworkingReadHubRequest generates requests for NetworkingReadHub
func NewNetworkingReadHubRequest(server string, hubId Uuidv4, params *NetworkingReadHubParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "hub_id", runtime.ParamLocationPath, hubId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/networking/hubs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNetworkingUpdateHubRequest calls the generic NetworkingUpdateHub builder with application/json body
func NewNetworkingUpdateHubRequest(server string, hubId Uuidv4, body NetworkingUpdateHubJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewNetworkingUpdateHubRequestWithBody(server, hubId, "application/json", bodyReader)
}

// NewNetworkingUpdateHubRequestWithBody generates requests for NetworkingUpdateHub with any type of body
func NewNetworkingUpdateHubRequestWithBody(server string, hubId Uuidv4, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "hub_id", runtime.ParamLocationPath, hubId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/networking/hubs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewNetworkingReadHubDnsResolversRequest generates requests for NetworkingReadHubDnsResolvers
func NewNetworkingReadHubDnsResolversRequest(server string, hubId Uuidv4, params *NetworkingReadHubDnsResolversParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "hub_id", runtime.ParamLocationPath, hubId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/networking/hubs/%s/dnsresolvers", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNetworkingCreateDnsResolverRequest calls the generic NetworkingCreateDnsResolver builder with application/json body
func NewNetworkingCreateDnsResolverRequest(server string, hubId Uuidv4, body NetworkingCreateDnsResolverJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewNetworkingCreateDnsResolverRequestWithBody(server, hubId, "application/json", bodyReader)
}

// NewNetworkingCreateDnsResolverRequestWithBody generates requests for NetworkingCreateDnsResolver with any type of body
func NewNetworkingCreateDnsResolverRequestWithBody(server string, hubId Uuidv4, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "hub_id", runtime.ParamLocationPath, hubId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/networking/hubs/%s/dnsresolvers", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewNetworkingReadHubDxAssociationsRequest generates requests for NetworkingReadHubDxAssociations
func NewNetworkingReadHubDxAssociationsRequest(server string, hubId Uuidv4, params *NetworkingReadHubDxAssociationsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "hub_id", runtime.ParamLocationPath, hubId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/networking/hubs/%s/dxassociations", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNetworkingReadHubDxGatewaysRequest generates requests for NetworkingReadHubDxGateways
func NewNetworkingReadHubDxGatewaysRequest(server string, hubId Uuidv4, params *NetworkingReadHubDxGatewaysParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "hub_id", runtime.ParamLocationPath, hubId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/networking/hubs/%s/dxgateways", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNetworkingReadHubCidrExclusionsRequest generates requests for NetworkingReadHubCidrExclusions
func NewNetworkingReadHubCidrExclusionsRequest(server string, hubId Uuidv4, params *NetworkingReadHubCidrExclusionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "hub_id", runtime.ParamLocationPath, hubId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/networking/hubs/%s/exclusions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNetworkingCreateCidrExclusionRequest calls the generic NetworkingCreateCidrExclusion builder with application/json body
func NewNetworkingCreateCidrExclusionRequest(server string, hubId Uuidv4, body NetworkingCreateCidrExclusionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewNetworkingCreateCidrExclusionRequestWithBody(server, hubId, "application/json", bodyReader)
}

// NewNetworkingCreateCidrExclusionRequestWithBody generates requests for NetworkingCreateCidrExclusion with any type of body
func NewNetworkingCreateCidrExclusionRequestWithBody(server string, hubId Uuidv4, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "hub_id", runtime.ParamLocationPath, hubId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/networking/hubs/%s/exclusions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewNetworkingReadHubPrefixListsRequest generates requests for NetworkingReadHubPrefixLists
func NewNetworkingReadHubPrefixListsRequest(server string, hubId Uuidv4, params *NetworkingReadHubPrefixListsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "hub_id", runtime.ParamLocationPath, hubId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/networking/hubs/%s/prefixlists", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNetworkingCreateHubPrefixListRequest calls the generic NetworkingCreateHubPrefixList builder with application/json body
func NewNetworkingCreateHubPrefixListRequest(server string, hubId Uuidv4, body NetworkingCreateHubPrefixListJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewNetworkingCreateHubPrefixListRequestWithBody(server, hubId, "application/json", bodyReader)
}

// NewNetworkingCreateHubPrefixListRequestWithBody generates requests for NetworkingCreateHubPrefixList with any type of body
func NewNetworkingCreateHubPrefixListRequestWithBody(server string, hubId Uuidv4, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "hub_id", runtime.ParamLocationPath, hubId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/networking/hubs/%s/prefixlists/hubs", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewNetworkingCreateVpcPrefixListRequest calls the generic NetworkingCreateVpcPrefixList builder with application/json body
func NewNetworkingCreateVpcPrefixListRequest(server string, hubId Uuidv4, body NetworkingCreateVpcPrefixListJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewNetworkingCreateVpcPrefixListRequestWithBody(server, hubId, "application/json", bodyReader)
}

// NewNetworkingCreateVpcPrefixListRequestWithBody generates requests for NetworkingCreateVpcPrefixList with any type of body
func NewNetworkingCreateVpcPrefixListRequestWithBody(server string, hubId Uuidv4, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "hub_id", runtime.ParamLocationPath, hubId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/networking/hubs/%s/prefixlists/vpcs", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewNetworkingReadHubCidrRangesRequest generates requests for NetworkingReadHubCidrRanges
func NewNetworkingReadHubCidrRangesRequest(server string, hubId Uuidv4, params *NetworkingReadHubCidrRangesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "hub_id", runtime.ParamLocationPath, hubId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/networking/hubs/%s/ranges", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdFilter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_filter", runtime.ParamLocationQuery, *params.IdFilter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNetworkingCreateCidrRangeRequest calls the generic NetworkingCreateCidrRange builder with application/json body
func NewNetworkingCreateCidrRangeRequest(server string, hubId Uuidv4, body NetworkingCreateCidrRangeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewNetworkingCreateCidrRangeRequestWithBody(server, hubId, "application/json", bodyReader)
}

// NewNetworkingCreateCidrRangeRequestWithBody generates requests for NetworkingCreateCidrRange with any type of body
func NewNetworkingCreateCidrRangeRequestWithBody(server string, hubId Uuidv4, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "hub_id", runtime.ParamLocationPath, hubId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/networking/hubs/%s/ranges", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewNetworkingReadHubVpcsRequest generates requests for NetworkingReadHubVpcs
func NewNetworkingReadHubVpcsRequest(server string, hubId Uuidv4, params *NetworkingReadHubVpcsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "hub_id", runtime.ParamLocationPath, hubId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/networking/hubs/%s/vpcs", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNetworkingCreateVpcRequest calls the generic NetworkingCreateVpc builder with application/json body
func NewNetworkingCreateVpcRequest(server string, hubId Uuidv4, body NetworkingCreateVpcJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewNetworkingCreateVpcRequestWithBody(server, hubId, "application/json", bodyReader)
}

// NewNetworkingCreateVpcRequestWithBody generates requests for NetworkingCreateVpc with any type of body
func NewNetworkingCreateVpcRequestWithBody(server string, hubId Uuidv4, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "hub_id", runtime.ParamLocationPath, hubId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/networking/hubs/%s/vpcs", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewNetworkingReadHubVpnConnectionsRequest generates requests for NetworkingReadHubVpnConnections
func NewNetworkingReadHubVpnConnectionsRequest(server string, hubId Uuidv4, params *NetworkingReadHubVpnConnectionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "hub_id", runtime.ParamLocationPath, hubId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/networking/hubs/%s/vpnconnections", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNetworkingReadHubVpnCustomerGatewaysRequest generates requests for NetworkingReadHubVpnCustomerGateways
func NewNetworkingReadHubVpnCustomerGatewaysRequest(server string, hubId Uuidv4, params *NetworkingReadHubVpnCustomerGatewaysParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "hub_id", runtime.ParamLocationPath, hubId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/networking/hubs/%s/vpncustomergateways", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNetworkingReadHubHubPeeringsRequest generates requests for NetworkingReadHubHubPeerings
func NewNetworkingReadHubHubPeeringsRequest(server string, networkingHubId Uuidv4, params *NetworkingReadHubHubPeeringsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "networking_hub_id", runtime.ParamLocationPath, networkingHubId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/networking/hubs/%s/hubpeerings", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNetworkingCreateHubPeeringRequest calls the generic NetworkingCreateHubPeering builder with application/json body
func NewNetworkingCreateHubPeeringRequest(server string, networkingHubId Uuidv4, body NetworkingCreateHubPeeringJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewNetworkingCreateHubPeeringRequestWithBody(server, networkingHubId, "application/json", bodyReader)
}

// NewNetworkingCreateHubPeeringRequestWithBody generates requests for NetworkingCreateHubPeering with any type of body
func NewNetworkingCreateHubPeeringRequestWithBody(server string, networkingHubId Uuidv4, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "networking_hub_id", runtime.ParamLocationPath, networkingHubId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/networking/hubs/%s/hubpeerings", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewNetworkingReadPrefixListsRequest generates requests for NetworkingReadPrefixLists
func NewNetworkingReadPrefixListsRequest(server string, params *NetworkingReadPrefixListsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/networking/prefixlists")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNetworkingUpdateHubPrefixListAssociationRequest calls the generic NetworkingUpdateHubPrefixListAssociation builder with application/json body
func NewNetworkingUpdateHubPrefixListAssociationRequest(server string, prefixListId Uuidv4, body NetworkingUpdateHubPrefixListAssociationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewNetworkingUpdateHubPrefixListAssociationRequestWithBody(server, prefixListId, "application/json", bodyReader)
}

// NewNetworkingUpdateHubPrefixListAssociationRequestWithBody generates requests for NetworkingUpdateHubPrefixListAssociation with any type of body
func NewNetworkingUpdateHubPrefixListAssociationRequestWithBody(server string, prefixListId Uuidv4, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "prefix_list_id", runtime.ParamLocationPath, prefixListId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/networking/prefixlists/hubs/%s/associations", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewNetworkingUpdateVpcPrefixListAssociationRequest calls the generic NetworkingUpdateVpcPrefixListAssociation builder with application/json body
func NewNetworkingUpdateVpcPrefixListAssociationRequest(server string, prefixListId Uuidv4, body NetworkingUpdateVpcPrefixListAssociationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewNetworkingUpdateVpcPrefixListAssociationRequestWithBody(server, prefixListId, "application/json", bodyReader)
}

// NewNetworkingUpdateVpcPrefixListAssociationRequestWithBody generates requests for NetworkingUpdateVpcPrefixListAssociation with any type of body
func NewNetworkingUpdateVpcPrefixListAssociationRequestWithBody(server string, prefixListId Uuidv4, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "prefix_list_id", runtime.ParamLocationPath, prefixListId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/networking/prefixlists/vpcs/%s/associations", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewNetworkingDeletePrefixListRequest generates requests for NetworkingDeletePrefixList
func NewNetworkingDeletePrefixListRequest(server string, prefixListId Uuidv4) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "prefix_list_id", runtime.ParamLocationPath, prefixListId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/networking/prefixlists/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNetworkingReadPrefixListRequest generates requests for NetworkingReadPrefixList
func NewNetworkingReadPrefixListRequest(server string, prefixListId Uuidv4, params *NetworkingReadPrefixListParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "prefix_list_id", runtime.ParamLocationPath, prefixListId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/networking/prefixlists/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNetworkingUpdatePrefixListRequest calls the generic NetworkingUpdatePrefixList builder with application/json body
func NewNetworkingUpdatePrefixListRequest(server string, prefixListId Uuidv4, body NetworkingUpdatePrefixListJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewNetworkingUpdatePrefixListRequestWithBody(server, prefixListId, "application/json", bodyReader)
}

// NewNetworkingUpdatePrefixListRequestWithBody generates requests for NetworkingUpdatePrefixList with any type of body
func NewNetworkingUpdatePrefixListRequestWithBody(server string, prefixListId Uuidv4, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "prefix_list_id", runtime.ParamLocationPath, prefixListId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/networking/prefixlists/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewNetworkingReadCidrRangesRequest generates requests for NetworkingReadCidrRanges
func NewNetworkingReadCidrRangesRequest(server string, params *NetworkingReadCidrRangesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/networking/ranges")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdFilter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_filter", runtime.ParamLocationQuery, *params.IdFilter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNetworkingDeleteCidrRangeRequest generates requests for NetworkingDeleteCidrRange
func NewNetworkingDeleteCidrRangeRequest(server string, rangeId Uuidv4) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "range_id", runtime.ParamLocationPath, rangeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/networking/ranges/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNetworkingReadCidrRangeRequest generates requests for NetworkingReadCidrRange
func NewNetworkingReadCidrRangeRequest(server string, rangeId Uuidv4, params *NetworkingReadCidrRangeParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "range_id", runtime.ParamLocationPath, rangeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/networking/ranges/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdFilter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_filter", runtime.ParamLocationQuery, *params.IdFilter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNetworkingUpdateCidrRangeRequest calls the generic NetworkingUpdateCidrRange builder with application/json body
func NewNetworkingUpdateCidrRangeRequest(server string, rangeId Uuidv4, body NetworkingUpdateCidrRangeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewNetworkingUpdateCidrRangeRequestWithBody(server, rangeId, "application/json", bodyReader)
}

// NewNetworkingUpdateCidrRangeRequestWithBody generates requests for NetworkingUpdateCidrRange with any type of body
func NewNetworkingUpdateCidrRangeRequestWithBody(server string, rangeId Uuidv4, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "range_id", runtime.ParamLocationPath, rangeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/networking/ranges/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewNetworkingReadVpcsRequest generates requests for NetworkingReadVpcs
func NewNetworkingReadVpcsRequest(server string, params *NetworkingReadVpcsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/networking/vpcs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNetworkingDeleteVpcRequest generates requests for NetworkingDeleteVpc
func NewNetworkingDeleteVpcRequest(server string, vpcId Uuidv4) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "vpc_id", runtime.ParamLocationPath, vpcId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/networking/vpcs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNetworkingReadVpcRequest generates requests for NetworkingReadVpc
func NewNetworkingReadVpcRequest(server string, vpcId Uuidv4, params *NetworkingReadVpcParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "vpc_id", runtime.ParamLocationPath, vpcId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/networking/vpcs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNetworkingUpdateVpcRequest calls the generic NetworkingUpdateVpc builder with application/json body
func NewNetworkingUpdateVpcRequest(server string, vpcId Uuidv4, body NetworkingUpdateVpcJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewNetworkingUpdateVpcRequestWithBody(server, vpcId, "application/json", bodyReader)
}

// NewNetworkingUpdateVpcRequestWithBody generates requests for NetworkingUpdateVpc with any type of body
func NewNetworkingUpdateVpcRequestWithBody(server string, vpcId Uuidv4, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "vpc_id", runtime.ParamLocationPath, vpcId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/networking/vpcs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewNetworkingReadVpnConnectionsRequest generates requests for NetworkingReadVpnConnections
func NewNetworkingReadVpnConnectionsRequest(server string, params *NetworkingReadVpnConnectionsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/networking/vpnconnections")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNetworkingDeleteVpnConnectionRequest generates requests for NetworkingDeleteVpnConnection
func NewNetworkingDeleteVpnConnectionRequest(server string, vpnConnectionId Uuidv4) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "vpn_connection_id", runtime.ParamLocationPath, vpnConnectionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/networking/vpnconnections/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNetworkingReadVpnConnectionRequest generates requests for NetworkingReadVpnConnection
func NewNetworkingReadVpnConnectionRequest(server string, vpnConnectionId Uuidv4, params *NetworkingReadVpnConnectionParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "vpn_connection_id", runtime.ParamLocationPath, vpnConnectionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/networking/vpnconnections/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNetworkingUpdateVpnConnectionRequest calls the generic NetworkingUpdateVpnConnection builder with application/json body
func NewNetworkingUpdateVpnConnectionRequest(server string, vpnConnectionId Uuidv4, body NetworkingUpdateVpnConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewNetworkingUpdateVpnConnectionRequestWithBody(server, vpnConnectionId, "application/json", bodyReader)
}

// NewNetworkingUpdateVpnConnectionRequestWithBody generates requests for NetworkingUpdateVpnConnection with any type of body
func NewNetworkingUpdateVpnConnectionRequestWithBody(server string, vpnConnectionId Uuidv4, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "vpn_connection_id", runtime.ParamLocationPath, vpnConnectionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/networking/vpnconnections/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewNetworkingReadVpnConnectionStatusRequest generates requests for NetworkingReadVpnConnectionStatus
func NewNetworkingReadVpnConnectionStatusRequest(server string, vpnConnectionId Uuidv4) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "vpn_connection_id", runtime.ParamLocationPath, vpnConnectionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/networking/vpnconnections/%s/status", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNetworkingReadVpnCustomerGatewaysRequest generates requests for NetworkingReadVpnCustomerGateways
func NewNetworkingReadVpnCustomerGatewaysRequest(server string, params *NetworkingReadVpnCustomerGatewaysParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/networking/vpncustomergateways")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNetworkingCreateVpnCustomerGatewayRequest calls the generic NetworkingCreateVpnCustomerGateway builder with application/json body
func NewNetworkingCreateVpnCustomerGatewayRequest(server string, body NetworkingCreateVpnCustomerGatewayJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewNetworkingCreateVpnCustomerGatewayRequestWithBody(server, "application/json", bodyReader)
}

// NewNetworkingCreateVpnCustomerGatewayRequestWithBody generates requests for NetworkingCreateVpnCustomerGateway with any type of body
func NewNetworkingCreateVpnCustomerGatewayRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/networking/vpncustomergateways")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewNetworkingDeleteVpnCustomerGatewayRequest generates requests for NetworkingDeleteVpnCustomerGateway
func NewNetworkingDeleteVpnCustomerGatewayRequest(server string, vpnCustomerGatewayId Uuidv4) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "vpn_customer_gateway_id", runtime.ParamLocationPath, vpnCustomerGatewayId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/networking/vpncustomergateways/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNetworkingReadVpnCustomerGatewayRequest generates requests for NetworkingReadVpnCustomerGateway
func NewNetworkingReadVpnCustomerGatewayRequest(server string, vpnCustomerGatewayId Uuidv4, params *NetworkingReadVpnCustomerGatewayParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "vpn_customer_gateway_id", runtime.ParamLocationPath, vpnCustomerGatewayId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/networking/vpncustomergateways/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNetworkingUpdateVpnCustomerGatewayRequest calls the generic NetworkingUpdateVpnCustomerGateway builder with application/json body
func NewNetworkingUpdateVpnCustomerGatewayRequest(server string, vpnCustomerGatewayId Uuidv4, body NetworkingUpdateVpnCustomerGatewayJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewNetworkingUpdateVpnCustomerGatewayRequestWithBody(server, vpnCustomerGatewayId, "application/json", bodyReader)
}

// NewNetworkingUpdateVpnCustomerGatewayRequestWithBody generates requests for NetworkingUpdateVpnCustomerGateway with any type of body
func NewNetworkingUpdateVpnCustomerGatewayRequestWithBody(server string, vpnCustomerGatewayId Uuidv4, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "vpn_customer_gateway_id", runtime.ParamLocationPath, vpnCustomerGatewayId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/networking/vpncustomergateways/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewNetworkingCreateVpnConnectionRequest calls the generic NetworkingCreateVpnConnection builder with application/json body
func NewNetworkingCreateVpnConnectionRequest(server string, vpnCustomerGatewayId Uuidv4, body NetworkingCreateVpnConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewNetworkingCreateVpnConnectionRequestWithBody(server, vpnCustomerGatewayId, "application/json", bodyReader)
}

// NewNetworkingCreateVpnConnectionRequestWithBody generates requests for NetworkingCreateVpnConnection with any type of body
func NewNetworkingCreateVpnConnectionRequestWithBody(server string, vpnCustomerGatewayId Uuidv4, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "vpn_customer_gateway_id", runtime.ParamLocationPath, vpnCustomerGatewayId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/networking/vpncustomergateways/%s/vpnconnection", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewNetworkingReadGatewayVpnConnectionsRequest generates requests for NetworkingReadGatewayVpnConnections
func NewNetworkingReadGatewayVpnConnectionsRequest(server string, vpnCustomerGatewayId Uuidv4, params *NetworkingReadGatewayVpnConnectionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "vpn_customer_gateway_id", runtime.ParamLocationPath, vpnCustomerGatewayId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/networking/vpncustomergateways/%s/vpnconnections", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNetworkingReadDxConnectionsRequest generates requests for NetworkingReadDxConnections
func NewNetworkingReadDxConnectionsRequest(server string, accountId Uuidv4, params *NetworkingReadDxConnectionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "account_id", runtime.ParamLocationPath, accountId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/networking/%s/dxconnections", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.State != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "state", runtime.ParamLocationQuery, *params.State); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOrganisationsReadOrganisationsRequest generates requests for OrganisationsReadOrganisations
func NewOrganisationsReadOrganisationsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/organisations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOrganisationsReadOrganisationRequest generates requests for OrganisationsReadOrganisation
func NewOrganisationsReadOrganisationRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/organisations/current")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOrganisationsReadOrganisationalUnitsRequest generates requests for OrganisationsReadOrganisationalUnits
func NewOrganisationsReadOrganisationalUnitsRequest(server string, params *OrganisationsReadOrganisationalUnitsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/organisations/organisational-units")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOrganisationsReadOrganisationalUnitRequest generates requests for OrganisationsReadOrganisationalUnit
func NewOrganisationsReadOrganisationalUnitRequest(server string, organisationalUnitId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organisational_unit_id", runtime.ParamLocationPath, organisationalUnitId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/organisations/organisational-units/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOrganisationsReadPoliciesRequest generates requests for OrganisationsReadPolicies
func NewOrganisationsReadPoliciesRequest(server string, params *OrganisationsReadPoliciesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/policies")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOrganisationsCreatePolicyRequest calls the generic OrganisationsCreatePolicy builder with application/json body
func NewOrganisationsCreatePolicyRequest(server string, body OrganisationsCreatePolicyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewOrganisationsCreatePolicyRequestWithBody(server, "application/json", bodyReader)
}

// NewOrganisationsCreatePolicyRequestWithBody generates requests for OrganisationsCreatePolicy with any type of body
func NewOrganisationsCreatePolicyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/policies")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewOrganisationsDetachPolicyRequest generates requests for OrganisationsDetachPolicy
func NewOrganisationsDetachPolicyRequest(server string, policyId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "policy_id", runtime.ParamLocationPath, policyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/policies/organisation/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOrganisationsAttachPolicyRequest calls the generic OrganisationsAttachPolicy builder with application/json body
func NewOrganisationsAttachPolicyRequest(server string, policyId string, body OrganisationsAttachPolicyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewOrganisationsAttachPolicyRequestWithBody(server, policyId, "application/json", bodyReader)
}

// NewOrganisationsAttachPolicyRequestWithBody generates requests for OrganisationsAttachPolicy with any type of body
func NewOrganisationsAttachPolicyRequestWithBody(server string, policyId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "policy_id", runtime.ParamLocationPath, policyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/policies/organisation/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewOrganisationsDeletePolicyRequest generates requests for OrganisationsDeletePolicy
func NewOrganisationsDeletePolicyRequest(server string, policyId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "policy_id", runtime.ParamLocationPath, policyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/policies/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOrganisationsReadPolicyRequest generates requests for OrganisationsReadPolicy
func NewOrganisationsReadPolicyRequest(server string, policyId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "policy_id", runtime.ParamLocationPath, policyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/policies/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOrganisationsUpdatePolicyRequest calls the generic OrganisationsUpdatePolicy builder with application/json body
func NewOrganisationsUpdatePolicyRequest(server string, policyId string, body OrganisationsUpdatePolicyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewOrganisationsUpdatePolicyRequestWithBody(server, policyId, "application/json", bodyReader)
}

// NewOrganisationsUpdatePolicyRequestWithBody generates requests for OrganisationsUpdatePolicy with any type of body
func NewOrganisationsUpdatePolicyRequestWithBody(server string, policyId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "policy_id", runtime.ParamLocationPath, policyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/policies/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPublicCheckAliasRequest generates requests for PublicCheckAlias
func NewPublicCheckAliasRequest(server string, alias string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "alias", runtime.ParamLocationPath, alias)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/public/check-alias/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPublicReadConfigRequest generates requests for PublicReadConfig
func NewPublicReadConfigRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/public/config")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewServicesReadConfigurationsRequest generates requests for ServicesReadConfigurations
func NewServicesReadConfigurationsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/services/configuration")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewServicesReadSecurityHubConfigurationRequest generates requests for ServicesReadSecurityHubConfiguration
func NewServicesReadSecurityHubConfigurationRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/services/securityhub/configuration")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewServicesConfigureSecurityHubRequest calls the generic ServicesConfigureSecurityHub builder with application/json body
func NewServicesConfigureSecurityHubRequest(server string, body ServicesConfigureSecurityHubJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewServicesConfigureSecurityHubRequestWithBody(server, "application/json", bodyReader)
}

// NewServicesConfigureSecurityHubRequestWithBody generates requests for ServicesConfigureSecurityHub with any type of body
func NewServicesConfigureSecurityHubRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/services/securityhub/configuration")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTasksReadTaskRequest generates requests for TasksReadTask
func NewTasksReadTaskRequest(server string, taskId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "task_id", runtime.ParamLocationPath, taskId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/task/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTeamsReadUsersRequest generates requests for TeamsReadUsers
func NewTeamsReadUsersRequest(server string, params *TeamsReadUsersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdFilter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_filter", runtime.ParamLocationQuery, *params.IdFilter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StatusFilter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status_filter", runtime.ParamLocationQuery, *params.StatusFilter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTeamsFetchCurrentUserRequest generates requests for TeamsFetchCurrentUser
func NewTeamsFetchCurrentUserRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/users/me")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTeamsDeleteUserRequest generates requests for TeamsDeleteUser
func NewTeamsDeleteUserRequest(server string, userId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTeamsReadUserRequest generates requests for TeamsReadUser
func NewTeamsReadUserRequest(server string, userId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewWorkloadsReadCatalogueItemsRequest generates requests for WorkloadsReadCatalogueItems
func NewWorkloadsReadCatalogueItemsRequest(server string, params *WorkloadsReadCatalogueItemsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/workload-catalogue")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdFilter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_filter", runtime.ParamLocationQuery, *params.IdFilter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortOrder != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort_order", runtime.ParamLocationQuery, *params.SortOrder); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeVersions != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_versions", runtime.ParamLocationQuery, *params.IncludeVersions); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeParameters != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_parameters", runtime.ParamLocationQuery, *params.IncludeParameters); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeTags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_tags", runtime.ParamLocationQuery, *params.IncludeTags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewWorkloadsCreateCatalogueItemRequest calls the generic WorkloadsCreateCatalogueItem builder with application/json body
func NewWorkloadsCreateCatalogueItemRequest(server string, body WorkloadsCreateCatalogueItemJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewWorkloadsCreateCatalogueItemRequestWithBody(server, "application/json", bodyReader)
}

// NewWorkloadsCreateCatalogueItemRequestWithBody generates requests for WorkloadsCreateCatalogueItem with any type of body
func NewWorkloadsCreateCatalogueItemRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/workload-catalogue")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewWorkloadsReadCatalogueManifestRequest generates requests for WorkloadsReadCatalogueManifest
func NewWorkloadsReadCatalogueManifestRequest(server string, versionId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "version_id", runtime.ParamLocationPath, versionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/workload-catalogue/manifest/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewWorkloadsReadCatalogueTemplateRequest generates requests for WorkloadsReadCatalogueTemplate
func NewWorkloadsReadCatalogueTemplateRequest(server string, versionId string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "version_id", runtime.ParamLocationPath, versionId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/workload-catalogue/template/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewWorkloadsDeleteCatalogueItemRequest generates requests for WorkloadsDeleteCatalogueItem
func NewWorkloadsDeleteCatalogueItemRequest(server string, catalogueId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "catalogue_id", runtime.ParamLocationPath, catalogueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/workload-catalogue/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewWorkloadsReadCatalogueItemRequest generates requests for WorkloadsReadCatalogueItem
func NewWorkloadsReadCatalogueItemRequest(server string, catalogueId string, params *WorkloadsReadCatalogueItemParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "catalogue_id", runtime.ParamLocationPath, catalogueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/workload-catalogue/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdFilter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_filter", runtime.ParamLocationQuery, *params.IdFilter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortOrder != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort_order", runtime.ParamLocationQuery, *params.SortOrder); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeVersions != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_versions", runtime.ParamLocationQuery, *params.IncludeVersions); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeParameters != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_parameters", runtime.ParamLocationQuery, *params.IncludeParameters); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeTags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_tags", runtime.ParamLocationQuery, *params.IncludeTags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewWorkloadsCreateCatalogueVersionRequest calls the generic WorkloadsCreateCatalogueVersion builder with application/json body
func NewWorkloadsCreateCatalogueVersionRequest(server string, catalogueId string, body WorkloadsCreateCatalogueVersionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewWorkloadsCreateCatalogueVersionRequestWithBody(server, catalogueId, "application/json", bodyReader)
}

// NewWorkloadsCreateCatalogueVersionRequestWithBody generates requests for WorkloadsCreateCatalogueVersion with any type of body
func NewWorkloadsCreateCatalogueVersionRequestWithBody(server string, catalogueId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "catalogue_id", runtime.ParamLocationPath, catalogueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/workload-catalogue/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewWorkloadsDeleteCatalogueVersionRequest generates requests for WorkloadsDeleteCatalogueVersion
func NewWorkloadsDeleteCatalogueVersionRequest(server string, catalogueId string, versionId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "catalogue_id", runtime.ParamLocationPath, catalogueId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "version_id", runtime.ParamLocationPath, versionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/workload-catalogue/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewWorkloadsReadCatalogueVersionRequest generates requests for WorkloadsReadCatalogueVersion
func NewWorkloadsReadCatalogueVersionRequest(server string, catalogueId string, versionId string, params *WorkloadsReadCatalogueVersionParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "catalogue_id", runtime.ParamLocationPath, catalogueId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "version_id", runtime.ParamLocationPath, versionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/workload-catalogue/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.IncludeParameters != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_parameters", runtime.ParamLocationQuery, *params.IncludeParameters); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewWorkloadsUpdateAllRequest calls the generic WorkloadsUpdateAll builder with application/json body
func NewWorkloadsUpdateAllRequest(server string, body WorkloadsUpdateAllJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewWorkloadsUpdateAllRequestWithBody(server, "application/json", bodyReader)
}

// NewWorkloadsUpdateAllRequestWithBody generates requests for WorkloadsUpdateAll with any type of body
func NewWorkloadsUpdateAllRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/workload-update")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewWorkloadsReadWorkloadsRequest generates requests for WorkloadsReadWorkloads
func NewWorkloadsReadWorkloadsRequest(server string, params *WorkloadsReadWorkloadsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/workloads")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AccountNames != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "account_names", runtime.ParamLocationQuery, *params.AccountNames); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AccountTypes != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "account_types", runtime.ParamLocationQuery, *params.AccountTypes); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AccountIds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "account_ids", runtime.ParamLocationQuery, *params.AccountIds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdFilter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_filter", runtime.ParamLocationQuery, *params.IdFilter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CatalogueNames != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "catalogue_names", runtime.ParamLocationQuery, *params.CatalogueNames); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CatalogueIds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "catalogue_ids", runtime.ParamLocationQuery, *params.CatalogueIds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CatalogueVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "catalogue_version", runtime.ParamLocationQuery, *params.CatalogueVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CatalogueVersionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "catalogue_version_id", runtime.ParamLocationQuery, *params.CatalogueVersionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortOrder != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort_order", runtime.ParamLocationQuery, *params.SortOrder); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewWorkloadsCreateWorkloadRequest calls the generic WorkloadsCreateWorkload builder with application/json body
func NewWorkloadsCreateWorkloadRequest(server string, body WorkloadsCreateWorkloadJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewWorkloadsCreateWorkloadRequestWithBody(server, "application/json", bodyReader)
}

// NewWorkloadsCreateWorkloadRequestWithBody generates requests for WorkloadsCreateWorkload with any type of body
func NewWorkloadsCreateWorkloadRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/workloads")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewWorkloadsDeleteWorkloadRequest generates requests for WorkloadsDeleteWorkload
func NewWorkloadsDeleteWorkloadRequest(server string, workloadId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workload_id", runtime.ParamLocationPath, workloadId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/workloads/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewWorkloadsReadWorkloadRequest generates requests for WorkloadsReadWorkload
func NewWorkloadsReadWorkloadRequest(server string, workloadId string, params *WorkloadsReadWorkloadParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workload_id", runtime.ParamLocationPath, workloadId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/workloads/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AccountNames != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "account_names", runtime.ParamLocationQuery, *params.AccountNames); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AccountTypes != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "account_types", runtime.ParamLocationQuery, *params.AccountTypes); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AccountIds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "account_ids", runtime.ParamLocationQuery, *params.AccountIds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdFilter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id_filter", runtime.ParamLocationQuery, *params.IdFilter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CatalogueNames != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "catalogue_names", runtime.ParamLocationQuery, *params.CatalogueNames); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CatalogueIds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "catalogue_ids", runtime.ParamLocationQuery, *params.CatalogueIds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CatalogueVersion != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "catalogue_version", runtime.ParamLocationQuery, *params.CatalogueVersion); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CatalogueVersionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "catalogue_version_id", runtime.ParamLocationQuery, *params.CatalogueVersionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortOrder != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort_order", runtime.ParamLocationQuery, *params.SortOrder); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeTags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_tags", runtime.ParamLocationQuery, *params.IncludeTags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewWorkloadsUpdateWorkloadRequest calls the generic WorkloadsUpdateWorkload builder with application/json body
func NewWorkloadsUpdateWorkloadRequest(server string, workloadId string, body WorkloadsUpdateWorkloadJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewWorkloadsUpdateWorkloadRequestWithBody(server, workloadId, "application/json", bodyReader)
}

// NewWorkloadsUpdateWorkloadRequestWithBody generates requests for WorkloadsUpdateWorkload with any type of body
func NewWorkloadsUpdateWorkloadRequestWithBody(server string, workloadId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workload_id", runtime.ParamLocationPath, workloadId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/20190206/workloads/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// AccountsUpdateAccountTypeMembers request with any body
	AccountsUpdateAccountTypeMembersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AccountsUpdateAccountTypeMembersResp, error)

	AccountsUpdateAccountTypeMembersWithResponse(ctx context.Context, body AccountsUpdateAccountTypeMembersJSONRequestBody, reqEditors ...RequestEditorFn) (*AccountsUpdateAccountTypeMembersResp, error)

	// AccountsUpdateAccountTypePolicies request with any body
	AccountsUpdateAccountTypePoliciesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AccountsUpdateAccountTypePoliciesResp, error)

	AccountsUpdateAccountTypePoliciesWithResponse(ctx context.Context, body AccountsUpdateAccountTypePoliciesJSONRequestBody, reqEditors ...RequestEditorFn) (*AccountsUpdateAccountTypePoliciesResp, error)

	// AccountsReadAccounts request
	AccountsReadAccountsWithResponse(ctx context.Context, params *AccountsReadAccountsParams, reqEditors ...RequestEditorFn) (*AccountsReadAccountsResp, error)

	// AccountsCreateAccount request with any body
	AccountsCreateAccountWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AccountsCreateAccountResp, error)

	AccountsCreateAccountWithResponse(ctx context.Context, body AccountsCreateAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*AccountsCreateAccountResp, error)

	// AccountsCloseAccount request with any body
	AccountsCloseAccountWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AccountsCloseAccountResp, error)

	AccountsCloseAccountWithResponse(ctx context.Context, body AccountsCloseAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*AccountsCloseAccountResp, error)

	// AccountsDiscoverAccounts request
	AccountsDiscoverAccountsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AccountsDiscoverAccountsResp, error)

	// AccountsDiscoverAccount request
	AccountsDiscoverAccountWithResponse(ctx context.Context, awsAccountId string, reqEditors ...RequestEditorFn) (*AccountsDiscoverAccountResp, error)

	// AccountsOnboardAccount request with any body
	AccountsOnboardAccountWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AccountsOnboardAccountResp, error)

	AccountsOnboardAccountWithResponse(ctx context.Context, body AccountsOnboardAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*AccountsOnboardAccountResp, error)

	// AccountsReadAccountTypes request
	AccountsReadAccountTypesWithResponse(ctx context.Context, params *AccountsReadAccountTypesParams, reqEditors ...RequestEditorFn) (*AccountsReadAccountTypesResp, error)

	// AccountsCreateAccountType request with any body
	AccountsCreateAccountTypeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AccountsCreateAccountTypeResp, error)

	AccountsCreateAccountTypeWithResponse(ctx context.Context, body AccountsCreateAccountTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*AccountsCreateAccountTypeResp, error)

	// AccountsUpdateAccountTypeAccess request with any body
	AccountsUpdateAccountTypeAccessWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AccountsUpdateAccountTypeAccessResp, error)

	AccountsUpdateAccountTypeAccessWithResponse(ctx context.Context, body AccountsUpdateAccountTypeAccessJSONRequestBody, reqEditors ...RequestEditorFn) (*AccountsUpdateAccountTypeAccessResp, error)

	// AccountsDeleteAccountType request
	AccountsDeleteAccountTypeWithResponse(ctx context.Context, accountTypeId string, reqEditors ...RequestEditorFn) (*AccountsDeleteAccountTypeResp, error)

	// AccountsReadAccountType request
	AccountsReadAccountTypeWithResponse(ctx context.Context, accountTypeId string, params *AccountsReadAccountTypeParams, reqEditors ...RequestEditorFn) (*AccountsReadAccountTypeResp, error)

	// AccountsUpdateAccountType request with any body
	AccountsUpdateAccountTypeWithBodyWithResponse(ctx context.Context, accountTypeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AccountsUpdateAccountTypeResp, error)

	AccountsUpdateAccountTypeWithResponse(ctx context.Context, accountTypeId string, body AccountsUpdateAccountTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*AccountsUpdateAccountTypeResp, error)

	// AccountsReadAccount request
	AccountsReadAccountWithResponse(ctx context.Context, accountId string, params *AccountsReadAccountParams, reqEditors ...RequestEditorFn) (*AccountsReadAccountResp, error)

	// AccountsUpdateAccount request with any body
	AccountsUpdateAccountWithBodyWithResponse(ctx context.Context, accountId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AccountsUpdateAccountResp, error)

	AccountsUpdateAccountWithResponse(ctx context.Context, accountId string, body AccountsUpdateAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*AccountsUpdateAccountResp, error)

	// TeamsReadApiTokens request
	TeamsReadApiTokensWithResponse(ctx context.Context, params *TeamsReadApiTokensParams, reqEditors ...RequestEditorFn) (*TeamsReadApiTokensResp, error)

	// TeamsCreateApiToken request with any body
	TeamsCreateApiTokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TeamsCreateApiTokenResp, error)

	TeamsCreateApiTokenWithResponse(ctx context.Context, body TeamsCreateApiTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*TeamsCreateApiTokenResp, error)

	// TeamsDeleteApiToken request
	TeamsDeleteApiTokenWithResponse(ctx context.Context, accessKey string, reqEditors ...RequestEditorFn) (*TeamsDeleteApiTokenResp, error)

	// TeamsReadApiToken request
	TeamsReadApiTokenWithResponse(ctx context.Context, accessKey string, params *TeamsReadApiTokenParams, reqEditors ...RequestEditorFn) (*TeamsReadApiTokenResp, error)

	// TeamsUpdateApiToken request with any body
	TeamsUpdateApiTokenWithBodyWithResponse(ctx context.Context, accessKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TeamsUpdateApiTokenResp, error)

	TeamsUpdateApiTokenWithResponse(ctx context.Context, accessKey string, body TeamsUpdateApiTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*TeamsUpdateApiTokenResp, error)

	// TeamsReadGroups request
	TeamsReadGroupsWithResponse(ctx context.Context, params *TeamsReadGroupsParams, reqEditors ...RequestEditorFn) (*TeamsReadGroupsResp, error)

	// TeamsCreateGroup request with any body
	TeamsCreateGroupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TeamsCreateGroupResp, error)

	TeamsCreateGroupWithResponse(ctx context.Context, body TeamsCreateGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*TeamsCreateGroupResp, error)

	// TeamsUpdateGroupMembers request with any body
	TeamsUpdateGroupMembersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TeamsUpdateGroupMembersResp, error)

	TeamsUpdateGroupMembersWithResponse(ctx context.Context, body TeamsUpdateGroupMembersJSONRequestBody, reqEditors ...RequestEditorFn) (*TeamsUpdateGroupMembersResp, error)

	// TeamsDeleteGroup request
	TeamsDeleteGroupWithResponse(ctx context.Context, groupId string, reqEditors ...RequestEditorFn) (*TeamsDeleteGroupResp, error)

	// TeamsReadGroup request
	TeamsReadGroupWithResponse(ctx context.Context, groupId string, reqEditors ...RequestEditorFn) (*TeamsReadGroupResp, error)

	// TeamsUpdateGroup request with any body
	TeamsUpdateGroupWithBodyWithResponse(ctx context.Context, groupId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TeamsUpdateGroupResp, error)

	TeamsUpdateGroupWithResponse(ctx context.Context, groupId string, body TeamsUpdateGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*TeamsUpdateGroupResp, error)

	// TeamsReadIdamUsers request
	TeamsReadIdamUsersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TeamsReadIdamUsersResp, error)

	// TeamsCreateUser request with any body
	TeamsCreateUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TeamsCreateUserResp, error)

	TeamsCreateUserWithResponse(ctx context.Context, body TeamsCreateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*TeamsCreateUserResp, error)

	// TeamsUpdateUserInvite request
	TeamsUpdateUserInviteWithResponse(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*TeamsUpdateUserInviteResp, error)

	// TeamsUpdateUserPassword request
	TeamsUpdateUserPasswordWithResponse(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*TeamsUpdateUserPasswordResp, error)

	// TeamsReadIdamUser request
	TeamsReadIdamUserWithResponse(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*TeamsReadIdamUserResp, error)

	// TeamsUpdateUser request with any body
	TeamsUpdateUserWithBodyWithResponse(ctx context.Context, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TeamsUpdateUserResp, error)

	TeamsUpdateUserWithResponse(ctx context.Context, userId string, body TeamsUpdateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*TeamsUpdateUserResp, error)

	// NetworkingReadDnsResolvers request
	NetworkingReadDnsResolversWithResponse(ctx context.Context, params *NetworkingReadDnsResolversParams, reqEditors ...RequestEditorFn) (*NetworkingReadDnsResolversResp, error)

	// NetworkingDeleteDnsResolver request
	NetworkingDeleteDnsResolverWithResponse(ctx context.Context, dnsResolverId Uuidv4, reqEditors ...RequestEditorFn) (*NetworkingDeleteDnsResolverResp, error)

	// NetworkingReadDnsResolver request
	NetworkingReadDnsResolverWithResponse(ctx context.Context, dnsResolverId Uuidv4, params *NetworkingReadDnsResolverParams, reqEditors ...RequestEditorFn) (*NetworkingReadDnsResolverResp, error)

	// NetworkingUpdateDnsResolver request with any body
	NetworkingUpdateDnsResolverWithBodyWithResponse(ctx context.Context, dnsResolverId Uuidv4, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NetworkingUpdateDnsResolverResp, error)

	NetworkingUpdateDnsResolverWithResponse(ctx context.Context, dnsResolverId Uuidv4, body NetworkingUpdateDnsResolverJSONRequestBody, reqEditors ...RequestEditorFn) (*NetworkingUpdateDnsResolverResp, error)

	// NetworkingReadResolverDnsRules request
	NetworkingReadResolverDnsRulesWithResponse(ctx context.Context, dnsResolverId Uuidv4, params *NetworkingReadResolverDnsRulesParams, reqEditors ...RequestEditorFn) (*NetworkingReadResolverDnsRulesResp, error)

	// NetworkingCreateDnsRule request with any body
	NetworkingCreateDnsRuleWithBodyWithResponse(ctx context.Context, dnsResolverId Uuidv4, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NetworkingCreateDnsRuleResp, error)

	NetworkingCreateDnsRuleWithResponse(ctx context.Context, dnsResolverId Uuidv4, body NetworkingCreateDnsRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*NetworkingCreateDnsRuleResp, error)

	// NetworkingReadDnsRules request
	NetworkingReadDnsRulesWithResponse(ctx context.Context, params *NetworkingReadDnsRulesParams, reqEditors ...RequestEditorFn) (*NetworkingReadDnsRulesResp, error)

	// NetworkingDeleteDnsRule request
	NetworkingDeleteDnsRuleWithResponse(ctx context.Context, dnsRuleId Uuidv4, reqEditors ...RequestEditorFn) (*NetworkingDeleteDnsRuleResp, error)

	// NetworkingReadDnsRule request
	NetworkingReadDnsRuleWithResponse(ctx context.Context, dnsRuleId Uuidv4, params *NetworkingReadDnsRuleParams, reqEditors ...RequestEditorFn) (*NetworkingReadDnsRuleResp, error)

	// NetworkingUpdateDnsRule request with any body
	NetworkingUpdateDnsRuleWithBodyWithResponse(ctx context.Context, dnsRuleId Uuidv4, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NetworkingUpdateDnsRuleResp, error)

	NetworkingUpdateDnsRuleWithResponse(ctx context.Context, dnsRuleId Uuidv4, body NetworkingUpdateDnsRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*NetworkingUpdateDnsRuleResp, error)

	// NetworkingReadDxAssociations request
	NetworkingReadDxAssociationsWithResponse(ctx context.Context, params *NetworkingReadDxAssociationsParams, reqEditors ...RequestEditorFn) (*NetworkingReadDxAssociationsResp, error)

	// NetworkingDeleteDxAssociation request
	NetworkingDeleteDxAssociationWithResponse(ctx context.Context, dxAssociationId Uuidv4, reqEditors ...RequestEditorFn) (*NetworkingDeleteDxAssociationResp, error)

	// NetworkingReadDxAssociation request
	NetworkingReadDxAssociationWithResponse(ctx context.Context, dxAssociationId Uuidv4, params *NetworkingReadDxAssociationParams, reqEditors ...RequestEditorFn) (*NetworkingReadDxAssociationResp, error)

	// NetworkingUpdateDxAssociation request with any body
	NetworkingUpdateDxAssociationWithBodyWithResponse(ctx context.Context, dxAssociationId Uuidv4, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NetworkingUpdateDxAssociationResp, error)

	NetworkingUpdateDxAssociationWithResponse(ctx context.Context, dxAssociationId Uuidv4, body NetworkingUpdateDxAssociationJSONRequestBody, reqEditors ...RequestEditorFn) (*NetworkingUpdateDxAssociationResp, error)

	// NetworkingReadDxGateways request
	NetworkingReadDxGatewaysWithResponse(ctx context.Context, params *NetworkingReadDxGatewaysParams, reqEditors ...RequestEditorFn) (*NetworkingReadDxGatewaysResp, error)

	// NetworkingDeleteDxGateway request
	NetworkingDeleteDxGatewayWithResponse(ctx context.Context, dxGatewayId Uuidv4, reqEditors ...RequestEditorFn) (*NetworkingDeleteDxGatewayResp, error)

	// NetworkingReadDxGateway request
	NetworkingReadDxGatewayWithResponse(ctx context.Context, dxGatewayId Uuidv4, params *NetworkingReadDxGatewayParams, reqEditors ...RequestEditorFn) (*NetworkingReadDxGatewayResp, error)

	// NetworkingReadGatewayDxAssociations request
	NetworkingReadGatewayDxAssociationsWithResponse(ctx context.Context, dxGatewayId Uuidv4, params *NetworkingReadGatewayDxAssociationsParams, reqEditors ...RequestEditorFn) (*NetworkingReadGatewayDxAssociationsResp, error)

	// NetworkingCreateDxAssociation request with any body
	NetworkingCreateDxAssociationWithBodyWithResponse(ctx context.Context, dxGatewayId Uuidv4, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NetworkingCreateDxAssociationResp, error)

	NetworkingCreateDxAssociationWithResponse(ctx context.Context, dxGatewayId Uuidv4, body NetworkingCreateDxAssociationJSONRequestBody, reqEditors ...RequestEditorFn) (*NetworkingCreateDxAssociationResp, error)

	// NetworkingReadGatewayDxVifs request
	NetworkingReadGatewayDxVifsWithResponse(ctx context.Context, dxGatewayId Uuidv4, params *NetworkingReadGatewayDxVifsParams, reqEditors ...RequestEditorFn) (*NetworkingReadGatewayDxVifsResp, error)

	// NetworkingCreateDxResource request with any body
	NetworkingCreateDxResourceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NetworkingCreateDxResourceResp, error)

	NetworkingCreateDxResourceWithResponse(ctx context.Context, body NetworkingCreateDxResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*NetworkingCreateDxResourceResp, error)

	// NetworkingReadDxVifs request
	NetworkingReadDxVifsWithResponse(ctx context.Context, params *NetworkingReadDxVifsParams, reqEditors ...RequestEditorFn) (*NetworkingReadDxVifsResp, error)

	// NetworkingDeleteDxVif request
	NetworkingDeleteDxVifWithResponse(ctx context.Context, dxVifId Uuidv4, reqEditors ...RequestEditorFn) (*NetworkingDeleteDxVifResp, error)

	// NetworkingReadDxVif request
	NetworkingReadDxVifWithResponse(ctx context.Context, dxVifId Uuidv4, params *NetworkingReadDxVifParams, reqEditors ...RequestEditorFn) (*NetworkingReadDxVifResp, error)

	// NetworkingUpdateDxVif request with any body
	NetworkingUpdateDxVifWithBodyWithResponse(ctx context.Context, dxVifId Uuidv4, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NetworkingUpdateDxVifResp, error)

	NetworkingUpdateDxVifWithResponse(ctx context.Context, dxVifId Uuidv4, body NetworkingUpdateDxVifJSONRequestBody, reqEditors ...RequestEditorFn) (*NetworkingUpdateDxVifResp, error)

	// NetworkingReadDxVifStatus request
	NetworkingReadDxVifStatusWithResponse(ctx context.Context, dxVifId Uuidv4, reqEditors ...RequestEditorFn) (*NetworkingReadDxVifStatusResp, error)

	// NetworkingReadCidrExclusions request
	NetworkingReadCidrExclusionsWithResponse(ctx context.Context, params *NetworkingReadCidrExclusionsParams, reqEditors ...RequestEditorFn) (*NetworkingReadCidrExclusionsResp, error)

	// NetworkingDeleteCidrExclusion request
	NetworkingDeleteCidrExclusionWithResponse(ctx context.Context, exclusionId Uuidv4, reqEditors ...RequestEditorFn) (*NetworkingDeleteCidrExclusionResp, error)

	// NetworkingReadCidrExclusion request
	NetworkingReadCidrExclusionWithResponse(ctx context.Context, exclusionId Uuidv4, params *NetworkingReadCidrExclusionParams, reqEditors ...RequestEditorFn) (*NetworkingReadCidrExclusionResp, error)

	// NetworkingUpdateCidrExclusion request with any body
	NetworkingUpdateCidrExclusionWithBodyWithResponse(ctx context.Context, exclusionId Uuidv4, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NetworkingUpdateCidrExclusionResp, error)

	NetworkingUpdateCidrExclusionWithResponse(ctx context.Context, exclusionId Uuidv4, body NetworkingUpdateCidrExclusionJSONRequestBody, reqEditors ...RequestEditorFn) (*NetworkingUpdateCidrExclusionResp, error)

	// NetworkingReadHubPeerings request
	NetworkingReadHubPeeringsWithResponse(ctx context.Context, params *NetworkingReadHubPeeringsParams, reqEditors ...RequestEditorFn) (*NetworkingReadHubPeeringsResp, error)

	// NetworkingDeleteHubPeering request
	NetworkingDeleteHubPeeringWithResponse(ctx context.Context, hubPeeringId Uuidv4, reqEditors ...RequestEditorFn) (*NetworkingDeleteHubPeeringResp, error)

	// NetworkingReadHubPeering request
	NetworkingReadHubPeeringWithResponse(ctx context.Context, hubPeeringId Uuidv4, params *NetworkingReadHubPeeringParams, reqEditors ...RequestEditorFn) (*NetworkingReadHubPeeringResp, error)

	// NetworkingUpdateHubPeering request with any body
	NetworkingUpdateHubPeeringWithBodyWithResponse(ctx context.Context, hubPeeringId Uuidv4, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NetworkingUpdateHubPeeringResp, error)

	NetworkingUpdateHubPeeringWithResponse(ctx context.Context, hubPeeringId Uuidv4, body NetworkingUpdateHubPeeringJSONRequestBody, reqEditors ...RequestEditorFn) (*NetworkingUpdateHubPeeringResp, error)

	// NetworkingReadHubs request
	NetworkingReadHubsWithResponse(ctx context.Context, params *NetworkingReadHubsParams, reqEditors ...RequestEditorFn) (*NetworkingReadHubsResp, error)

	// NetworkingCreateHub request with any body
	NetworkingCreateHubWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NetworkingCreateHubResp, error)

	NetworkingCreateHubWithResponse(ctx context.Context, body NetworkingCreateHubJSONRequestBody, reqEditors ...RequestEditorFn) (*NetworkingCreateHubResp, error)

	// NetworkingDeleteHub request
	NetworkingDeleteHubWithResponse(ctx context.Context, hubId Uuidv4, reqEditors ...RequestEditorFn) (*NetworkingDeleteHubResp, error)

	// NetworkingReadHub request
	NetworkingReadHubWithResponse(ctx context.Context, hubId Uuidv4, params *NetworkingReadHubParams, reqEditors ...RequestEditorFn) (*NetworkingReadHubResp, error)

	// NetworkingUpdateHub request with any body
	NetworkingUpdateHubWithBodyWithResponse(ctx context.Context, hubId Uuidv4, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NetworkingUpdateHubResp, error)

	NetworkingUpdateHubWithResponse(ctx context.Context, hubId Uuidv4, body NetworkingUpdateHubJSONRequestBody, reqEditors ...RequestEditorFn) (*NetworkingUpdateHubResp, error)

	// NetworkingReadHubDnsResolvers request
	NetworkingReadHubDnsResolversWithResponse(ctx context.Context, hubId Uuidv4, params *NetworkingReadHubDnsResolversParams, reqEditors ...RequestEditorFn) (*NetworkingReadHubDnsResolversResp, error)

	// NetworkingCreateDnsResolver request with any body
	NetworkingCreateDnsResolverWithBodyWithResponse(ctx context.Context, hubId Uuidv4, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NetworkingCreateDnsResolverResp, error)

	NetworkingCreateDnsResolverWithResponse(ctx context.Context, hubId Uuidv4, body NetworkingCreateDnsResolverJSONRequestBody, reqEditors ...RequestEditorFn) (*NetworkingCreateDnsResolverResp, error)

	// NetworkingReadHubDxAssociations request
	NetworkingReadHubDxAssociationsWithResponse(ctx context.Context, hubId Uuidv4, params *NetworkingReadHubDxAssociationsParams, reqEditors ...RequestEditorFn) (*NetworkingReadHubDxAssociationsResp, error)

	// NetworkingReadHubDxGateways request
	NetworkingReadHubDxGatewaysWithResponse(ctx context.Context, hubId Uuidv4, params *NetworkingReadHubDxGatewaysParams, reqEditors ...RequestEditorFn) (*NetworkingReadHubDxGatewaysResp, error)

	// NetworkingReadHubCidrExclusions request
	NetworkingReadHubCidrExclusionsWithResponse(ctx context.Context, hubId Uuidv4, params *NetworkingReadHubCidrExclusionsParams, reqEditors ...RequestEditorFn) (*NetworkingReadHubCidrExclusionsResp, error)

	// NetworkingCreateCidrExclusion request with any body
	NetworkingCreateCidrExclusionWithBodyWithResponse(ctx context.Context, hubId Uuidv4, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NetworkingCreateCidrExclusionResp, error)

	NetworkingCreateCidrExclusionWithResponse(ctx context.Context, hubId Uuidv4, body NetworkingCreateCidrExclusionJSONRequestBody, reqEditors ...RequestEditorFn) (*NetworkingCreateCidrExclusionResp, error)

	// NetworkingReadHubPrefixLists request
	NetworkingReadHubPrefixListsWithResponse(ctx context.Context, hubId Uuidv4, params *NetworkingReadHubPrefixListsParams, reqEditors ...RequestEditorFn) (*NetworkingReadHubPrefixListsResp, error)

	// NetworkingCreateHubPrefixList request with any body
	NetworkingCreateHubPrefixListWithBodyWithResponse(ctx context.Context, hubId Uuidv4, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NetworkingCreateHubPrefixListResp, error)

	NetworkingCreateHubPrefixListWithResponse(ctx context.Context, hubId Uuidv4, body NetworkingCreateHubPrefixListJSONRequestBody, reqEditors ...RequestEditorFn) (*NetworkingCreateHubPrefixListResp, error)

	// NetworkingCreateVpcPrefixList request with any body
	NetworkingCreateVpcPrefixListWithBodyWithResponse(ctx context.Context, hubId Uuidv4, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NetworkingCreateVpcPrefixListResp, error)

	NetworkingCreateVpcPrefixListWithResponse(ctx context.Context, hubId Uuidv4, body NetworkingCreateVpcPrefixListJSONRequestBody, reqEditors ...RequestEditorFn) (*NetworkingCreateVpcPrefixListResp, error)

	// NetworkingReadHubCidrRanges request
	NetworkingReadHubCidrRangesWithResponse(ctx context.Context, hubId Uuidv4, params *NetworkingReadHubCidrRangesParams, reqEditors ...RequestEditorFn) (*NetworkingReadHubCidrRangesResp, error)

	// NetworkingCreateCidrRange request with any body
	NetworkingCreateCidrRangeWithBodyWithResponse(ctx context.Context, hubId Uuidv4, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NetworkingCreateCidrRangeResp, error)

	NetworkingCreateCidrRangeWithResponse(ctx context.Context, hubId Uuidv4, body NetworkingCreateCidrRangeJSONRequestBody, reqEditors ...RequestEditorFn) (*NetworkingCreateCidrRangeResp, error)

	// NetworkingReadHubVpcs request
	NetworkingReadHubVpcsWithResponse(ctx context.Context, hubId Uuidv4, params *NetworkingReadHubVpcsParams, reqEditors ...RequestEditorFn) (*NetworkingReadHubVpcsResp, error)

	// NetworkingCreateVpc request with any body
	NetworkingCreateVpcWithBodyWithResponse(ctx context.Context, hubId Uuidv4, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NetworkingCreateVpcResp, error)

	NetworkingCreateVpcWithResponse(ctx context.Context, hubId Uuidv4, body NetworkingCreateVpcJSONRequestBody, reqEditors ...RequestEditorFn) (*NetworkingCreateVpcResp, error)

	// NetworkingReadHubVpnConnections request
	NetworkingReadHubVpnConnectionsWithResponse(ctx context.Context, hubId Uuidv4, params *NetworkingReadHubVpnConnectionsParams, reqEditors ...RequestEditorFn) (*NetworkingReadHubVpnConnectionsResp, error)

	// NetworkingReadHubVpnCustomerGateways request
	NetworkingReadHubVpnCustomerGatewaysWithResponse(ctx context.Context, hubId Uuidv4, params *NetworkingReadHubVpnCustomerGatewaysParams, reqEditors ...RequestEditorFn) (*NetworkingReadHubVpnCustomerGatewaysResp, error)

	// NetworkingReadHubHubPeerings request
	NetworkingReadHubHubPeeringsWithResponse(ctx context.Context, networkingHubId Uuidv4, params *NetworkingReadHubHubPeeringsParams, reqEditors ...RequestEditorFn) (*NetworkingReadHubHubPeeringsResp, error)

	// NetworkingCreateHubPeering request with any body
	NetworkingCreateHubPeeringWithBodyWithResponse(ctx context.Context, networkingHubId Uuidv4, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NetworkingCreateHubPeeringResp, error)

	NetworkingCreateHubPeeringWithResponse(ctx context.Context, networkingHubId Uuidv4, body NetworkingCreateHubPeeringJSONRequestBody, reqEditors ...RequestEditorFn) (*NetworkingCreateHubPeeringResp, error)

	// NetworkingReadPrefixLists request
	NetworkingReadPrefixListsWithResponse(ctx context.Context, params *NetworkingReadPrefixListsParams, reqEditors ...RequestEditorFn) (*NetworkingReadPrefixListsResp, error)

	// NetworkingUpdateHubPrefixListAssociation request with any body
	NetworkingUpdateHubPrefixListAssociationWithBodyWithResponse(ctx context.Context, prefixListId Uuidv4, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NetworkingUpdateHubPrefixListAssociationResp, error)

	NetworkingUpdateHubPrefixListAssociationWithResponse(ctx context.Context, prefixListId Uuidv4, body NetworkingUpdateHubPrefixListAssociationJSONRequestBody, reqEditors ...RequestEditorFn) (*NetworkingUpdateHubPrefixListAssociationResp, error)

	// NetworkingUpdateVpcPrefixListAssociation request with any body
	NetworkingUpdateVpcPrefixListAssociationWithBodyWithResponse(ctx context.Context, prefixListId Uuidv4, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NetworkingUpdateVpcPrefixListAssociationResp, error)

	NetworkingUpdateVpcPrefixListAssociationWithResponse(ctx context.Context, prefixListId Uuidv4, body NetworkingUpdateVpcPrefixListAssociationJSONRequestBody, reqEditors ...RequestEditorFn) (*NetworkingUpdateVpcPrefixListAssociationResp, error)

	// NetworkingDeletePrefixList request
	NetworkingDeletePrefixListWithResponse(ctx context.Context, prefixListId Uuidv4, reqEditors ...RequestEditorFn) (*NetworkingDeletePrefixListResp, error)

	// NetworkingReadPrefixList request
	NetworkingReadPrefixListWithResponse(ctx context.Context, prefixListId Uuidv4, params *NetworkingReadPrefixListParams, reqEditors ...RequestEditorFn) (*NetworkingReadPrefixListResp, error)

	// NetworkingUpdatePrefixList request with any body
	NetworkingUpdatePrefixListWithBodyWithResponse(ctx context.Context, prefixListId Uuidv4, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NetworkingUpdatePrefixListResp, error)

	NetworkingUpdatePrefixListWithResponse(ctx context.Context, prefixListId Uuidv4, body NetworkingUpdatePrefixListJSONRequestBody, reqEditors ...RequestEditorFn) (*NetworkingUpdatePrefixListResp, error)

	// NetworkingReadCidrRanges request
	NetworkingReadCidrRangesWithResponse(ctx context.Context, params *NetworkingReadCidrRangesParams, reqEditors ...RequestEditorFn) (*NetworkingReadCidrRangesResp, error)

	// NetworkingDeleteCidrRange request
	NetworkingDeleteCidrRangeWithResponse(ctx context.Context, rangeId Uuidv4, reqEditors ...RequestEditorFn) (*NetworkingDeleteCidrRangeResp, error)

	// NetworkingReadCidrRange request
	NetworkingReadCidrRangeWithResponse(ctx context.Context, rangeId Uuidv4, params *NetworkingReadCidrRangeParams, reqEditors ...RequestEditorFn) (*NetworkingReadCidrRangeResp, error)

	// NetworkingUpdateCidrRange request with any body
	NetworkingUpdateCidrRangeWithBodyWithResponse(ctx context.Context, rangeId Uuidv4, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NetworkingUpdateCidrRangeResp, error)

	NetworkingUpdateCidrRangeWithResponse(ctx context.Context, rangeId Uuidv4, body NetworkingUpdateCidrRangeJSONRequestBody, reqEditors ...RequestEditorFn) (*NetworkingUpdateCidrRangeResp, error)

	// NetworkingReadVpcs request
	NetworkingReadVpcsWithResponse(ctx context.Context, params *NetworkingReadVpcsParams, reqEditors ...RequestEditorFn) (*NetworkingReadVpcsResp, error)

	// NetworkingDeleteVpc request
	NetworkingDeleteVpcWithResponse(ctx context.Context, vpcId Uuidv4, reqEditors ...RequestEditorFn) (*NetworkingDeleteVpcResp, error)

	// NetworkingReadVpc request
	NetworkingReadVpcWithResponse(ctx context.Context, vpcId Uuidv4, params *NetworkingReadVpcParams, reqEditors ...RequestEditorFn) (*NetworkingReadVpcResp, error)

	// NetworkingUpdateVpc request with any body
	NetworkingUpdateVpcWithBodyWithResponse(ctx context.Context, vpcId Uuidv4, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NetworkingUpdateVpcResp, error)

	NetworkingUpdateVpcWithResponse(ctx context.Context, vpcId Uuidv4, body NetworkingUpdateVpcJSONRequestBody, reqEditors ...RequestEditorFn) (*NetworkingUpdateVpcResp, error)

	// NetworkingReadVpnConnections request
	NetworkingReadVpnConnectionsWithResponse(ctx context.Context, params *NetworkingReadVpnConnectionsParams, reqEditors ...RequestEditorFn) (*NetworkingReadVpnConnectionsResp, error)

	// NetworkingDeleteVpnConnection request
	NetworkingDeleteVpnConnectionWithResponse(ctx context.Context, vpnConnectionId Uuidv4, reqEditors ...RequestEditorFn) (*NetworkingDeleteVpnConnectionResp, error)

	// NetworkingReadVpnConnection request
	NetworkingReadVpnConnectionWithResponse(ctx context.Context, vpnConnectionId Uuidv4, params *NetworkingReadVpnConnectionParams, reqEditors ...RequestEditorFn) (*NetworkingReadVpnConnectionResp, error)

	// NetworkingUpdateVpnConnection request with any body
	NetworkingUpdateVpnConnectionWithBodyWithResponse(ctx context.Context, vpnConnectionId Uuidv4, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NetworkingUpdateVpnConnectionResp, error)

	NetworkingUpdateVpnConnectionWithResponse(ctx context.Context, vpnConnectionId Uuidv4, body NetworkingUpdateVpnConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*NetworkingUpdateVpnConnectionResp, error)

	// NetworkingReadVpnConnectionStatus request
	NetworkingReadVpnConnectionStatusWithResponse(ctx context.Context, vpnConnectionId Uuidv4, reqEditors ...RequestEditorFn) (*NetworkingReadVpnConnectionStatusResp, error)

	// NetworkingReadVpnCustomerGateways request
	NetworkingReadVpnCustomerGatewaysWithResponse(ctx context.Context, params *NetworkingReadVpnCustomerGatewaysParams, reqEditors ...RequestEditorFn) (*NetworkingReadVpnCustomerGatewaysResp, error)

	// NetworkingCreateVpnCustomerGateway request with any body
	NetworkingCreateVpnCustomerGatewayWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NetworkingCreateVpnCustomerGatewayResp, error)

	NetworkingCreateVpnCustomerGatewayWithResponse(ctx context.Context, body NetworkingCreateVpnCustomerGatewayJSONRequestBody, reqEditors ...RequestEditorFn) (*NetworkingCreateVpnCustomerGatewayResp, error)

	// NetworkingDeleteVpnCustomerGateway request
	NetworkingDeleteVpnCustomerGatewayWithResponse(ctx context.Context, vpnCustomerGatewayId Uuidv4, reqEditors ...RequestEditorFn) (*NetworkingDeleteVpnCustomerGatewayResp, error)

	// NetworkingReadVpnCustomerGateway request
	NetworkingReadVpnCustomerGatewayWithResponse(ctx context.Context, vpnCustomerGatewayId Uuidv4, params *NetworkingReadVpnCustomerGatewayParams, reqEditors ...RequestEditorFn) (*NetworkingReadVpnCustomerGatewayResp, error)

	// NetworkingUpdateVpnCustomerGateway request with any body
	NetworkingUpdateVpnCustomerGatewayWithBodyWithResponse(ctx context.Context, vpnCustomerGatewayId Uuidv4, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NetworkingUpdateVpnCustomerGatewayResp, error)

	NetworkingUpdateVpnCustomerGatewayWithResponse(ctx context.Context, vpnCustomerGatewayId Uuidv4, body NetworkingUpdateVpnCustomerGatewayJSONRequestBody, reqEditors ...RequestEditorFn) (*NetworkingUpdateVpnCustomerGatewayResp, error)

	// NetworkingCreateVpnConnection request with any body
	NetworkingCreateVpnConnectionWithBodyWithResponse(ctx context.Context, vpnCustomerGatewayId Uuidv4, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NetworkingCreateVpnConnectionResp, error)

	NetworkingCreateVpnConnectionWithResponse(ctx context.Context, vpnCustomerGatewayId Uuidv4, body NetworkingCreateVpnConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*NetworkingCreateVpnConnectionResp, error)

	// NetworkingReadGatewayVpnConnections request
	NetworkingReadGatewayVpnConnectionsWithResponse(ctx context.Context, vpnCustomerGatewayId Uuidv4, params *NetworkingReadGatewayVpnConnectionsParams, reqEditors ...RequestEditorFn) (*NetworkingReadGatewayVpnConnectionsResp, error)

	// NetworkingReadDxConnections request
	NetworkingReadDxConnectionsWithResponse(ctx context.Context, accountId Uuidv4, params *NetworkingReadDxConnectionsParams, reqEditors ...RequestEditorFn) (*NetworkingReadDxConnectionsResp, error)

	// OrganisationsReadOrganisations request
	OrganisationsReadOrganisationsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*OrganisationsReadOrganisationsResp, error)

	// OrganisationsReadOrganisation request
	OrganisationsReadOrganisationWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*OrganisationsReadOrganisationResp, error)

	// OrganisationsReadOrganisationalUnits request
	OrganisationsReadOrganisationalUnitsWithResponse(ctx context.Context, params *OrganisationsReadOrganisationalUnitsParams, reqEditors ...RequestEditorFn) (*OrganisationsReadOrganisationalUnitsResp, error)

	// OrganisationsReadOrganisationalUnit request
	OrganisationsReadOrganisationalUnitWithResponse(ctx context.Context, organisationalUnitId string, reqEditors ...RequestEditorFn) (*OrganisationsReadOrganisationalUnitResp, error)

	// OrganisationsReadPolicies request
	OrganisationsReadPoliciesWithResponse(ctx context.Context, params *OrganisationsReadPoliciesParams, reqEditors ...RequestEditorFn) (*OrganisationsReadPoliciesResp, error)

	// OrganisationsCreatePolicy request with any body
	OrganisationsCreatePolicyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OrganisationsCreatePolicyResp, error)

	OrganisationsCreatePolicyWithResponse(ctx context.Context, body OrganisationsCreatePolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*OrganisationsCreatePolicyResp, error)

	// OrganisationsDetachPolicy request
	OrganisationsDetachPolicyWithResponse(ctx context.Context, policyId string, reqEditors ...RequestEditorFn) (*OrganisationsDetachPolicyResp, error)

	// OrganisationsAttachPolicy request with any body
	OrganisationsAttachPolicyWithBodyWithResponse(ctx context.Context, policyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OrganisationsAttachPolicyResp, error)

	OrganisationsAttachPolicyWithResponse(ctx context.Context, policyId string, body OrganisationsAttachPolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*OrganisationsAttachPolicyResp, error)

	// OrganisationsDeletePolicy request
	OrganisationsDeletePolicyWithResponse(ctx context.Context, policyId string, reqEditors ...RequestEditorFn) (*OrganisationsDeletePolicyResp, error)

	// OrganisationsReadPolicy request
	OrganisationsReadPolicyWithResponse(ctx context.Context, policyId string, reqEditors ...RequestEditorFn) (*OrganisationsReadPolicyResp, error)

	// OrganisationsUpdatePolicy request with any body
	OrganisationsUpdatePolicyWithBodyWithResponse(ctx context.Context, policyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OrganisationsUpdatePolicyResp, error)

	OrganisationsUpdatePolicyWithResponse(ctx context.Context, policyId string, body OrganisationsUpdatePolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*OrganisationsUpdatePolicyResp, error)

	// PublicCheckAlias request
	PublicCheckAliasWithResponse(ctx context.Context, alias string, reqEditors ...RequestEditorFn) (*PublicCheckAliasResp, error)

	// PublicReadConfig request
	PublicReadConfigWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PublicReadConfigResp, error)

	// ServicesReadConfigurations request
	ServicesReadConfigurationsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ServicesReadConfigurationsResp, error)

	// ServicesReadSecurityHubConfiguration request
	ServicesReadSecurityHubConfigurationWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ServicesReadSecurityHubConfigurationResp, error)

	// ServicesConfigureSecurityHub request with any body
	ServicesConfigureSecurityHubWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ServicesConfigureSecurityHubResp, error)

	ServicesConfigureSecurityHubWithResponse(ctx context.Context, body ServicesConfigureSecurityHubJSONRequestBody, reqEditors ...RequestEditorFn) (*ServicesConfigureSecurityHubResp, error)

	// TasksReadTask request
	TasksReadTaskWithResponse(ctx context.Context, taskId string, reqEditors ...RequestEditorFn) (*TasksReadTaskResp, error)

	// TeamsReadUsers request
	TeamsReadUsersWithResponse(ctx context.Context, params *TeamsReadUsersParams, reqEditors ...RequestEditorFn) (*TeamsReadUsersResp, error)

	// TeamsFetchCurrentUser request
	TeamsFetchCurrentUserWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TeamsFetchCurrentUserResp, error)

	// TeamsDeleteUser request
	TeamsDeleteUserWithResponse(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*TeamsDeleteUserResp, error)

	// TeamsReadUser request
	TeamsReadUserWithResponse(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*TeamsReadUserResp, error)

	// WorkloadsReadCatalogueItems request
	WorkloadsReadCatalogueItemsWithResponse(ctx context.Context, params *WorkloadsReadCatalogueItemsParams, reqEditors ...RequestEditorFn) (*WorkloadsReadCatalogueItemsResp, error)

	// WorkloadsCreateCatalogueItem request with any body
	WorkloadsCreateCatalogueItemWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WorkloadsCreateCatalogueItemResp, error)

	WorkloadsCreateCatalogueItemWithResponse(ctx context.Context, body WorkloadsCreateCatalogueItemJSONRequestBody, reqEditors ...RequestEditorFn) (*WorkloadsCreateCatalogueItemResp, error)

	// WorkloadsReadCatalogueManifest request
	WorkloadsReadCatalogueManifestWithResponse(ctx context.Context, versionId string, reqEditors ...RequestEditorFn) (*WorkloadsReadCatalogueManifestResp, error)

	// WorkloadsReadCatalogueTemplate request
	WorkloadsReadCatalogueTemplateWithResponse(ctx context.Context, versionId string, name string, reqEditors ...RequestEditorFn) (*WorkloadsReadCatalogueTemplateResp, error)

	// WorkloadsDeleteCatalogueItem request
	WorkloadsDeleteCatalogueItemWithResponse(ctx context.Context, catalogueId string, reqEditors ...RequestEditorFn) (*WorkloadsDeleteCatalogueItemResp, error)

	// WorkloadsReadCatalogueItem request
	WorkloadsReadCatalogueItemWithResponse(ctx context.Context, catalogueId string, params *WorkloadsReadCatalogueItemParams, reqEditors ...RequestEditorFn) (*WorkloadsReadCatalogueItemResp, error)

	// WorkloadsCreateCatalogueVersion request with any body
	WorkloadsCreateCatalogueVersionWithBodyWithResponse(ctx context.Context, catalogueId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WorkloadsCreateCatalogueVersionResp, error)

	WorkloadsCreateCatalogueVersionWithResponse(ctx context.Context, catalogueId string, body WorkloadsCreateCatalogueVersionJSONRequestBody, reqEditors ...RequestEditorFn) (*WorkloadsCreateCatalogueVersionResp, error)

	// WorkloadsDeleteCatalogueVersion request
	WorkloadsDeleteCatalogueVersionWithResponse(ctx context.Context, catalogueId string, versionId string, reqEditors ...RequestEditorFn) (*WorkloadsDeleteCatalogueVersionResp, error)

	// WorkloadsReadCatalogueVersion request
	WorkloadsReadCatalogueVersionWithResponse(ctx context.Context, catalogueId string, versionId string, params *WorkloadsReadCatalogueVersionParams, reqEditors ...RequestEditorFn) (*WorkloadsReadCatalogueVersionResp, error)

	// WorkloadsUpdateAll request with any body
	WorkloadsUpdateAllWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WorkloadsUpdateAllResp, error)

	WorkloadsUpdateAllWithResponse(ctx context.Context, body WorkloadsUpdateAllJSONRequestBody, reqEditors ...RequestEditorFn) (*WorkloadsUpdateAllResp, error)

	// WorkloadsReadWorkloads request
	WorkloadsReadWorkloadsWithResponse(ctx context.Context, params *WorkloadsReadWorkloadsParams, reqEditors ...RequestEditorFn) (*WorkloadsReadWorkloadsResp, error)

	// WorkloadsCreateWorkload request with any body
	WorkloadsCreateWorkloadWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WorkloadsCreateWorkloadResp, error)

	WorkloadsCreateWorkloadWithResponse(ctx context.Context, body WorkloadsCreateWorkloadJSONRequestBody, reqEditors ...RequestEditorFn) (*WorkloadsCreateWorkloadResp, error)

	// WorkloadsDeleteWorkload request
	WorkloadsDeleteWorkloadWithResponse(ctx context.Context, workloadId string, reqEditors ...RequestEditorFn) (*WorkloadsDeleteWorkloadResp, error)

	// WorkloadsReadWorkload request
	WorkloadsReadWorkloadWithResponse(ctx context.Context, workloadId string, params *WorkloadsReadWorkloadParams, reqEditors ...RequestEditorFn) (*WorkloadsReadWorkloadResp, error)

	// WorkloadsUpdateWorkload request with any body
	WorkloadsUpdateWorkloadWithBodyWithResponse(ctx context.Context, workloadId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WorkloadsUpdateWorkloadResp, error)

	WorkloadsUpdateWorkloadWithResponse(ctx context.Context, workloadId string, body WorkloadsUpdateWorkloadJSONRequestBody, reqEditors ...RequestEditorFn) (*WorkloadsUpdateWorkloadResp, error)
}

type AccountsUpdateAccountTypeMembersResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AccountsUpdateAccountTypeMembersEvent
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r AccountsUpdateAccountTypeMembersResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccountsUpdateAccountTypeMembersResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AccountsUpdateAccountTypePoliciesResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AccountsUpdateAccountTypePoliciesEvent
	JSON400      *Error
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r AccountsUpdateAccountTypePoliciesResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccountsUpdateAccountTypePoliciesResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AccountsReadAccountsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AccountsReadAccounts
}

// Status returns HTTPResponse.Status
func (r AccountsReadAccountsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccountsReadAccountsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AccountsCreateAccountResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AccountsCreateAccountResponse
	JSON400      *Error
	JSON409      *Error
}

// Status returns HTTPResponse.Status
func (r AccountsCreateAccountResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccountsCreateAccountResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AccountsCloseAccountResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AccountsCloseAccountResponse
	JSON400      *Error
	JSON409      *Error
}

// Status returns HTTPResponse.Status
func (r AccountsCloseAccountResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccountsCloseAccountResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AccountsDiscoverAccountsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AccountsDiscoverAccountsResponse
	JSON400      *Error
	JSON403      *Error
	JSON404      *Error
	JSON409      *Error
}

// Status returns HTTPResponse.Status
func (r AccountsDiscoverAccountsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccountsDiscoverAccountsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AccountsDiscoverAccountResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AccountsDiscoverAccountsResponse
	JSON400      *Error
	JSON403      *Error
	JSON404      *Error
	JSON409      *Error
}

// Status returns HTTPResponse.Status
func (r AccountsDiscoverAccountResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccountsDiscoverAccountResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AccountsOnboardAccountResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AccountsUpdateAccountResponse
	JSON400      *Error
	JSON404      *Error
	JSON409      *Error
}

// Status returns HTTPResponse.Status
func (r AccountsOnboardAccountResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccountsOnboardAccountResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AccountsReadAccountTypesResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AccountsReadAccountTypes
}

// Status returns HTTPResponse.Status
func (r AccountsReadAccountTypesResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccountsReadAccountTypesResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AccountsCreateAccountTypeResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AccountsCreateAccountTypeResponse
	JSON400      *Error
	JSON403      *Error
}

// Status returns HTTPResponse.Status
func (r AccountsCreateAccountTypeResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccountsCreateAccountTypeResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AccountsUpdateAccountTypeAccessResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AccountsUpdateAccountTypeAccessEvent
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r AccountsUpdateAccountTypeAccessResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccountsUpdateAccountTypeAccessResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AccountsDeleteAccountTypeResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AccountsDeleteAccountTypeResponse
	JSON400      *Error
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r AccountsDeleteAccountTypeResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccountsDeleteAccountTypeResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AccountsReadAccountTypeResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AccountsReadAccountTypes
}

// Status returns HTTPResponse.Status
func (r AccountsReadAccountTypeResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccountsReadAccountTypeResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AccountsUpdateAccountTypeResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AccountsUpdateAccountTypeResponse
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r AccountsUpdateAccountTypeResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccountsUpdateAccountTypeResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AccountsReadAccountResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AccountsReadAccounts
}

// Status returns HTTPResponse.Status
func (r AccountsReadAccountResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccountsReadAccountResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AccountsUpdateAccountResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AccountsUpdateAccountResponse
	JSON400      *Error
	JSON403      *Error
	JSON404      *Error
	JSON409      *Error
}

// Status returns HTTPResponse.Status
func (r AccountsUpdateAccountResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AccountsUpdateAccountResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TeamsReadApiTokensResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TeamsReadApiTokens
}

// Status returns HTTPResponse.Status
func (r TeamsReadApiTokensResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TeamsReadApiTokensResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TeamsCreateApiTokenResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TeamsCreateApiTokenResponse
	JSON400      *Error
	JSON403      *Error
}

// Status returns HTTPResponse.Status
func (r TeamsCreateApiTokenResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TeamsCreateApiTokenResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TeamsDeleteApiTokenResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TeamsDeleteApiTokenResponse
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r TeamsDeleteApiTokenResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TeamsDeleteApiTokenResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TeamsReadApiTokenResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TeamsReadApiTokens
}

// Status returns HTTPResponse.Status
func (r TeamsReadApiTokenResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TeamsReadApiTokenResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TeamsUpdateApiTokenResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TeamsUpdateApiTokenResponse
	JSON400      *Error
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r TeamsUpdateApiTokenResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TeamsUpdateApiTokenResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TeamsReadGroupsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TeamsReadGroupsResponse
}

// Status returns HTTPResponse.Status
func (r TeamsReadGroupsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TeamsReadGroupsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TeamsCreateGroupResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TeamsCreateGroupEvent
	JSON400      *Error
	JSON409      *StaxEvent
}

// Status returns HTTPResponse.Status
func (r TeamsCreateGroupResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TeamsCreateGroupResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TeamsUpdateGroupMembersResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TeamsUpdateGroupMembersEvent
	JSON400      *Error
	JSON404      *StaxEvent
}

// Status returns HTTPResponse.Status
func (r TeamsUpdateGroupMembersResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TeamsUpdateGroupMembersResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TeamsDeleteGroupResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TeamsDeleteGroupEvent
	JSON400      *StaxEvent
	JSON404      *StaxEvent
}

// Status returns HTTPResponse.Status
func (r TeamsDeleteGroupResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TeamsDeleteGroupResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TeamsReadGroupResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TeamsReadGroupsResponse
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r TeamsReadGroupResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TeamsReadGroupResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TeamsUpdateGroupResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TeamsUpdateGroupEvent
	JSON400      *Error
	JSON404      *StaxEvent
	JSON409      *StaxEvent
}

// Status returns HTTPResponse.Status
func (r TeamsUpdateGroupResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TeamsUpdateGroupResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TeamsReadIdamUsersResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TeamsReadIdamUsers
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r TeamsReadIdamUsersResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TeamsReadIdamUsersResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TeamsCreateUserResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TeamsCreateUserEvent
	JSON403      *Error
}

// Status returns HTTPResponse.Status
func (r TeamsCreateUserResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TeamsCreateUserResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TeamsUpdateUserInviteResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TeamsUpdateUserInviteEvent
	JSON400      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r TeamsUpdateUserInviteResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TeamsUpdateUserInviteResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TeamsUpdateUserPasswordResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TeamsUpdateUserPasswordEvent
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r TeamsUpdateUserPasswordResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TeamsUpdateUserPasswordResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TeamsReadIdamUserResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TeamsReadIdamUsers
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r TeamsReadIdamUserResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TeamsReadIdamUserResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TeamsUpdateUserResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TeamsUpdateUserEvent
	JSON400      *Error
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r TeamsUpdateUserResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TeamsUpdateUserResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkingReadDnsResolversResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NetworkingReadDnsResolvers
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r NetworkingReadDnsResolversResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkingReadDnsResolversResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkingDeleteDnsResolverResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NetworkingDeleteDnsResolverEvent
	JSON400      *Error
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r NetworkingDeleteDnsResolverResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkingDeleteDnsResolverResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkingReadDnsResolverResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NetworkingReadDnsResolvers
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r NetworkingReadDnsResolverResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkingReadDnsResolverResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkingUpdateDnsResolverResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NetworkingUpdateDnsResolverEvent
	JSON400      *Error
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r NetworkingUpdateDnsResolverResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkingUpdateDnsResolverResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkingReadResolverDnsRulesResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NetworkingReadDnsRules
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r NetworkingReadResolverDnsRulesResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkingReadResolverDnsRulesResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkingCreateDnsRuleResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NetworkingCreateDnsRuleEvent
	JSON400      *Error
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r NetworkingCreateDnsRuleResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkingCreateDnsRuleResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkingReadDnsRulesResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NetworkingReadDnsRules
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r NetworkingReadDnsRulesResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkingReadDnsRulesResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkingDeleteDnsRuleResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NetworkingDeleteDnsRuleEvent
	JSON400      *Error
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r NetworkingDeleteDnsRuleResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkingDeleteDnsRuleResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkingReadDnsRuleResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NetworkingReadDnsRules
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r NetworkingReadDnsRuleResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkingReadDnsRuleResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkingUpdateDnsRuleResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NetworkingUpdateDnsRuleEvent
	JSON400      *Error
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r NetworkingUpdateDnsRuleResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkingUpdateDnsRuleResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkingReadDxAssociationsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NetworkingReadDxAssociations
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r NetworkingReadDxAssociationsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkingReadDxAssociationsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkingDeleteDxAssociationResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NetworkingDeleteDxAssociationEvent
	JSON400      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r NetworkingDeleteDxAssociationResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkingDeleteDxAssociationResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkingReadDxAssociationResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NetworkingReadDxAssociations
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r NetworkingReadDxAssociationResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkingReadDxAssociationResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkingUpdateDxAssociationResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NetworkingUpdateDxAssociationEvent
	JSON400      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r NetworkingUpdateDxAssociationResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkingUpdateDxAssociationResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkingReadDxGatewaysResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NetworkingReadDxGateways
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r NetworkingReadDxGatewaysResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkingReadDxGatewaysResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkingDeleteDxGatewayResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NetworkingDeleteDxGatewayEvent
	JSON400      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r NetworkingDeleteDxGatewayResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkingDeleteDxGatewayResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkingReadDxGatewayResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NetworkingReadDxGateways
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r NetworkingReadDxGatewayResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkingReadDxGatewayResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkingReadGatewayDxAssociationsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NetworkingReadDxAssociations
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r NetworkingReadGatewayDxAssociationsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkingReadGatewayDxAssociationsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkingCreateDxAssociationResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NetworkingCreateDxAssociationEvent
	JSON400      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r NetworkingCreateDxAssociationResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkingCreateDxAssociationResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkingReadGatewayDxVifsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NetworkingReadDxVifs
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r NetworkingReadGatewayDxVifsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkingReadGatewayDxVifsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkingCreateDxResourceResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NetworkingCreateDxResourceEvent
	JSON400      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r NetworkingCreateDxResourceResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkingCreateDxResourceResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkingReadDxVifsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NetworkingReadDxVifs
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r NetworkingReadDxVifsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkingReadDxVifsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkingDeleteDxVifResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NetworkingDeleteDxVifEvent
	JSON400      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r NetworkingDeleteDxVifResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkingDeleteDxVifResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkingReadDxVifResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NetworkingReadDxVifs
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r NetworkingReadDxVifResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkingReadDxVifResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkingUpdateDxVifResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NetworkingUpdateDxVifEvent
	JSON400      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r NetworkingUpdateDxVifResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkingUpdateDxVifResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkingReadDxVifStatusResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NetworkingReadDxVifStatus
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r NetworkingReadDxVifStatusResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkingReadDxVifStatusResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkingReadCidrExclusionsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NetworkingReadCidrExclusions
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r NetworkingReadCidrExclusionsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkingReadCidrExclusionsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkingDeleteCidrExclusionResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NetworkingReadCidrExclusions
	JSON400      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r NetworkingDeleteCidrExclusionResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkingDeleteCidrExclusionResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkingReadCidrExclusionResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NetworkingReadCidrExclusions
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r NetworkingReadCidrExclusionResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkingReadCidrExclusionResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkingUpdateCidrExclusionResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NetworkingUpdateCidrExclusion
	JSON400      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r NetworkingUpdateCidrExclusionResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkingUpdateCidrExclusionResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkingReadHubPeeringsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NetworkingReadHubPeerings
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r NetworkingReadHubPeeringsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkingReadHubPeeringsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkingDeleteHubPeeringResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NetworkingDeleteHubPeeringEvent
	JSON400      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r NetworkingDeleteHubPeeringResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkingDeleteHubPeeringResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkingReadHubPeeringResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NetworkingReadHubPeerings
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r NetworkingReadHubPeeringResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkingReadHubPeeringResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkingUpdateHubPeeringResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NetworkingUpdateHubPeeringEvent
	JSON400      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r NetworkingUpdateHubPeeringResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkingUpdateHubPeeringResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkingReadHubsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NetworkingReadHubs
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r NetworkingReadHubsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkingReadHubsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkingCreateHubResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NetworkingCreateHubEvent
	JSON400      *Error
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r NetworkingCreateHubResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkingCreateHubResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkingDeleteHubResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NetworkingDeleteHubEvent
	JSON400      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r NetworkingDeleteHubResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkingDeleteHubResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkingReadHubResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NetworkingReadHubs
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r NetworkingReadHubResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkingReadHubResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkingUpdateHubResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NetworkingUpdateHubEvent
	JSON400      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r NetworkingUpdateHubResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkingUpdateHubResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkingReadHubDnsResolversResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NetworkingReadDnsResolvers
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r NetworkingReadHubDnsResolversResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkingReadHubDnsResolversResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkingCreateDnsResolverResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NetworkingCreateDnsResolverEvent
	JSON400      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r NetworkingCreateDnsResolverResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkingCreateDnsResolverResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkingReadHubDxAssociationsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NetworkingReadDxAssociations
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r NetworkingReadHubDxAssociationsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkingReadHubDxAssociationsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkingReadHubDxGatewaysResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NetworkingReadDxGateways
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r NetworkingReadHubDxGatewaysResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkingReadHubDxGatewaysResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkingReadHubCidrExclusionsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NetworkingReadCidrExclusions
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r NetworkingReadHubCidrExclusionsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkingReadHubCidrExclusionsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkingCreateCidrExclusionResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NetworkingReadCidrExclusions
	JSON400      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r NetworkingCreateCidrExclusionResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkingCreateCidrExclusionResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkingReadHubPrefixListsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NetworkingReadPrefixLists
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r NetworkingReadHubPrefixListsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkingReadHubPrefixListsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkingCreateHubPrefixListResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NetworkingCreatePrefixListEvent
	JSON400      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r NetworkingCreateHubPrefixListResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkingCreateHubPrefixListResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkingCreateVpcPrefixListResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NetworkingCreatePrefixListEvent
	JSON400      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r NetworkingCreateVpcPrefixListResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkingCreateVpcPrefixListResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkingReadHubCidrRangesResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NetworkingReadCidrRanges
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r NetworkingReadHubCidrRangesResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkingReadHubCidrRangesResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkingCreateCidrRangeResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NetworkingReadCidrRanges
	JSON400      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r NetworkingCreateCidrRangeResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkingCreateCidrRangeResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkingReadHubVpcsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NetworkingReadVpcs
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r NetworkingReadHubVpcsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkingReadHubVpcsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkingCreateVpcResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NetworkingCreateVpcEvent
	JSON400      *Error
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r NetworkingCreateVpcResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkingCreateVpcResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkingReadHubVpnConnectionsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NetworkingReadVpnConnections
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r NetworkingReadHubVpnConnectionsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkingReadHubVpnConnectionsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkingReadHubVpnCustomerGatewaysResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NetworkingReadVpnCustomerGateways
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r NetworkingReadHubVpnCustomerGatewaysResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkingReadHubVpnCustomerGatewaysResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkingReadHubHubPeeringsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NetworkingReadHubPeerings
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r NetworkingReadHubHubPeeringsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkingReadHubHubPeeringsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkingCreateHubPeeringResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NetworkingCreateHubPeeringEvent
	JSON400      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r NetworkingCreateHubPeeringResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkingCreateHubPeeringResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkingReadPrefixListsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NetworkingReadPrefixLists
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r NetworkingReadPrefixListsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkingReadPrefixListsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkingUpdateHubPrefixListAssociationResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NetworkingUpdatePrefixListAssociationEvent
	JSON400      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r NetworkingUpdateHubPrefixListAssociationResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkingUpdateHubPrefixListAssociationResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkingUpdateVpcPrefixListAssociationResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NetworkingUpdatePrefixListAssociationEvent
	JSON400      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r NetworkingUpdateVpcPrefixListAssociationResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkingUpdateVpcPrefixListAssociationResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkingDeletePrefixListResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NetworkingDeletePrefixListEvent
	JSON400      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r NetworkingDeletePrefixListResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkingDeletePrefixListResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkingReadPrefixListResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NetworkingReadPrefixLists
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r NetworkingReadPrefixListResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkingReadPrefixListResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkingUpdatePrefixListResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NetworkingUpdatePrefixListEvent
	JSON400      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r NetworkingUpdatePrefixListResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkingUpdatePrefixListResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkingReadCidrRangesResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NetworkingReadCidrRanges
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r NetworkingReadCidrRangesResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkingReadCidrRangesResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkingDeleteCidrRangeResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NetworkingReadCidrRanges
	JSON400      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r NetworkingDeleteCidrRangeResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkingDeleteCidrRangeResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkingReadCidrRangeResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NetworkingReadCidrRanges
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r NetworkingReadCidrRangeResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkingReadCidrRangeResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkingUpdateCidrRangeResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NetworkingUpdateCidrRange
	JSON400      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r NetworkingUpdateCidrRangeResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkingUpdateCidrRangeResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkingReadVpcsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NetworkingReadVpcs
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r NetworkingReadVpcsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkingReadVpcsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkingDeleteVpcResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NetworkingDeleteVpcEvent
	JSON400      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r NetworkingDeleteVpcResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkingDeleteVpcResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkingReadVpcResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NetworkingReadVpcs
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r NetworkingReadVpcResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkingReadVpcResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkingUpdateVpcResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NetworkingUpdateVpcEvent
	JSON400      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r NetworkingUpdateVpcResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkingUpdateVpcResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkingReadVpnConnectionsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NetworkingReadVpnConnections
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r NetworkingReadVpnConnectionsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkingReadVpnConnectionsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkingDeleteVpnConnectionResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NetworkingDeleteVpnConnectionEvent
	JSON400      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r NetworkingDeleteVpnConnectionResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkingDeleteVpnConnectionResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkingReadVpnConnectionResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NetworkingReadVpnConnections
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r NetworkingReadVpnConnectionResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkingReadVpnConnectionResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkingUpdateVpnConnectionResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NetworkingUpdateVpnConnectionEvent
	JSON400      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r NetworkingUpdateVpnConnectionResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkingUpdateVpnConnectionResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkingReadVpnConnectionStatusResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NetworkingReadVpnConnectionStatus
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r NetworkingReadVpnConnectionStatusResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkingReadVpnConnectionStatusResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkingReadVpnCustomerGatewaysResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NetworkingReadVpnCustomerGateways
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r NetworkingReadVpnCustomerGatewaysResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkingReadVpnCustomerGatewaysResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkingCreateVpnCustomerGatewayResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NetworkingCreateVpnCustomerGatewayEvent
	JSON400      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r NetworkingCreateVpnCustomerGatewayResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkingCreateVpnCustomerGatewayResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkingDeleteVpnCustomerGatewayResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NetworkingDeleteVpnCustomerGatewayEvent
	JSON400      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r NetworkingDeleteVpnCustomerGatewayResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkingDeleteVpnCustomerGatewayResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkingReadVpnCustomerGatewayResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NetworkingReadVpnCustomerGateways
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r NetworkingReadVpnCustomerGatewayResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkingReadVpnCustomerGatewayResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkingUpdateVpnCustomerGatewayResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NetworkingUpdateVpnCustomerGatewayEvent
	JSON400      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r NetworkingUpdateVpnCustomerGatewayResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkingUpdateVpnCustomerGatewayResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkingCreateVpnConnectionResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NetworkingCreateVpnConnectionEvent
	JSON400      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r NetworkingCreateVpnConnectionResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkingCreateVpnConnectionResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkingReadGatewayVpnConnectionsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NetworkingReadVpnConnections
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r NetworkingReadGatewayVpnConnectionsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkingReadGatewayVpnConnectionsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NetworkingReadDxConnectionsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NetworkingReadDxConnections
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r NetworkingReadDxConnectionsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NetworkingReadDxConnectionsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OrganisationsReadOrganisationsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrganisationsReadOrganisations
}

// Status returns HTTPResponse.Status
func (r OrganisationsReadOrganisationsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OrganisationsReadOrganisationsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OrganisationsReadOrganisationResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrganisationsReadOrganisations
}

// Status returns HTTPResponse.Status
func (r OrganisationsReadOrganisationResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OrganisationsReadOrganisationResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OrganisationsReadOrganisationalUnitsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrganisationsReadOrganisationalUnits
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r OrganisationsReadOrganisationalUnitsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OrganisationsReadOrganisationalUnitsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OrganisationsReadOrganisationalUnitResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrganisationsReadOrganisationalUnits
}

// Status returns HTTPResponse.Status
func (r OrganisationsReadOrganisationalUnitResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OrganisationsReadOrganisationalUnitResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OrganisationsReadPoliciesResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrganisationsReadPolicies
}

// Status returns HTTPResponse.Status
func (r OrganisationsReadPoliciesResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OrganisationsReadPoliciesResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OrganisationsCreatePolicyResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrganisationsCreatePolicyEvent
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r OrganisationsCreatePolicyResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OrganisationsCreatePolicyResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OrganisationsDetachPolicyResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrganisationsDetachPolicyEvent
	JSON400      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r OrganisationsDetachPolicyResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OrganisationsDetachPolicyResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OrganisationsAttachPolicyResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrganisationsAttachPolicyEvent
	JSON400      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r OrganisationsAttachPolicyResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OrganisationsAttachPolicyResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OrganisationsDeletePolicyResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrganisationsDeletePolicyEvent
	JSON400      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r OrganisationsDeletePolicyResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OrganisationsDeletePolicyResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OrganisationsReadPolicyResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrganisationsReadPolicies
}

// Status returns HTTPResponse.Status
func (r OrganisationsReadPolicyResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OrganisationsReadPolicyResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OrganisationsUpdatePolicyResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrganisationsUpdatePolicyEvent
	JSON400      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r OrganisationsUpdatePolicyResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OrganisationsUpdatePolicyResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PublicCheckAliasResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PublicCheckAlias
	JSON409      *PublicCheckAlias
}

// Status returns HTTPResponse.Status
func (r PublicCheckAliasResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PublicCheckAliasResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PublicReadConfigResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PublicReadConfig
}

// Status returns HTTPResponse.Status
func (r PublicReadConfigResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PublicReadConfigResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ServicesReadConfigurationsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ServicesReadConfigurations
}

// Status returns HTTPResponse.Status
func (r ServicesReadConfigurationsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ServicesReadConfigurationsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ServicesReadSecurityHubConfigurationResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ServicesReadSecurityHubConfiguration
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r ServicesReadSecurityHubConfigurationResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ServicesReadSecurityHubConfigurationResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ServicesConfigureSecurityHubResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ServicesConfigureSecurityHubEvent
	JSON400      *Error
	JSON409      *Error
}

// Status returns HTTPResponse.Status
func (r ServicesConfigureSecurityHubResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ServicesConfigureSecurityHubResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TasksReadTaskResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TasksReadTask
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r TasksReadTaskResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TasksReadTaskResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TeamsReadUsersResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TeamsReadUsers
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r TeamsReadUsersResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TeamsReadUsersResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TeamsFetchCurrentUserResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TeamsReadUsers
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r TeamsFetchCurrentUserResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TeamsFetchCurrentUserResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TeamsDeleteUserResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TeamsDeleteUserResponse
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r TeamsDeleteUserResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TeamsDeleteUserResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TeamsReadUserResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TeamsReadUsers
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r TeamsReadUserResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TeamsReadUserResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WorkloadsReadCatalogueItemsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WorkloadsReadCatalogueItems
	JSON400      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r WorkloadsReadCatalogueItemsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkloadsReadCatalogueItemsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WorkloadsCreateCatalogueItemResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreateCatalogueEvent
	JSON400      *Error
	JSON403      *Error
}

// Status returns HTTPResponse.Status
func (r WorkloadsCreateCatalogueItemResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkloadsCreateCatalogueItemResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WorkloadsReadCatalogueManifestResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WorkloadsReadCatalogueManifest
	JSON400      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r WorkloadsReadCatalogueManifestResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkloadsReadCatalogueManifestResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WorkloadsReadCatalogueTemplateResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WorkloadsReadCatalogueTemplate
	JSON400      *Error
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r WorkloadsReadCatalogueTemplateResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkloadsReadCatalogueTemplateResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WorkloadsDeleteCatalogueItemResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeleteCatalogueEvent
	JSON400      *Error
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r WorkloadsDeleteCatalogueItemResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkloadsDeleteCatalogueItemResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WorkloadsReadCatalogueItemResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WorkloadsReadCatalogueItems
	JSON400      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r WorkloadsReadCatalogueItemResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkloadsReadCatalogueItemResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WorkloadsCreateCatalogueVersionResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreateVersionEvent
	JSON400      *Error
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r WorkloadsCreateCatalogueVersionResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkloadsCreateCatalogueVersionResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WorkloadsDeleteCatalogueVersionResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeleteVersionEvent
	JSON400      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r WorkloadsDeleteCatalogueVersionResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkloadsDeleteCatalogueVersionResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WorkloadsReadCatalogueVersionResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WorkloadsReadCatalogueVersion
	JSON400      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r WorkloadsReadCatalogueVersionResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkloadsReadCatalogueVersionResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WorkloadsUpdateAllResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StaxEvent
	JSON400      *Error
	JSON403      *Error
}

// Status returns HTTPResponse.Status
func (r WorkloadsUpdateAllResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkloadsUpdateAllResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WorkloadsReadWorkloadsResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WorkloadsReadWorkloadsResponse
	JSON400      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r WorkloadsReadWorkloadsResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkloadsReadWorkloadsResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WorkloadsCreateWorkloadResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreateWorkloadEvent
	JSON400      *StaxEvent
}

// Status returns HTTPResponse.Status
func (r WorkloadsCreateWorkloadResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkloadsCreateWorkloadResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WorkloadsDeleteWorkloadResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeleteWorkloadEvent
	JSON400      *StaxEvent
	JSON403      *StaxEvent
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r WorkloadsDeleteWorkloadResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkloadsDeleteWorkloadResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WorkloadsReadWorkloadResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WorkloadsReadWorkloadsResponse
	JSON400      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r WorkloadsReadWorkloadResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkloadsReadWorkloadResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WorkloadsUpdateWorkloadResp struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UpdateWorkloadEvent
	JSON400      *StaxEvent
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r WorkloadsUpdateWorkloadResp) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkloadsUpdateWorkloadResp) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// AccountsUpdateAccountTypeMembersWithBodyWithResponse request with arbitrary body returning *AccountsUpdateAccountTypeMembersResp
func (c *ClientWithResponses) AccountsUpdateAccountTypeMembersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AccountsUpdateAccountTypeMembersResp, error) {
	rsp, err := c.AccountsUpdateAccountTypeMembersWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountsUpdateAccountTypeMembersResp(rsp)
}

func (c *ClientWithResponses) AccountsUpdateAccountTypeMembersWithResponse(ctx context.Context, body AccountsUpdateAccountTypeMembersJSONRequestBody, reqEditors ...RequestEditorFn) (*AccountsUpdateAccountTypeMembersResp, error) {
	rsp, err := c.AccountsUpdateAccountTypeMembers(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountsUpdateAccountTypeMembersResp(rsp)
}

// AccountsUpdateAccountTypePoliciesWithBodyWithResponse request with arbitrary body returning *AccountsUpdateAccountTypePoliciesResp
func (c *ClientWithResponses) AccountsUpdateAccountTypePoliciesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AccountsUpdateAccountTypePoliciesResp, error) {
	rsp, err := c.AccountsUpdateAccountTypePoliciesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountsUpdateAccountTypePoliciesResp(rsp)
}

func (c *ClientWithResponses) AccountsUpdateAccountTypePoliciesWithResponse(ctx context.Context, body AccountsUpdateAccountTypePoliciesJSONRequestBody, reqEditors ...RequestEditorFn) (*AccountsUpdateAccountTypePoliciesResp, error) {
	rsp, err := c.AccountsUpdateAccountTypePolicies(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountsUpdateAccountTypePoliciesResp(rsp)
}

// AccountsReadAccountsWithResponse request returning *AccountsReadAccountsResp
func (c *ClientWithResponses) AccountsReadAccountsWithResponse(ctx context.Context, params *AccountsReadAccountsParams, reqEditors ...RequestEditorFn) (*AccountsReadAccountsResp, error) {
	rsp, err := c.AccountsReadAccounts(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountsReadAccountsResp(rsp)
}

// AccountsCreateAccountWithBodyWithResponse request with arbitrary body returning *AccountsCreateAccountResp
func (c *ClientWithResponses) AccountsCreateAccountWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AccountsCreateAccountResp, error) {
	rsp, err := c.AccountsCreateAccountWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountsCreateAccountResp(rsp)
}

func (c *ClientWithResponses) AccountsCreateAccountWithResponse(ctx context.Context, body AccountsCreateAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*AccountsCreateAccountResp, error) {
	rsp, err := c.AccountsCreateAccount(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountsCreateAccountResp(rsp)
}

// AccountsCloseAccountWithBodyWithResponse request with arbitrary body returning *AccountsCloseAccountResp
func (c *ClientWithResponses) AccountsCloseAccountWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AccountsCloseAccountResp, error) {
	rsp, err := c.AccountsCloseAccountWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountsCloseAccountResp(rsp)
}

func (c *ClientWithResponses) AccountsCloseAccountWithResponse(ctx context.Context, body AccountsCloseAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*AccountsCloseAccountResp, error) {
	rsp, err := c.AccountsCloseAccount(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountsCloseAccountResp(rsp)
}

// AccountsDiscoverAccountsWithResponse request returning *AccountsDiscoverAccountsResp
func (c *ClientWithResponses) AccountsDiscoverAccountsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AccountsDiscoverAccountsResp, error) {
	rsp, err := c.AccountsDiscoverAccounts(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountsDiscoverAccountsResp(rsp)
}

// AccountsDiscoverAccountWithResponse request returning *AccountsDiscoverAccountResp
func (c *ClientWithResponses) AccountsDiscoverAccountWithResponse(ctx context.Context, awsAccountId string, reqEditors ...RequestEditorFn) (*AccountsDiscoverAccountResp, error) {
	rsp, err := c.AccountsDiscoverAccount(ctx, awsAccountId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountsDiscoverAccountResp(rsp)
}

// AccountsOnboardAccountWithBodyWithResponse request with arbitrary body returning *AccountsOnboardAccountResp
func (c *ClientWithResponses) AccountsOnboardAccountWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AccountsOnboardAccountResp, error) {
	rsp, err := c.AccountsOnboardAccountWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountsOnboardAccountResp(rsp)
}

func (c *ClientWithResponses) AccountsOnboardAccountWithResponse(ctx context.Context, body AccountsOnboardAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*AccountsOnboardAccountResp, error) {
	rsp, err := c.AccountsOnboardAccount(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountsOnboardAccountResp(rsp)
}

// AccountsReadAccountTypesWithResponse request returning *AccountsReadAccountTypesResp
func (c *ClientWithResponses) AccountsReadAccountTypesWithResponse(ctx context.Context, params *AccountsReadAccountTypesParams, reqEditors ...RequestEditorFn) (*AccountsReadAccountTypesResp, error) {
	rsp, err := c.AccountsReadAccountTypes(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountsReadAccountTypesResp(rsp)
}

// AccountsCreateAccountTypeWithBodyWithResponse request with arbitrary body returning *AccountsCreateAccountTypeResp
func (c *ClientWithResponses) AccountsCreateAccountTypeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AccountsCreateAccountTypeResp, error) {
	rsp, err := c.AccountsCreateAccountTypeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountsCreateAccountTypeResp(rsp)
}

func (c *ClientWithResponses) AccountsCreateAccountTypeWithResponse(ctx context.Context, body AccountsCreateAccountTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*AccountsCreateAccountTypeResp, error) {
	rsp, err := c.AccountsCreateAccountType(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountsCreateAccountTypeResp(rsp)
}

// AccountsUpdateAccountTypeAccessWithBodyWithResponse request with arbitrary body returning *AccountsUpdateAccountTypeAccessResp
func (c *ClientWithResponses) AccountsUpdateAccountTypeAccessWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AccountsUpdateAccountTypeAccessResp, error) {
	rsp, err := c.AccountsUpdateAccountTypeAccessWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountsUpdateAccountTypeAccessResp(rsp)
}

func (c *ClientWithResponses) AccountsUpdateAccountTypeAccessWithResponse(ctx context.Context, body AccountsUpdateAccountTypeAccessJSONRequestBody, reqEditors ...RequestEditorFn) (*AccountsUpdateAccountTypeAccessResp, error) {
	rsp, err := c.AccountsUpdateAccountTypeAccess(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountsUpdateAccountTypeAccessResp(rsp)
}

// AccountsDeleteAccountTypeWithResponse request returning *AccountsDeleteAccountTypeResp
func (c *ClientWithResponses) AccountsDeleteAccountTypeWithResponse(ctx context.Context, accountTypeId string, reqEditors ...RequestEditorFn) (*AccountsDeleteAccountTypeResp, error) {
	rsp, err := c.AccountsDeleteAccountType(ctx, accountTypeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountsDeleteAccountTypeResp(rsp)
}

// AccountsReadAccountTypeWithResponse request returning *AccountsReadAccountTypeResp
func (c *ClientWithResponses) AccountsReadAccountTypeWithResponse(ctx context.Context, accountTypeId string, params *AccountsReadAccountTypeParams, reqEditors ...RequestEditorFn) (*AccountsReadAccountTypeResp, error) {
	rsp, err := c.AccountsReadAccountType(ctx, accountTypeId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountsReadAccountTypeResp(rsp)
}

// AccountsUpdateAccountTypeWithBodyWithResponse request with arbitrary body returning *AccountsUpdateAccountTypeResp
func (c *ClientWithResponses) AccountsUpdateAccountTypeWithBodyWithResponse(ctx context.Context, accountTypeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AccountsUpdateAccountTypeResp, error) {
	rsp, err := c.AccountsUpdateAccountTypeWithBody(ctx, accountTypeId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountsUpdateAccountTypeResp(rsp)
}

func (c *ClientWithResponses) AccountsUpdateAccountTypeWithResponse(ctx context.Context, accountTypeId string, body AccountsUpdateAccountTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*AccountsUpdateAccountTypeResp, error) {
	rsp, err := c.AccountsUpdateAccountType(ctx, accountTypeId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountsUpdateAccountTypeResp(rsp)
}

// AccountsReadAccountWithResponse request returning *AccountsReadAccountResp
func (c *ClientWithResponses) AccountsReadAccountWithResponse(ctx context.Context, accountId string, params *AccountsReadAccountParams, reqEditors ...RequestEditorFn) (*AccountsReadAccountResp, error) {
	rsp, err := c.AccountsReadAccount(ctx, accountId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountsReadAccountResp(rsp)
}

// AccountsUpdateAccountWithBodyWithResponse request with arbitrary body returning *AccountsUpdateAccountResp
func (c *ClientWithResponses) AccountsUpdateAccountWithBodyWithResponse(ctx context.Context, accountId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AccountsUpdateAccountResp, error) {
	rsp, err := c.AccountsUpdateAccountWithBody(ctx, accountId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountsUpdateAccountResp(rsp)
}

func (c *ClientWithResponses) AccountsUpdateAccountWithResponse(ctx context.Context, accountId string, body AccountsUpdateAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*AccountsUpdateAccountResp, error) {
	rsp, err := c.AccountsUpdateAccount(ctx, accountId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAccountsUpdateAccountResp(rsp)
}

// TeamsReadApiTokensWithResponse request returning *TeamsReadApiTokensResp
func (c *ClientWithResponses) TeamsReadApiTokensWithResponse(ctx context.Context, params *TeamsReadApiTokensParams, reqEditors ...RequestEditorFn) (*TeamsReadApiTokensResp, error) {
	rsp, err := c.TeamsReadApiTokens(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTeamsReadApiTokensResp(rsp)
}

// TeamsCreateApiTokenWithBodyWithResponse request with arbitrary body returning *TeamsCreateApiTokenResp
func (c *ClientWithResponses) TeamsCreateApiTokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TeamsCreateApiTokenResp, error) {
	rsp, err := c.TeamsCreateApiTokenWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTeamsCreateApiTokenResp(rsp)
}

func (c *ClientWithResponses) TeamsCreateApiTokenWithResponse(ctx context.Context, body TeamsCreateApiTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*TeamsCreateApiTokenResp, error) {
	rsp, err := c.TeamsCreateApiToken(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTeamsCreateApiTokenResp(rsp)
}

// TeamsDeleteApiTokenWithResponse request returning *TeamsDeleteApiTokenResp
func (c *ClientWithResponses) TeamsDeleteApiTokenWithResponse(ctx context.Context, accessKey string, reqEditors ...RequestEditorFn) (*TeamsDeleteApiTokenResp, error) {
	rsp, err := c.TeamsDeleteApiToken(ctx, accessKey, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTeamsDeleteApiTokenResp(rsp)
}

// TeamsReadApiTokenWithResponse request returning *TeamsReadApiTokenResp
func (c *ClientWithResponses) TeamsReadApiTokenWithResponse(ctx context.Context, accessKey string, params *TeamsReadApiTokenParams, reqEditors ...RequestEditorFn) (*TeamsReadApiTokenResp, error) {
	rsp, err := c.TeamsReadApiToken(ctx, accessKey, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTeamsReadApiTokenResp(rsp)
}

// TeamsUpdateApiTokenWithBodyWithResponse request with arbitrary body returning *TeamsUpdateApiTokenResp
func (c *ClientWithResponses) TeamsUpdateApiTokenWithBodyWithResponse(ctx context.Context, accessKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TeamsUpdateApiTokenResp, error) {
	rsp, err := c.TeamsUpdateApiTokenWithBody(ctx, accessKey, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTeamsUpdateApiTokenResp(rsp)
}

func (c *ClientWithResponses) TeamsUpdateApiTokenWithResponse(ctx context.Context, accessKey string, body TeamsUpdateApiTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*TeamsUpdateApiTokenResp, error) {
	rsp, err := c.TeamsUpdateApiToken(ctx, accessKey, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTeamsUpdateApiTokenResp(rsp)
}

// TeamsReadGroupsWithResponse request returning *TeamsReadGroupsResp
func (c *ClientWithResponses) TeamsReadGroupsWithResponse(ctx context.Context, params *TeamsReadGroupsParams, reqEditors ...RequestEditorFn) (*TeamsReadGroupsResp, error) {
	rsp, err := c.TeamsReadGroups(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTeamsReadGroupsResp(rsp)
}

// TeamsCreateGroupWithBodyWithResponse request with arbitrary body returning *TeamsCreateGroupResp
func (c *ClientWithResponses) TeamsCreateGroupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TeamsCreateGroupResp, error) {
	rsp, err := c.TeamsCreateGroupWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTeamsCreateGroupResp(rsp)
}

func (c *ClientWithResponses) TeamsCreateGroupWithResponse(ctx context.Context, body TeamsCreateGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*TeamsCreateGroupResp, error) {
	rsp, err := c.TeamsCreateGroup(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTeamsCreateGroupResp(rsp)
}

// TeamsUpdateGroupMembersWithBodyWithResponse request with arbitrary body returning *TeamsUpdateGroupMembersResp
func (c *ClientWithResponses) TeamsUpdateGroupMembersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TeamsUpdateGroupMembersResp, error) {
	rsp, err := c.TeamsUpdateGroupMembersWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTeamsUpdateGroupMembersResp(rsp)
}

func (c *ClientWithResponses) TeamsUpdateGroupMembersWithResponse(ctx context.Context, body TeamsUpdateGroupMembersJSONRequestBody, reqEditors ...RequestEditorFn) (*TeamsUpdateGroupMembersResp, error) {
	rsp, err := c.TeamsUpdateGroupMembers(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTeamsUpdateGroupMembersResp(rsp)
}

// TeamsDeleteGroupWithResponse request returning *TeamsDeleteGroupResp
func (c *ClientWithResponses) TeamsDeleteGroupWithResponse(ctx context.Context, groupId string, reqEditors ...RequestEditorFn) (*TeamsDeleteGroupResp, error) {
	rsp, err := c.TeamsDeleteGroup(ctx, groupId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTeamsDeleteGroupResp(rsp)
}

// TeamsReadGroupWithResponse request returning *TeamsReadGroupResp
func (c *ClientWithResponses) TeamsReadGroupWithResponse(ctx context.Context, groupId string, reqEditors ...RequestEditorFn) (*TeamsReadGroupResp, error) {
	rsp, err := c.TeamsReadGroup(ctx, groupId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTeamsReadGroupResp(rsp)
}

// TeamsUpdateGroupWithBodyWithResponse request with arbitrary body returning *TeamsUpdateGroupResp
func (c *ClientWithResponses) TeamsUpdateGroupWithBodyWithResponse(ctx context.Context, groupId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TeamsUpdateGroupResp, error) {
	rsp, err := c.TeamsUpdateGroupWithBody(ctx, groupId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTeamsUpdateGroupResp(rsp)
}

func (c *ClientWithResponses) TeamsUpdateGroupWithResponse(ctx context.Context, groupId string, body TeamsUpdateGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*TeamsUpdateGroupResp, error) {
	rsp, err := c.TeamsUpdateGroup(ctx, groupId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTeamsUpdateGroupResp(rsp)
}

// TeamsReadIdamUsersWithResponse request returning *TeamsReadIdamUsersResp
func (c *ClientWithResponses) TeamsReadIdamUsersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TeamsReadIdamUsersResp, error) {
	rsp, err := c.TeamsReadIdamUsers(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTeamsReadIdamUsersResp(rsp)
}

// TeamsCreateUserWithBodyWithResponse request with arbitrary body returning *TeamsCreateUserResp
func (c *ClientWithResponses) TeamsCreateUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TeamsCreateUserResp, error) {
	rsp, err := c.TeamsCreateUserWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTeamsCreateUserResp(rsp)
}

func (c *ClientWithResponses) TeamsCreateUserWithResponse(ctx context.Context, body TeamsCreateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*TeamsCreateUserResp, error) {
	rsp, err := c.TeamsCreateUser(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTeamsCreateUserResp(rsp)
}

// TeamsUpdateUserInviteWithResponse request returning *TeamsUpdateUserInviteResp
func (c *ClientWithResponses) TeamsUpdateUserInviteWithResponse(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*TeamsUpdateUserInviteResp, error) {
	rsp, err := c.TeamsUpdateUserInvite(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTeamsUpdateUserInviteResp(rsp)
}

// TeamsUpdateUserPasswordWithResponse request returning *TeamsUpdateUserPasswordResp
func (c *ClientWithResponses) TeamsUpdateUserPasswordWithResponse(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*TeamsUpdateUserPasswordResp, error) {
	rsp, err := c.TeamsUpdateUserPassword(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTeamsUpdateUserPasswordResp(rsp)
}

// TeamsReadIdamUserWithResponse request returning *TeamsReadIdamUserResp
func (c *ClientWithResponses) TeamsReadIdamUserWithResponse(ctx context.Context, orgId string, reqEditors ...RequestEditorFn) (*TeamsReadIdamUserResp, error) {
	rsp, err := c.TeamsReadIdamUser(ctx, orgId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTeamsReadIdamUserResp(rsp)
}

// TeamsUpdateUserWithBodyWithResponse request with arbitrary body returning *TeamsUpdateUserResp
func (c *ClientWithResponses) TeamsUpdateUserWithBodyWithResponse(ctx context.Context, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TeamsUpdateUserResp, error) {
	rsp, err := c.TeamsUpdateUserWithBody(ctx, userId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTeamsUpdateUserResp(rsp)
}

func (c *ClientWithResponses) TeamsUpdateUserWithResponse(ctx context.Context, userId string, body TeamsUpdateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*TeamsUpdateUserResp, error) {
	rsp, err := c.TeamsUpdateUser(ctx, userId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTeamsUpdateUserResp(rsp)
}

// NetworkingReadDnsResolversWithResponse request returning *NetworkingReadDnsResolversResp
func (c *ClientWithResponses) NetworkingReadDnsResolversWithResponse(ctx context.Context, params *NetworkingReadDnsResolversParams, reqEditors ...RequestEditorFn) (*NetworkingReadDnsResolversResp, error) {
	rsp, err := c.NetworkingReadDnsResolvers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkingReadDnsResolversResp(rsp)
}

// NetworkingDeleteDnsResolverWithResponse request returning *NetworkingDeleteDnsResolverResp
func (c *ClientWithResponses) NetworkingDeleteDnsResolverWithResponse(ctx context.Context, dnsResolverId Uuidv4, reqEditors ...RequestEditorFn) (*NetworkingDeleteDnsResolverResp, error) {
	rsp, err := c.NetworkingDeleteDnsResolver(ctx, dnsResolverId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkingDeleteDnsResolverResp(rsp)
}

// NetworkingReadDnsResolverWithResponse request returning *NetworkingReadDnsResolverResp
func (c *ClientWithResponses) NetworkingReadDnsResolverWithResponse(ctx context.Context, dnsResolverId Uuidv4, params *NetworkingReadDnsResolverParams, reqEditors ...RequestEditorFn) (*NetworkingReadDnsResolverResp, error) {
	rsp, err := c.NetworkingReadDnsResolver(ctx, dnsResolverId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkingReadDnsResolverResp(rsp)
}

// NetworkingUpdateDnsResolverWithBodyWithResponse request with arbitrary body returning *NetworkingUpdateDnsResolverResp
func (c *ClientWithResponses) NetworkingUpdateDnsResolverWithBodyWithResponse(ctx context.Context, dnsResolverId Uuidv4, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NetworkingUpdateDnsResolverResp, error) {
	rsp, err := c.NetworkingUpdateDnsResolverWithBody(ctx, dnsResolverId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkingUpdateDnsResolverResp(rsp)
}

func (c *ClientWithResponses) NetworkingUpdateDnsResolverWithResponse(ctx context.Context, dnsResolverId Uuidv4, body NetworkingUpdateDnsResolverJSONRequestBody, reqEditors ...RequestEditorFn) (*NetworkingUpdateDnsResolverResp, error) {
	rsp, err := c.NetworkingUpdateDnsResolver(ctx, dnsResolverId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkingUpdateDnsResolverResp(rsp)
}

// NetworkingReadResolverDnsRulesWithResponse request returning *NetworkingReadResolverDnsRulesResp
func (c *ClientWithResponses) NetworkingReadResolverDnsRulesWithResponse(ctx context.Context, dnsResolverId Uuidv4, params *NetworkingReadResolverDnsRulesParams, reqEditors ...RequestEditorFn) (*NetworkingReadResolverDnsRulesResp, error) {
	rsp, err := c.NetworkingReadResolverDnsRules(ctx, dnsResolverId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkingReadResolverDnsRulesResp(rsp)
}

// NetworkingCreateDnsRuleWithBodyWithResponse request with arbitrary body returning *NetworkingCreateDnsRuleResp
func (c *ClientWithResponses) NetworkingCreateDnsRuleWithBodyWithResponse(ctx context.Context, dnsResolverId Uuidv4, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NetworkingCreateDnsRuleResp, error) {
	rsp, err := c.NetworkingCreateDnsRuleWithBody(ctx, dnsResolverId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkingCreateDnsRuleResp(rsp)
}

func (c *ClientWithResponses) NetworkingCreateDnsRuleWithResponse(ctx context.Context, dnsResolverId Uuidv4, body NetworkingCreateDnsRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*NetworkingCreateDnsRuleResp, error) {
	rsp, err := c.NetworkingCreateDnsRule(ctx, dnsResolverId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkingCreateDnsRuleResp(rsp)
}

// NetworkingReadDnsRulesWithResponse request returning *NetworkingReadDnsRulesResp
func (c *ClientWithResponses) NetworkingReadDnsRulesWithResponse(ctx context.Context, params *NetworkingReadDnsRulesParams, reqEditors ...RequestEditorFn) (*NetworkingReadDnsRulesResp, error) {
	rsp, err := c.NetworkingReadDnsRules(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkingReadDnsRulesResp(rsp)
}

// NetworkingDeleteDnsRuleWithResponse request returning *NetworkingDeleteDnsRuleResp
func (c *ClientWithResponses) NetworkingDeleteDnsRuleWithResponse(ctx context.Context, dnsRuleId Uuidv4, reqEditors ...RequestEditorFn) (*NetworkingDeleteDnsRuleResp, error) {
	rsp, err := c.NetworkingDeleteDnsRule(ctx, dnsRuleId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkingDeleteDnsRuleResp(rsp)
}

// NetworkingReadDnsRuleWithResponse request returning *NetworkingReadDnsRuleResp
func (c *ClientWithResponses) NetworkingReadDnsRuleWithResponse(ctx context.Context, dnsRuleId Uuidv4, params *NetworkingReadDnsRuleParams, reqEditors ...RequestEditorFn) (*NetworkingReadDnsRuleResp, error) {
	rsp, err := c.NetworkingReadDnsRule(ctx, dnsRuleId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkingReadDnsRuleResp(rsp)
}

// NetworkingUpdateDnsRuleWithBodyWithResponse request with arbitrary body returning *NetworkingUpdateDnsRuleResp
func (c *ClientWithResponses) NetworkingUpdateDnsRuleWithBodyWithResponse(ctx context.Context, dnsRuleId Uuidv4, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NetworkingUpdateDnsRuleResp, error) {
	rsp, err := c.NetworkingUpdateDnsRuleWithBody(ctx, dnsRuleId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkingUpdateDnsRuleResp(rsp)
}

func (c *ClientWithResponses) NetworkingUpdateDnsRuleWithResponse(ctx context.Context, dnsRuleId Uuidv4, body NetworkingUpdateDnsRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*NetworkingUpdateDnsRuleResp, error) {
	rsp, err := c.NetworkingUpdateDnsRule(ctx, dnsRuleId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkingUpdateDnsRuleResp(rsp)
}

// NetworkingReadDxAssociationsWithResponse request returning *NetworkingReadDxAssociationsResp
func (c *ClientWithResponses) NetworkingReadDxAssociationsWithResponse(ctx context.Context, params *NetworkingReadDxAssociationsParams, reqEditors ...RequestEditorFn) (*NetworkingReadDxAssociationsResp, error) {
	rsp, err := c.NetworkingReadDxAssociations(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkingReadDxAssociationsResp(rsp)
}

// NetworkingDeleteDxAssociationWithResponse request returning *NetworkingDeleteDxAssociationResp
func (c *ClientWithResponses) NetworkingDeleteDxAssociationWithResponse(ctx context.Context, dxAssociationId Uuidv4, reqEditors ...RequestEditorFn) (*NetworkingDeleteDxAssociationResp, error) {
	rsp, err := c.NetworkingDeleteDxAssociation(ctx, dxAssociationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkingDeleteDxAssociationResp(rsp)
}

// NetworkingReadDxAssociationWithResponse request returning *NetworkingReadDxAssociationResp
func (c *ClientWithResponses) NetworkingReadDxAssociationWithResponse(ctx context.Context, dxAssociationId Uuidv4, params *NetworkingReadDxAssociationParams, reqEditors ...RequestEditorFn) (*NetworkingReadDxAssociationResp, error) {
	rsp, err := c.NetworkingReadDxAssociation(ctx, dxAssociationId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkingReadDxAssociationResp(rsp)
}

// NetworkingUpdateDxAssociationWithBodyWithResponse request with arbitrary body returning *NetworkingUpdateDxAssociationResp
func (c *ClientWithResponses) NetworkingUpdateDxAssociationWithBodyWithResponse(ctx context.Context, dxAssociationId Uuidv4, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NetworkingUpdateDxAssociationResp, error) {
	rsp, err := c.NetworkingUpdateDxAssociationWithBody(ctx, dxAssociationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkingUpdateDxAssociationResp(rsp)
}

func (c *ClientWithResponses) NetworkingUpdateDxAssociationWithResponse(ctx context.Context, dxAssociationId Uuidv4, body NetworkingUpdateDxAssociationJSONRequestBody, reqEditors ...RequestEditorFn) (*NetworkingUpdateDxAssociationResp, error) {
	rsp, err := c.NetworkingUpdateDxAssociation(ctx, dxAssociationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkingUpdateDxAssociationResp(rsp)
}

// NetworkingReadDxGatewaysWithResponse request returning *NetworkingReadDxGatewaysResp
func (c *ClientWithResponses) NetworkingReadDxGatewaysWithResponse(ctx context.Context, params *NetworkingReadDxGatewaysParams, reqEditors ...RequestEditorFn) (*NetworkingReadDxGatewaysResp, error) {
	rsp, err := c.NetworkingReadDxGateways(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkingReadDxGatewaysResp(rsp)
}

// NetworkingDeleteDxGatewayWithResponse request returning *NetworkingDeleteDxGatewayResp
func (c *ClientWithResponses) NetworkingDeleteDxGatewayWithResponse(ctx context.Context, dxGatewayId Uuidv4, reqEditors ...RequestEditorFn) (*NetworkingDeleteDxGatewayResp, error) {
	rsp, err := c.NetworkingDeleteDxGateway(ctx, dxGatewayId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkingDeleteDxGatewayResp(rsp)
}

// NetworkingReadDxGatewayWithResponse request returning *NetworkingReadDxGatewayResp
func (c *ClientWithResponses) NetworkingReadDxGatewayWithResponse(ctx context.Context, dxGatewayId Uuidv4, params *NetworkingReadDxGatewayParams, reqEditors ...RequestEditorFn) (*NetworkingReadDxGatewayResp, error) {
	rsp, err := c.NetworkingReadDxGateway(ctx, dxGatewayId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkingReadDxGatewayResp(rsp)
}

// NetworkingReadGatewayDxAssociationsWithResponse request returning *NetworkingReadGatewayDxAssociationsResp
func (c *ClientWithResponses) NetworkingReadGatewayDxAssociationsWithResponse(ctx context.Context, dxGatewayId Uuidv4, params *NetworkingReadGatewayDxAssociationsParams, reqEditors ...RequestEditorFn) (*NetworkingReadGatewayDxAssociationsResp, error) {
	rsp, err := c.NetworkingReadGatewayDxAssociations(ctx, dxGatewayId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkingReadGatewayDxAssociationsResp(rsp)
}

// NetworkingCreateDxAssociationWithBodyWithResponse request with arbitrary body returning *NetworkingCreateDxAssociationResp
func (c *ClientWithResponses) NetworkingCreateDxAssociationWithBodyWithResponse(ctx context.Context, dxGatewayId Uuidv4, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NetworkingCreateDxAssociationResp, error) {
	rsp, err := c.NetworkingCreateDxAssociationWithBody(ctx, dxGatewayId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkingCreateDxAssociationResp(rsp)
}

func (c *ClientWithResponses) NetworkingCreateDxAssociationWithResponse(ctx context.Context, dxGatewayId Uuidv4, body NetworkingCreateDxAssociationJSONRequestBody, reqEditors ...RequestEditorFn) (*NetworkingCreateDxAssociationResp, error) {
	rsp, err := c.NetworkingCreateDxAssociation(ctx, dxGatewayId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkingCreateDxAssociationResp(rsp)
}

// NetworkingReadGatewayDxVifsWithResponse request returning *NetworkingReadGatewayDxVifsResp
func (c *ClientWithResponses) NetworkingReadGatewayDxVifsWithResponse(ctx context.Context, dxGatewayId Uuidv4, params *NetworkingReadGatewayDxVifsParams, reqEditors ...RequestEditorFn) (*NetworkingReadGatewayDxVifsResp, error) {
	rsp, err := c.NetworkingReadGatewayDxVifs(ctx, dxGatewayId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkingReadGatewayDxVifsResp(rsp)
}

// NetworkingCreateDxResourceWithBodyWithResponse request with arbitrary body returning *NetworkingCreateDxResourceResp
func (c *ClientWithResponses) NetworkingCreateDxResourceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NetworkingCreateDxResourceResp, error) {
	rsp, err := c.NetworkingCreateDxResourceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkingCreateDxResourceResp(rsp)
}

func (c *ClientWithResponses) NetworkingCreateDxResourceWithResponse(ctx context.Context, body NetworkingCreateDxResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*NetworkingCreateDxResourceResp, error) {
	rsp, err := c.NetworkingCreateDxResource(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkingCreateDxResourceResp(rsp)
}

// NetworkingReadDxVifsWithResponse request returning *NetworkingReadDxVifsResp
func (c *ClientWithResponses) NetworkingReadDxVifsWithResponse(ctx context.Context, params *NetworkingReadDxVifsParams, reqEditors ...RequestEditorFn) (*NetworkingReadDxVifsResp, error) {
	rsp, err := c.NetworkingReadDxVifs(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkingReadDxVifsResp(rsp)
}

// NetworkingDeleteDxVifWithResponse request returning *NetworkingDeleteDxVifResp
func (c *ClientWithResponses) NetworkingDeleteDxVifWithResponse(ctx context.Context, dxVifId Uuidv4, reqEditors ...RequestEditorFn) (*NetworkingDeleteDxVifResp, error) {
	rsp, err := c.NetworkingDeleteDxVif(ctx, dxVifId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkingDeleteDxVifResp(rsp)
}

// NetworkingReadDxVifWithResponse request returning *NetworkingReadDxVifResp
func (c *ClientWithResponses) NetworkingReadDxVifWithResponse(ctx context.Context, dxVifId Uuidv4, params *NetworkingReadDxVifParams, reqEditors ...RequestEditorFn) (*NetworkingReadDxVifResp, error) {
	rsp, err := c.NetworkingReadDxVif(ctx, dxVifId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkingReadDxVifResp(rsp)
}

// NetworkingUpdateDxVifWithBodyWithResponse request with arbitrary body returning *NetworkingUpdateDxVifResp
func (c *ClientWithResponses) NetworkingUpdateDxVifWithBodyWithResponse(ctx context.Context, dxVifId Uuidv4, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NetworkingUpdateDxVifResp, error) {
	rsp, err := c.NetworkingUpdateDxVifWithBody(ctx, dxVifId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkingUpdateDxVifResp(rsp)
}

func (c *ClientWithResponses) NetworkingUpdateDxVifWithResponse(ctx context.Context, dxVifId Uuidv4, body NetworkingUpdateDxVifJSONRequestBody, reqEditors ...RequestEditorFn) (*NetworkingUpdateDxVifResp, error) {
	rsp, err := c.NetworkingUpdateDxVif(ctx, dxVifId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkingUpdateDxVifResp(rsp)
}

// NetworkingReadDxVifStatusWithResponse request returning *NetworkingReadDxVifStatusResp
func (c *ClientWithResponses) NetworkingReadDxVifStatusWithResponse(ctx context.Context, dxVifId Uuidv4, reqEditors ...RequestEditorFn) (*NetworkingReadDxVifStatusResp, error) {
	rsp, err := c.NetworkingReadDxVifStatus(ctx, dxVifId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkingReadDxVifStatusResp(rsp)
}

// NetworkingReadCidrExclusionsWithResponse request returning *NetworkingReadCidrExclusionsResp
func (c *ClientWithResponses) NetworkingReadCidrExclusionsWithResponse(ctx context.Context, params *NetworkingReadCidrExclusionsParams, reqEditors ...RequestEditorFn) (*NetworkingReadCidrExclusionsResp, error) {
	rsp, err := c.NetworkingReadCidrExclusions(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkingReadCidrExclusionsResp(rsp)
}

// NetworkingDeleteCidrExclusionWithResponse request returning *NetworkingDeleteCidrExclusionResp
func (c *ClientWithResponses) NetworkingDeleteCidrExclusionWithResponse(ctx context.Context, exclusionId Uuidv4, reqEditors ...RequestEditorFn) (*NetworkingDeleteCidrExclusionResp, error) {
	rsp, err := c.NetworkingDeleteCidrExclusion(ctx, exclusionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkingDeleteCidrExclusionResp(rsp)
}

// NetworkingReadCidrExclusionWithResponse request returning *NetworkingReadCidrExclusionResp
func (c *ClientWithResponses) NetworkingReadCidrExclusionWithResponse(ctx context.Context, exclusionId Uuidv4, params *NetworkingReadCidrExclusionParams, reqEditors ...RequestEditorFn) (*NetworkingReadCidrExclusionResp, error) {
	rsp, err := c.NetworkingReadCidrExclusion(ctx, exclusionId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkingReadCidrExclusionResp(rsp)
}

// NetworkingUpdateCidrExclusionWithBodyWithResponse request with arbitrary body returning *NetworkingUpdateCidrExclusionResp
func (c *ClientWithResponses) NetworkingUpdateCidrExclusionWithBodyWithResponse(ctx context.Context, exclusionId Uuidv4, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NetworkingUpdateCidrExclusionResp, error) {
	rsp, err := c.NetworkingUpdateCidrExclusionWithBody(ctx, exclusionId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkingUpdateCidrExclusionResp(rsp)
}

func (c *ClientWithResponses) NetworkingUpdateCidrExclusionWithResponse(ctx context.Context, exclusionId Uuidv4, body NetworkingUpdateCidrExclusionJSONRequestBody, reqEditors ...RequestEditorFn) (*NetworkingUpdateCidrExclusionResp, error) {
	rsp, err := c.NetworkingUpdateCidrExclusion(ctx, exclusionId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkingUpdateCidrExclusionResp(rsp)
}

// NetworkingReadHubPeeringsWithResponse request returning *NetworkingReadHubPeeringsResp
func (c *ClientWithResponses) NetworkingReadHubPeeringsWithResponse(ctx context.Context, params *NetworkingReadHubPeeringsParams, reqEditors ...RequestEditorFn) (*NetworkingReadHubPeeringsResp, error) {
	rsp, err := c.NetworkingReadHubPeerings(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkingReadHubPeeringsResp(rsp)
}

// NetworkingDeleteHubPeeringWithResponse request returning *NetworkingDeleteHubPeeringResp
func (c *ClientWithResponses) NetworkingDeleteHubPeeringWithResponse(ctx context.Context, hubPeeringId Uuidv4, reqEditors ...RequestEditorFn) (*NetworkingDeleteHubPeeringResp, error) {
	rsp, err := c.NetworkingDeleteHubPeering(ctx, hubPeeringId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkingDeleteHubPeeringResp(rsp)
}

// NetworkingReadHubPeeringWithResponse request returning *NetworkingReadHubPeeringResp
func (c *ClientWithResponses) NetworkingReadHubPeeringWithResponse(ctx context.Context, hubPeeringId Uuidv4, params *NetworkingReadHubPeeringParams, reqEditors ...RequestEditorFn) (*NetworkingReadHubPeeringResp, error) {
	rsp, err := c.NetworkingReadHubPeering(ctx, hubPeeringId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkingReadHubPeeringResp(rsp)
}

// NetworkingUpdateHubPeeringWithBodyWithResponse request with arbitrary body returning *NetworkingUpdateHubPeeringResp
func (c *ClientWithResponses) NetworkingUpdateHubPeeringWithBodyWithResponse(ctx context.Context, hubPeeringId Uuidv4, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NetworkingUpdateHubPeeringResp, error) {
	rsp, err := c.NetworkingUpdateHubPeeringWithBody(ctx, hubPeeringId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkingUpdateHubPeeringResp(rsp)
}

func (c *ClientWithResponses) NetworkingUpdateHubPeeringWithResponse(ctx context.Context, hubPeeringId Uuidv4, body NetworkingUpdateHubPeeringJSONRequestBody, reqEditors ...RequestEditorFn) (*NetworkingUpdateHubPeeringResp, error) {
	rsp, err := c.NetworkingUpdateHubPeering(ctx, hubPeeringId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkingUpdateHubPeeringResp(rsp)
}

// NetworkingReadHubsWithResponse request returning *NetworkingReadHubsResp
func (c *ClientWithResponses) NetworkingReadHubsWithResponse(ctx context.Context, params *NetworkingReadHubsParams, reqEditors ...RequestEditorFn) (*NetworkingReadHubsResp, error) {
	rsp, err := c.NetworkingReadHubs(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkingReadHubsResp(rsp)
}

// NetworkingCreateHubWithBodyWithResponse request with arbitrary body returning *NetworkingCreateHubResp
func (c *ClientWithResponses) NetworkingCreateHubWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NetworkingCreateHubResp, error) {
	rsp, err := c.NetworkingCreateHubWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkingCreateHubResp(rsp)
}

func (c *ClientWithResponses) NetworkingCreateHubWithResponse(ctx context.Context, body NetworkingCreateHubJSONRequestBody, reqEditors ...RequestEditorFn) (*NetworkingCreateHubResp, error) {
	rsp, err := c.NetworkingCreateHub(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkingCreateHubResp(rsp)
}

// NetworkingDeleteHubWithResponse request returning *NetworkingDeleteHubResp
func (c *ClientWithResponses) NetworkingDeleteHubWithResponse(ctx context.Context, hubId Uuidv4, reqEditors ...RequestEditorFn) (*NetworkingDeleteHubResp, error) {
	rsp, err := c.NetworkingDeleteHub(ctx, hubId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkingDeleteHubResp(rsp)
}

// NetworkingReadHubWithResponse request returning *NetworkingReadHubResp
func (c *ClientWithResponses) NetworkingReadHubWithResponse(ctx context.Context, hubId Uuidv4, params *NetworkingReadHubParams, reqEditors ...RequestEditorFn) (*NetworkingReadHubResp, error) {
	rsp, err := c.NetworkingReadHub(ctx, hubId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkingReadHubResp(rsp)
}

// NetworkingUpdateHubWithBodyWithResponse request with arbitrary body returning *NetworkingUpdateHubResp
func (c *ClientWithResponses) NetworkingUpdateHubWithBodyWithResponse(ctx context.Context, hubId Uuidv4, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NetworkingUpdateHubResp, error) {
	rsp, err := c.NetworkingUpdateHubWithBody(ctx, hubId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkingUpdateHubResp(rsp)
}

func (c *ClientWithResponses) NetworkingUpdateHubWithResponse(ctx context.Context, hubId Uuidv4, body NetworkingUpdateHubJSONRequestBody, reqEditors ...RequestEditorFn) (*NetworkingUpdateHubResp, error) {
	rsp, err := c.NetworkingUpdateHub(ctx, hubId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkingUpdateHubResp(rsp)
}

// NetworkingReadHubDnsResolversWithResponse request returning *NetworkingReadHubDnsResolversResp
func (c *ClientWithResponses) NetworkingReadHubDnsResolversWithResponse(ctx context.Context, hubId Uuidv4, params *NetworkingReadHubDnsResolversParams, reqEditors ...RequestEditorFn) (*NetworkingReadHubDnsResolversResp, error) {
	rsp, err := c.NetworkingReadHubDnsResolvers(ctx, hubId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkingReadHubDnsResolversResp(rsp)
}

// NetworkingCreateDnsResolverWithBodyWithResponse request with arbitrary body returning *NetworkingCreateDnsResolverResp
func (c *ClientWithResponses) NetworkingCreateDnsResolverWithBodyWithResponse(ctx context.Context, hubId Uuidv4, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NetworkingCreateDnsResolverResp, error) {
	rsp, err := c.NetworkingCreateDnsResolverWithBody(ctx, hubId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkingCreateDnsResolverResp(rsp)
}

func (c *ClientWithResponses) NetworkingCreateDnsResolverWithResponse(ctx context.Context, hubId Uuidv4, body NetworkingCreateDnsResolverJSONRequestBody, reqEditors ...RequestEditorFn) (*NetworkingCreateDnsResolverResp, error) {
	rsp, err := c.NetworkingCreateDnsResolver(ctx, hubId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkingCreateDnsResolverResp(rsp)
}

// NetworkingReadHubDxAssociationsWithResponse request returning *NetworkingReadHubDxAssociationsResp
func (c *ClientWithResponses) NetworkingReadHubDxAssociationsWithResponse(ctx context.Context, hubId Uuidv4, params *NetworkingReadHubDxAssociationsParams, reqEditors ...RequestEditorFn) (*NetworkingReadHubDxAssociationsResp, error) {
	rsp, err := c.NetworkingReadHubDxAssociations(ctx, hubId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkingReadHubDxAssociationsResp(rsp)
}

// NetworkingReadHubDxGatewaysWithResponse request returning *NetworkingReadHubDxGatewaysResp
func (c *ClientWithResponses) NetworkingReadHubDxGatewaysWithResponse(ctx context.Context, hubId Uuidv4, params *NetworkingReadHubDxGatewaysParams, reqEditors ...RequestEditorFn) (*NetworkingReadHubDxGatewaysResp, error) {
	rsp, err := c.NetworkingReadHubDxGateways(ctx, hubId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkingReadHubDxGatewaysResp(rsp)
}

// NetworkingReadHubCidrExclusionsWithResponse request returning *NetworkingReadHubCidrExclusionsResp
func (c *ClientWithResponses) NetworkingReadHubCidrExclusionsWithResponse(ctx context.Context, hubId Uuidv4, params *NetworkingReadHubCidrExclusionsParams, reqEditors ...RequestEditorFn) (*NetworkingReadHubCidrExclusionsResp, error) {
	rsp, err := c.NetworkingReadHubCidrExclusions(ctx, hubId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkingReadHubCidrExclusionsResp(rsp)
}

// NetworkingCreateCidrExclusionWithBodyWithResponse request with arbitrary body returning *NetworkingCreateCidrExclusionResp
func (c *ClientWithResponses) NetworkingCreateCidrExclusionWithBodyWithResponse(ctx context.Context, hubId Uuidv4, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NetworkingCreateCidrExclusionResp, error) {
	rsp, err := c.NetworkingCreateCidrExclusionWithBody(ctx, hubId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkingCreateCidrExclusionResp(rsp)
}

func (c *ClientWithResponses) NetworkingCreateCidrExclusionWithResponse(ctx context.Context, hubId Uuidv4, body NetworkingCreateCidrExclusionJSONRequestBody, reqEditors ...RequestEditorFn) (*NetworkingCreateCidrExclusionResp, error) {
	rsp, err := c.NetworkingCreateCidrExclusion(ctx, hubId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkingCreateCidrExclusionResp(rsp)
}

// NetworkingReadHubPrefixListsWithResponse request returning *NetworkingReadHubPrefixListsResp
func (c *ClientWithResponses) NetworkingReadHubPrefixListsWithResponse(ctx context.Context, hubId Uuidv4, params *NetworkingReadHubPrefixListsParams, reqEditors ...RequestEditorFn) (*NetworkingReadHubPrefixListsResp, error) {
	rsp, err := c.NetworkingReadHubPrefixLists(ctx, hubId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkingReadHubPrefixListsResp(rsp)
}

// NetworkingCreateHubPrefixListWithBodyWithResponse request with arbitrary body returning *NetworkingCreateHubPrefixListResp
func (c *ClientWithResponses) NetworkingCreateHubPrefixListWithBodyWithResponse(ctx context.Context, hubId Uuidv4, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NetworkingCreateHubPrefixListResp, error) {
	rsp, err := c.NetworkingCreateHubPrefixListWithBody(ctx, hubId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkingCreateHubPrefixListResp(rsp)
}

func (c *ClientWithResponses) NetworkingCreateHubPrefixListWithResponse(ctx context.Context, hubId Uuidv4, body NetworkingCreateHubPrefixListJSONRequestBody, reqEditors ...RequestEditorFn) (*NetworkingCreateHubPrefixListResp, error) {
	rsp, err := c.NetworkingCreateHubPrefixList(ctx, hubId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkingCreateHubPrefixListResp(rsp)
}

// NetworkingCreateVpcPrefixListWithBodyWithResponse request with arbitrary body returning *NetworkingCreateVpcPrefixListResp
func (c *ClientWithResponses) NetworkingCreateVpcPrefixListWithBodyWithResponse(ctx context.Context, hubId Uuidv4, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NetworkingCreateVpcPrefixListResp, error) {
	rsp, err := c.NetworkingCreateVpcPrefixListWithBody(ctx, hubId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkingCreateVpcPrefixListResp(rsp)
}

func (c *ClientWithResponses) NetworkingCreateVpcPrefixListWithResponse(ctx context.Context, hubId Uuidv4, body NetworkingCreateVpcPrefixListJSONRequestBody, reqEditors ...RequestEditorFn) (*NetworkingCreateVpcPrefixListResp, error) {
	rsp, err := c.NetworkingCreateVpcPrefixList(ctx, hubId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkingCreateVpcPrefixListResp(rsp)
}

// NetworkingReadHubCidrRangesWithResponse request returning *NetworkingReadHubCidrRangesResp
func (c *ClientWithResponses) NetworkingReadHubCidrRangesWithResponse(ctx context.Context, hubId Uuidv4, params *NetworkingReadHubCidrRangesParams, reqEditors ...RequestEditorFn) (*NetworkingReadHubCidrRangesResp, error) {
	rsp, err := c.NetworkingReadHubCidrRanges(ctx, hubId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkingReadHubCidrRangesResp(rsp)
}

// NetworkingCreateCidrRangeWithBodyWithResponse request with arbitrary body returning *NetworkingCreateCidrRangeResp
func (c *ClientWithResponses) NetworkingCreateCidrRangeWithBodyWithResponse(ctx context.Context, hubId Uuidv4, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NetworkingCreateCidrRangeResp, error) {
	rsp, err := c.NetworkingCreateCidrRangeWithBody(ctx, hubId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkingCreateCidrRangeResp(rsp)
}

func (c *ClientWithResponses) NetworkingCreateCidrRangeWithResponse(ctx context.Context, hubId Uuidv4, body NetworkingCreateCidrRangeJSONRequestBody, reqEditors ...RequestEditorFn) (*NetworkingCreateCidrRangeResp, error) {
	rsp, err := c.NetworkingCreateCidrRange(ctx, hubId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkingCreateCidrRangeResp(rsp)
}

// NetworkingReadHubVpcsWithResponse request returning *NetworkingReadHubVpcsResp
func (c *ClientWithResponses) NetworkingReadHubVpcsWithResponse(ctx context.Context, hubId Uuidv4, params *NetworkingReadHubVpcsParams, reqEditors ...RequestEditorFn) (*NetworkingReadHubVpcsResp, error) {
	rsp, err := c.NetworkingReadHubVpcs(ctx, hubId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkingReadHubVpcsResp(rsp)
}

// NetworkingCreateVpcWithBodyWithResponse request with arbitrary body returning *NetworkingCreateVpcResp
func (c *ClientWithResponses) NetworkingCreateVpcWithBodyWithResponse(ctx context.Context, hubId Uuidv4, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NetworkingCreateVpcResp, error) {
	rsp, err := c.NetworkingCreateVpcWithBody(ctx, hubId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkingCreateVpcResp(rsp)
}

func (c *ClientWithResponses) NetworkingCreateVpcWithResponse(ctx context.Context, hubId Uuidv4, body NetworkingCreateVpcJSONRequestBody, reqEditors ...RequestEditorFn) (*NetworkingCreateVpcResp, error) {
	rsp, err := c.NetworkingCreateVpc(ctx, hubId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkingCreateVpcResp(rsp)
}

// NetworkingReadHubVpnConnectionsWithResponse request returning *NetworkingReadHubVpnConnectionsResp
func (c *ClientWithResponses) NetworkingReadHubVpnConnectionsWithResponse(ctx context.Context, hubId Uuidv4, params *NetworkingReadHubVpnConnectionsParams, reqEditors ...RequestEditorFn) (*NetworkingReadHubVpnConnectionsResp, error) {
	rsp, err := c.NetworkingReadHubVpnConnections(ctx, hubId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkingReadHubVpnConnectionsResp(rsp)
}

// NetworkingReadHubVpnCustomerGatewaysWithResponse request returning *NetworkingReadHubVpnCustomerGatewaysResp
func (c *ClientWithResponses) NetworkingReadHubVpnCustomerGatewaysWithResponse(ctx context.Context, hubId Uuidv4, params *NetworkingReadHubVpnCustomerGatewaysParams, reqEditors ...RequestEditorFn) (*NetworkingReadHubVpnCustomerGatewaysResp, error) {
	rsp, err := c.NetworkingReadHubVpnCustomerGateways(ctx, hubId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkingReadHubVpnCustomerGatewaysResp(rsp)
}

// NetworkingReadHubHubPeeringsWithResponse request returning *NetworkingReadHubHubPeeringsResp
func (c *ClientWithResponses) NetworkingReadHubHubPeeringsWithResponse(ctx context.Context, networkingHubId Uuidv4, params *NetworkingReadHubHubPeeringsParams, reqEditors ...RequestEditorFn) (*NetworkingReadHubHubPeeringsResp, error) {
	rsp, err := c.NetworkingReadHubHubPeerings(ctx, networkingHubId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkingReadHubHubPeeringsResp(rsp)
}

// NetworkingCreateHubPeeringWithBodyWithResponse request with arbitrary body returning *NetworkingCreateHubPeeringResp
func (c *ClientWithResponses) NetworkingCreateHubPeeringWithBodyWithResponse(ctx context.Context, networkingHubId Uuidv4, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NetworkingCreateHubPeeringResp, error) {
	rsp, err := c.NetworkingCreateHubPeeringWithBody(ctx, networkingHubId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkingCreateHubPeeringResp(rsp)
}

func (c *ClientWithResponses) NetworkingCreateHubPeeringWithResponse(ctx context.Context, networkingHubId Uuidv4, body NetworkingCreateHubPeeringJSONRequestBody, reqEditors ...RequestEditorFn) (*NetworkingCreateHubPeeringResp, error) {
	rsp, err := c.NetworkingCreateHubPeering(ctx, networkingHubId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkingCreateHubPeeringResp(rsp)
}

// NetworkingReadPrefixListsWithResponse request returning *NetworkingReadPrefixListsResp
func (c *ClientWithResponses) NetworkingReadPrefixListsWithResponse(ctx context.Context, params *NetworkingReadPrefixListsParams, reqEditors ...RequestEditorFn) (*NetworkingReadPrefixListsResp, error) {
	rsp, err := c.NetworkingReadPrefixLists(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkingReadPrefixListsResp(rsp)
}

// NetworkingUpdateHubPrefixListAssociationWithBodyWithResponse request with arbitrary body returning *NetworkingUpdateHubPrefixListAssociationResp
func (c *ClientWithResponses) NetworkingUpdateHubPrefixListAssociationWithBodyWithResponse(ctx context.Context, prefixListId Uuidv4, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NetworkingUpdateHubPrefixListAssociationResp, error) {
	rsp, err := c.NetworkingUpdateHubPrefixListAssociationWithBody(ctx, prefixListId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkingUpdateHubPrefixListAssociationResp(rsp)
}

func (c *ClientWithResponses) NetworkingUpdateHubPrefixListAssociationWithResponse(ctx context.Context, prefixListId Uuidv4, body NetworkingUpdateHubPrefixListAssociationJSONRequestBody, reqEditors ...RequestEditorFn) (*NetworkingUpdateHubPrefixListAssociationResp, error) {
	rsp, err := c.NetworkingUpdateHubPrefixListAssociation(ctx, prefixListId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkingUpdateHubPrefixListAssociationResp(rsp)
}

// NetworkingUpdateVpcPrefixListAssociationWithBodyWithResponse request with arbitrary body returning *NetworkingUpdateVpcPrefixListAssociationResp
func (c *ClientWithResponses) NetworkingUpdateVpcPrefixListAssociationWithBodyWithResponse(ctx context.Context, prefixListId Uuidv4, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NetworkingUpdateVpcPrefixListAssociationResp, error) {
	rsp, err := c.NetworkingUpdateVpcPrefixListAssociationWithBody(ctx, prefixListId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkingUpdateVpcPrefixListAssociationResp(rsp)
}

func (c *ClientWithResponses) NetworkingUpdateVpcPrefixListAssociationWithResponse(ctx context.Context, prefixListId Uuidv4, body NetworkingUpdateVpcPrefixListAssociationJSONRequestBody, reqEditors ...RequestEditorFn) (*NetworkingUpdateVpcPrefixListAssociationResp, error) {
	rsp, err := c.NetworkingUpdateVpcPrefixListAssociation(ctx, prefixListId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkingUpdateVpcPrefixListAssociationResp(rsp)
}

// NetworkingDeletePrefixListWithResponse request returning *NetworkingDeletePrefixListResp
func (c *ClientWithResponses) NetworkingDeletePrefixListWithResponse(ctx context.Context, prefixListId Uuidv4, reqEditors ...RequestEditorFn) (*NetworkingDeletePrefixListResp, error) {
	rsp, err := c.NetworkingDeletePrefixList(ctx, prefixListId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkingDeletePrefixListResp(rsp)
}

// NetworkingReadPrefixListWithResponse request returning *NetworkingReadPrefixListResp
func (c *ClientWithResponses) NetworkingReadPrefixListWithResponse(ctx context.Context, prefixListId Uuidv4, params *NetworkingReadPrefixListParams, reqEditors ...RequestEditorFn) (*NetworkingReadPrefixListResp, error) {
	rsp, err := c.NetworkingReadPrefixList(ctx, prefixListId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkingReadPrefixListResp(rsp)
}

// NetworkingUpdatePrefixListWithBodyWithResponse request with arbitrary body returning *NetworkingUpdatePrefixListResp
func (c *ClientWithResponses) NetworkingUpdatePrefixListWithBodyWithResponse(ctx context.Context, prefixListId Uuidv4, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NetworkingUpdatePrefixListResp, error) {
	rsp, err := c.NetworkingUpdatePrefixListWithBody(ctx, prefixListId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkingUpdatePrefixListResp(rsp)
}

func (c *ClientWithResponses) NetworkingUpdatePrefixListWithResponse(ctx context.Context, prefixListId Uuidv4, body NetworkingUpdatePrefixListJSONRequestBody, reqEditors ...RequestEditorFn) (*NetworkingUpdatePrefixListResp, error) {
	rsp, err := c.NetworkingUpdatePrefixList(ctx, prefixListId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkingUpdatePrefixListResp(rsp)
}

// NetworkingReadCidrRangesWithResponse request returning *NetworkingReadCidrRangesResp
func (c *ClientWithResponses) NetworkingReadCidrRangesWithResponse(ctx context.Context, params *NetworkingReadCidrRangesParams, reqEditors ...RequestEditorFn) (*NetworkingReadCidrRangesResp, error) {
	rsp, err := c.NetworkingReadCidrRanges(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkingReadCidrRangesResp(rsp)
}

// NetworkingDeleteCidrRangeWithResponse request returning *NetworkingDeleteCidrRangeResp
func (c *ClientWithResponses) NetworkingDeleteCidrRangeWithResponse(ctx context.Context, rangeId Uuidv4, reqEditors ...RequestEditorFn) (*NetworkingDeleteCidrRangeResp, error) {
	rsp, err := c.NetworkingDeleteCidrRange(ctx, rangeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkingDeleteCidrRangeResp(rsp)
}

// NetworkingReadCidrRangeWithResponse request returning *NetworkingReadCidrRangeResp
func (c *ClientWithResponses) NetworkingReadCidrRangeWithResponse(ctx context.Context, rangeId Uuidv4, params *NetworkingReadCidrRangeParams, reqEditors ...RequestEditorFn) (*NetworkingReadCidrRangeResp, error) {
	rsp, err := c.NetworkingReadCidrRange(ctx, rangeId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkingReadCidrRangeResp(rsp)
}

// NetworkingUpdateCidrRangeWithBodyWithResponse request with arbitrary body returning *NetworkingUpdateCidrRangeResp
func (c *ClientWithResponses) NetworkingUpdateCidrRangeWithBodyWithResponse(ctx context.Context, rangeId Uuidv4, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NetworkingUpdateCidrRangeResp, error) {
	rsp, err := c.NetworkingUpdateCidrRangeWithBody(ctx, rangeId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkingUpdateCidrRangeResp(rsp)
}

func (c *ClientWithResponses) NetworkingUpdateCidrRangeWithResponse(ctx context.Context, rangeId Uuidv4, body NetworkingUpdateCidrRangeJSONRequestBody, reqEditors ...RequestEditorFn) (*NetworkingUpdateCidrRangeResp, error) {
	rsp, err := c.NetworkingUpdateCidrRange(ctx, rangeId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkingUpdateCidrRangeResp(rsp)
}

// NetworkingReadVpcsWithResponse request returning *NetworkingReadVpcsResp
func (c *ClientWithResponses) NetworkingReadVpcsWithResponse(ctx context.Context, params *NetworkingReadVpcsParams, reqEditors ...RequestEditorFn) (*NetworkingReadVpcsResp, error) {
	rsp, err := c.NetworkingReadVpcs(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkingReadVpcsResp(rsp)
}

// NetworkingDeleteVpcWithResponse request returning *NetworkingDeleteVpcResp
func (c *ClientWithResponses) NetworkingDeleteVpcWithResponse(ctx context.Context, vpcId Uuidv4, reqEditors ...RequestEditorFn) (*NetworkingDeleteVpcResp, error) {
	rsp, err := c.NetworkingDeleteVpc(ctx, vpcId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkingDeleteVpcResp(rsp)
}

// NetworkingReadVpcWithResponse request returning *NetworkingReadVpcResp
func (c *ClientWithResponses) NetworkingReadVpcWithResponse(ctx context.Context, vpcId Uuidv4, params *NetworkingReadVpcParams, reqEditors ...RequestEditorFn) (*NetworkingReadVpcResp, error) {
	rsp, err := c.NetworkingReadVpc(ctx, vpcId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkingReadVpcResp(rsp)
}

// NetworkingUpdateVpcWithBodyWithResponse request with arbitrary body returning *NetworkingUpdateVpcResp
func (c *ClientWithResponses) NetworkingUpdateVpcWithBodyWithResponse(ctx context.Context, vpcId Uuidv4, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NetworkingUpdateVpcResp, error) {
	rsp, err := c.NetworkingUpdateVpcWithBody(ctx, vpcId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkingUpdateVpcResp(rsp)
}

func (c *ClientWithResponses) NetworkingUpdateVpcWithResponse(ctx context.Context, vpcId Uuidv4, body NetworkingUpdateVpcJSONRequestBody, reqEditors ...RequestEditorFn) (*NetworkingUpdateVpcResp, error) {
	rsp, err := c.NetworkingUpdateVpc(ctx, vpcId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkingUpdateVpcResp(rsp)
}

// NetworkingReadVpnConnectionsWithResponse request returning *NetworkingReadVpnConnectionsResp
func (c *ClientWithResponses) NetworkingReadVpnConnectionsWithResponse(ctx context.Context, params *NetworkingReadVpnConnectionsParams, reqEditors ...RequestEditorFn) (*NetworkingReadVpnConnectionsResp, error) {
	rsp, err := c.NetworkingReadVpnConnections(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkingReadVpnConnectionsResp(rsp)
}

// NetworkingDeleteVpnConnectionWithResponse request returning *NetworkingDeleteVpnConnectionResp
func (c *ClientWithResponses) NetworkingDeleteVpnConnectionWithResponse(ctx context.Context, vpnConnectionId Uuidv4, reqEditors ...RequestEditorFn) (*NetworkingDeleteVpnConnectionResp, error) {
	rsp, err := c.NetworkingDeleteVpnConnection(ctx, vpnConnectionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkingDeleteVpnConnectionResp(rsp)
}

// NetworkingReadVpnConnectionWithResponse request returning *NetworkingReadVpnConnectionResp
func (c *ClientWithResponses) NetworkingReadVpnConnectionWithResponse(ctx context.Context, vpnConnectionId Uuidv4, params *NetworkingReadVpnConnectionParams, reqEditors ...RequestEditorFn) (*NetworkingReadVpnConnectionResp, error) {
	rsp, err := c.NetworkingReadVpnConnection(ctx, vpnConnectionId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkingReadVpnConnectionResp(rsp)
}

// NetworkingUpdateVpnConnectionWithBodyWithResponse request with arbitrary body returning *NetworkingUpdateVpnConnectionResp
func (c *ClientWithResponses) NetworkingUpdateVpnConnectionWithBodyWithResponse(ctx context.Context, vpnConnectionId Uuidv4, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NetworkingUpdateVpnConnectionResp, error) {
	rsp, err := c.NetworkingUpdateVpnConnectionWithBody(ctx, vpnConnectionId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkingUpdateVpnConnectionResp(rsp)
}

func (c *ClientWithResponses) NetworkingUpdateVpnConnectionWithResponse(ctx context.Context, vpnConnectionId Uuidv4, body NetworkingUpdateVpnConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*NetworkingUpdateVpnConnectionResp, error) {
	rsp, err := c.NetworkingUpdateVpnConnection(ctx, vpnConnectionId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkingUpdateVpnConnectionResp(rsp)
}

// NetworkingReadVpnConnectionStatusWithResponse request returning *NetworkingReadVpnConnectionStatusResp
func (c *ClientWithResponses) NetworkingReadVpnConnectionStatusWithResponse(ctx context.Context, vpnConnectionId Uuidv4, reqEditors ...RequestEditorFn) (*NetworkingReadVpnConnectionStatusResp, error) {
	rsp, err := c.NetworkingReadVpnConnectionStatus(ctx, vpnConnectionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkingReadVpnConnectionStatusResp(rsp)
}

// NetworkingReadVpnCustomerGatewaysWithResponse request returning *NetworkingReadVpnCustomerGatewaysResp
func (c *ClientWithResponses) NetworkingReadVpnCustomerGatewaysWithResponse(ctx context.Context, params *NetworkingReadVpnCustomerGatewaysParams, reqEditors ...RequestEditorFn) (*NetworkingReadVpnCustomerGatewaysResp, error) {
	rsp, err := c.NetworkingReadVpnCustomerGateways(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkingReadVpnCustomerGatewaysResp(rsp)
}

// NetworkingCreateVpnCustomerGatewayWithBodyWithResponse request with arbitrary body returning *NetworkingCreateVpnCustomerGatewayResp
func (c *ClientWithResponses) NetworkingCreateVpnCustomerGatewayWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NetworkingCreateVpnCustomerGatewayResp, error) {
	rsp, err := c.NetworkingCreateVpnCustomerGatewayWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkingCreateVpnCustomerGatewayResp(rsp)
}

func (c *ClientWithResponses) NetworkingCreateVpnCustomerGatewayWithResponse(ctx context.Context, body NetworkingCreateVpnCustomerGatewayJSONRequestBody, reqEditors ...RequestEditorFn) (*NetworkingCreateVpnCustomerGatewayResp, error) {
	rsp, err := c.NetworkingCreateVpnCustomerGateway(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkingCreateVpnCustomerGatewayResp(rsp)
}

// NetworkingDeleteVpnCustomerGatewayWithResponse request returning *NetworkingDeleteVpnCustomerGatewayResp
func (c *ClientWithResponses) NetworkingDeleteVpnCustomerGatewayWithResponse(ctx context.Context, vpnCustomerGatewayId Uuidv4, reqEditors ...RequestEditorFn) (*NetworkingDeleteVpnCustomerGatewayResp, error) {
	rsp, err := c.NetworkingDeleteVpnCustomerGateway(ctx, vpnCustomerGatewayId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkingDeleteVpnCustomerGatewayResp(rsp)
}

// NetworkingReadVpnCustomerGatewayWithResponse request returning *NetworkingReadVpnCustomerGatewayResp
func (c *ClientWithResponses) NetworkingReadVpnCustomerGatewayWithResponse(ctx context.Context, vpnCustomerGatewayId Uuidv4, params *NetworkingReadVpnCustomerGatewayParams, reqEditors ...RequestEditorFn) (*NetworkingReadVpnCustomerGatewayResp, error) {
	rsp, err := c.NetworkingReadVpnCustomerGateway(ctx, vpnCustomerGatewayId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkingReadVpnCustomerGatewayResp(rsp)
}

// NetworkingUpdateVpnCustomerGatewayWithBodyWithResponse request with arbitrary body returning *NetworkingUpdateVpnCustomerGatewayResp
func (c *ClientWithResponses) NetworkingUpdateVpnCustomerGatewayWithBodyWithResponse(ctx context.Context, vpnCustomerGatewayId Uuidv4, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NetworkingUpdateVpnCustomerGatewayResp, error) {
	rsp, err := c.NetworkingUpdateVpnCustomerGatewayWithBody(ctx, vpnCustomerGatewayId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkingUpdateVpnCustomerGatewayResp(rsp)
}

func (c *ClientWithResponses) NetworkingUpdateVpnCustomerGatewayWithResponse(ctx context.Context, vpnCustomerGatewayId Uuidv4, body NetworkingUpdateVpnCustomerGatewayJSONRequestBody, reqEditors ...RequestEditorFn) (*NetworkingUpdateVpnCustomerGatewayResp, error) {
	rsp, err := c.NetworkingUpdateVpnCustomerGateway(ctx, vpnCustomerGatewayId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkingUpdateVpnCustomerGatewayResp(rsp)
}

// NetworkingCreateVpnConnectionWithBodyWithResponse request with arbitrary body returning *NetworkingCreateVpnConnectionResp
func (c *ClientWithResponses) NetworkingCreateVpnConnectionWithBodyWithResponse(ctx context.Context, vpnCustomerGatewayId Uuidv4, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NetworkingCreateVpnConnectionResp, error) {
	rsp, err := c.NetworkingCreateVpnConnectionWithBody(ctx, vpnCustomerGatewayId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkingCreateVpnConnectionResp(rsp)
}

func (c *ClientWithResponses) NetworkingCreateVpnConnectionWithResponse(ctx context.Context, vpnCustomerGatewayId Uuidv4, body NetworkingCreateVpnConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*NetworkingCreateVpnConnectionResp, error) {
	rsp, err := c.NetworkingCreateVpnConnection(ctx, vpnCustomerGatewayId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkingCreateVpnConnectionResp(rsp)
}

// NetworkingReadGatewayVpnConnectionsWithResponse request returning *NetworkingReadGatewayVpnConnectionsResp
func (c *ClientWithResponses) NetworkingReadGatewayVpnConnectionsWithResponse(ctx context.Context, vpnCustomerGatewayId Uuidv4, params *NetworkingReadGatewayVpnConnectionsParams, reqEditors ...RequestEditorFn) (*NetworkingReadGatewayVpnConnectionsResp, error) {
	rsp, err := c.NetworkingReadGatewayVpnConnections(ctx, vpnCustomerGatewayId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkingReadGatewayVpnConnectionsResp(rsp)
}

// NetworkingReadDxConnectionsWithResponse request returning *NetworkingReadDxConnectionsResp
func (c *ClientWithResponses) NetworkingReadDxConnectionsWithResponse(ctx context.Context, accountId Uuidv4, params *NetworkingReadDxConnectionsParams, reqEditors ...RequestEditorFn) (*NetworkingReadDxConnectionsResp, error) {
	rsp, err := c.NetworkingReadDxConnections(ctx, accountId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNetworkingReadDxConnectionsResp(rsp)
}

// OrganisationsReadOrganisationsWithResponse request returning *OrganisationsReadOrganisationsResp
func (c *ClientWithResponses) OrganisationsReadOrganisationsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*OrganisationsReadOrganisationsResp, error) {
	rsp, err := c.OrganisationsReadOrganisations(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrganisationsReadOrganisationsResp(rsp)
}

// OrganisationsReadOrganisationWithResponse request returning *OrganisationsReadOrganisationResp
func (c *ClientWithResponses) OrganisationsReadOrganisationWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*OrganisationsReadOrganisationResp, error) {
	rsp, err := c.OrganisationsReadOrganisation(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrganisationsReadOrganisationResp(rsp)
}

// OrganisationsReadOrganisationalUnitsWithResponse request returning *OrganisationsReadOrganisationalUnitsResp
func (c *ClientWithResponses) OrganisationsReadOrganisationalUnitsWithResponse(ctx context.Context, params *OrganisationsReadOrganisationalUnitsParams, reqEditors ...RequestEditorFn) (*OrganisationsReadOrganisationalUnitsResp, error) {
	rsp, err := c.OrganisationsReadOrganisationalUnits(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrganisationsReadOrganisationalUnitsResp(rsp)
}

// OrganisationsReadOrganisationalUnitWithResponse request returning *OrganisationsReadOrganisationalUnitResp
func (c *ClientWithResponses) OrganisationsReadOrganisationalUnitWithResponse(ctx context.Context, organisationalUnitId string, reqEditors ...RequestEditorFn) (*OrganisationsReadOrganisationalUnitResp, error) {
	rsp, err := c.OrganisationsReadOrganisationalUnit(ctx, organisationalUnitId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrganisationsReadOrganisationalUnitResp(rsp)
}

// OrganisationsReadPoliciesWithResponse request returning *OrganisationsReadPoliciesResp
func (c *ClientWithResponses) OrganisationsReadPoliciesWithResponse(ctx context.Context, params *OrganisationsReadPoliciesParams, reqEditors ...RequestEditorFn) (*OrganisationsReadPoliciesResp, error) {
	rsp, err := c.OrganisationsReadPolicies(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrganisationsReadPoliciesResp(rsp)
}

// OrganisationsCreatePolicyWithBodyWithResponse request with arbitrary body returning *OrganisationsCreatePolicyResp
func (c *ClientWithResponses) OrganisationsCreatePolicyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OrganisationsCreatePolicyResp, error) {
	rsp, err := c.OrganisationsCreatePolicyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrganisationsCreatePolicyResp(rsp)
}

func (c *ClientWithResponses) OrganisationsCreatePolicyWithResponse(ctx context.Context, body OrganisationsCreatePolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*OrganisationsCreatePolicyResp, error) {
	rsp, err := c.OrganisationsCreatePolicy(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrganisationsCreatePolicyResp(rsp)
}

// OrganisationsDetachPolicyWithResponse request returning *OrganisationsDetachPolicyResp
func (c *ClientWithResponses) OrganisationsDetachPolicyWithResponse(ctx context.Context, policyId string, reqEditors ...RequestEditorFn) (*OrganisationsDetachPolicyResp, error) {
	rsp, err := c.OrganisationsDetachPolicy(ctx, policyId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrganisationsDetachPolicyResp(rsp)
}

// OrganisationsAttachPolicyWithBodyWithResponse request with arbitrary body returning *OrganisationsAttachPolicyResp
func (c *ClientWithResponses) OrganisationsAttachPolicyWithBodyWithResponse(ctx context.Context, policyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OrganisationsAttachPolicyResp, error) {
	rsp, err := c.OrganisationsAttachPolicyWithBody(ctx, policyId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrganisationsAttachPolicyResp(rsp)
}

func (c *ClientWithResponses) OrganisationsAttachPolicyWithResponse(ctx context.Context, policyId string, body OrganisationsAttachPolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*OrganisationsAttachPolicyResp, error) {
	rsp, err := c.OrganisationsAttachPolicy(ctx, policyId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrganisationsAttachPolicyResp(rsp)
}

// OrganisationsDeletePolicyWithResponse request returning *OrganisationsDeletePolicyResp
func (c *ClientWithResponses) OrganisationsDeletePolicyWithResponse(ctx context.Context, policyId string, reqEditors ...RequestEditorFn) (*OrganisationsDeletePolicyResp, error) {
	rsp, err := c.OrganisationsDeletePolicy(ctx, policyId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrganisationsDeletePolicyResp(rsp)
}

// OrganisationsReadPolicyWithResponse request returning *OrganisationsReadPolicyResp
func (c *ClientWithResponses) OrganisationsReadPolicyWithResponse(ctx context.Context, policyId string, reqEditors ...RequestEditorFn) (*OrganisationsReadPolicyResp, error) {
	rsp, err := c.OrganisationsReadPolicy(ctx, policyId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrganisationsReadPolicyResp(rsp)
}

// OrganisationsUpdatePolicyWithBodyWithResponse request with arbitrary body returning *OrganisationsUpdatePolicyResp
func (c *ClientWithResponses) OrganisationsUpdatePolicyWithBodyWithResponse(ctx context.Context, policyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OrganisationsUpdatePolicyResp, error) {
	rsp, err := c.OrganisationsUpdatePolicyWithBody(ctx, policyId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrganisationsUpdatePolicyResp(rsp)
}

func (c *ClientWithResponses) OrganisationsUpdatePolicyWithResponse(ctx context.Context, policyId string, body OrganisationsUpdatePolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*OrganisationsUpdatePolicyResp, error) {
	rsp, err := c.OrganisationsUpdatePolicy(ctx, policyId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrganisationsUpdatePolicyResp(rsp)
}

// PublicCheckAliasWithResponse request returning *PublicCheckAliasResp
func (c *ClientWithResponses) PublicCheckAliasWithResponse(ctx context.Context, alias string, reqEditors ...RequestEditorFn) (*PublicCheckAliasResp, error) {
	rsp, err := c.PublicCheckAlias(ctx, alias, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePublicCheckAliasResp(rsp)
}

// PublicReadConfigWithResponse request returning *PublicReadConfigResp
func (c *ClientWithResponses) PublicReadConfigWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PublicReadConfigResp, error) {
	rsp, err := c.PublicReadConfig(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePublicReadConfigResp(rsp)
}

// ServicesReadConfigurationsWithResponse request returning *ServicesReadConfigurationsResp
func (c *ClientWithResponses) ServicesReadConfigurationsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ServicesReadConfigurationsResp, error) {
	rsp, err := c.ServicesReadConfigurations(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseServicesReadConfigurationsResp(rsp)
}

// ServicesReadSecurityHubConfigurationWithResponse request returning *ServicesReadSecurityHubConfigurationResp
func (c *ClientWithResponses) ServicesReadSecurityHubConfigurationWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ServicesReadSecurityHubConfigurationResp, error) {
	rsp, err := c.ServicesReadSecurityHubConfiguration(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseServicesReadSecurityHubConfigurationResp(rsp)
}

// ServicesConfigureSecurityHubWithBodyWithResponse request with arbitrary body returning *ServicesConfigureSecurityHubResp
func (c *ClientWithResponses) ServicesConfigureSecurityHubWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ServicesConfigureSecurityHubResp, error) {
	rsp, err := c.ServicesConfigureSecurityHubWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseServicesConfigureSecurityHubResp(rsp)
}

func (c *ClientWithResponses) ServicesConfigureSecurityHubWithResponse(ctx context.Context, body ServicesConfigureSecurityHubJSONRequestBody, reqEditors ...RequestEditorFn) (*ServicesConfigureSecurityHubResp, error) {
	rsp, err := c.ServicesConfigureSecurityHub(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseServicesConfigureSecurityHubResp(rsp)
}

// TasksReadTaskWithResponse request returning *TasksReadTaskResp
func (c *ClientWithResponses) TasksReadTaskWithResponse(ctx context.Context, taskId string, reqEditors ...RequestEditorFn) (*TasksReadTaskResp, error) {
	rsp, err := c.TasksReadTask(ctx, taskId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTasksReadTaskResp(rsp)
}

// TeamsReadUsersWithResponse request returning *TeamsReadUsersResp
func (c *ClientWithResponses) TeamsReadUsersWithResponse(ctx context.Context, params *TeamsReadUsersParams, reqEditors ...RequestEditorFn) (*TeamsReadUsersResp, error) {
	rsp, err := c.TeamsReadUsers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTeamsReadUsersResp(rsp)
}

// TeamsFetchCurrentUserWithResponse request returning *TeamsFetchCurrentUserResp
func (c *ClientWithResponses) TeamsFetchCurrentUserWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*TeamsFetchCurrentUserResp, error) {
	rsp, err := c.TeamsFetchCurrentUser(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTeamsFetchCurrentUserResp(rsp)
}

// TeamsDeleteUserWithResponse request returning *TeamsDeleteUserResp
func (c *ClientWithResponses) TeamsDeleteUserWithResponse(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*TeamsDeleteUserResp, error) {
	rsp, err := c.TeamsDeleteUser(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTeamsDeleteUserResp(rsp)
}

// TeamsReadUserWithResponse request returning *TeamsReadUserResp
func (c *ClientWithResponses) TeamsReadUserWithResponse(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*TeamsReadUserResp, error) {
	rsp, err := c.TeamsReadUser(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTeamsReadUserResp(rsp)
}

// WorkloadsReadCatalogueItemsWithResponse request returning *WorkloadsReadCatalogueItemsResp
func (c *ClientWithResponses) WorkloadsReadCatalogueItemsWithResponse(ctx context.Context, params *WorkloadsReadCatalogueItemsParams, reqEditors ...RequestEditorFn) (*WorkloadsReadCatalogueItemsResp, error) {
	rsp, err := c.WorkloadsReadCatalogueItems(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkloadsReadCatalogueItemsResp(rsp)
}

// WorkloadsCreateCatalogueItemWithBodyWithResponse request with arbitrary body returning *WorkloadsCreateCatalogueItemResp
func (c *ClientWithResponses) WorkloadsCreateCatalogueItemWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WorkloadsCreateCatalogueItemResp, error) {
	rsp, err := c.WorkloadsCreateCatalogueItemWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkloadsCreateCatalogueItemResp(rsp)
}

func (c *ClientWithResponses) WorkloadsCreateCatalogueItemWithResponse(ctx context.Context, body WorkloadsCreateCatalogueItemJSONRequestBody, reqEditors ...RequestEditorFn) (*WorkloadsCreateCatalogueItemResp, error) {
	rsp, err := c.WorkloadsCreateCatalogueItem(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkloadsCreateCatalogueItemResp(rsp)
}

// WorkloadsReadCatalogueManifestWithResponse request returning *WorkloadsReadCatalogueManifestResp
func (c *ClientWithResponses) WorkloadsReadCatalogueManifestWithResponse(ctx context.Context, versionId string, reqEditors ...RequestEditorFn) (*WorkloadsReadCatalogueManifestResp, error) {
	rsp, err := c.WorkloadsReadCatalogueManifest(ctx, versionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkloadsReadCatalogueManifestResp(rsp)
}

// WorkloadsReadCatalogueTemplateWithResponse request returning *WorkloadsReadCatalogueTemplateResp
func (c *ClientWithResponses) WorkloadsReadCatalogueTemplateWithResponse(ctx context.Context, versionId string, name string, reqEditors ...RequestEditorFn) (*WorkloadsReadCatalogueTemplateResp, error) {
	rsp, err := c.WorkloadsReadCatalogueTemplate(ctx, versionId, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkloadsReadCatalogueTemplateResp(rsp)
}

// WorkloadsDeleteCatalogueItemWithResponse request returning *WorkloadsDeleteCatalogueItemResp
func (c *ClientWithResponses) WorkloadsDeleteCatalogueItemWithResponse(ctx context.Context, catalogueId string, reqEditors ...RequestEditorFn) (*WorkloadsDeleteCatalogueItemResp, error) {
	rsp, err := c.WorkloadsDeleteCatalogueItem(ctx, catalogueId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkloadsDeleteCatalogueItemResp(rsp)
}

// WorkloadsReadCatalogueItemWithResponse request returning *WorkloadsReadCatalogueItemResp
func (c *ClientWithResponses) WorkloadsReadCatalogueItemWithResponse(ctx context.Context, catalogueId string, params *WorkloadsReadCatalogueItemParams, reqEditors ...RequestEditorFn) (*WorkloadsReadCatalogueItemResp, error) {
	rsp, err := c.WorkloadsReadCatalogueItem(ctx, catalogueId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkloadsReadCatalogueItemResp(rsp)
}

// WorkloadsCreateCatalogueVersionWithBodyWithResponse request with arbitrary body returning *WorkloadsCreateCatalogueVersionResp
func (c *ClientWithResponses) WorkloadsCreateCatalogueVersionWithBodyWithResponse(ctx context.Context, catalogueId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WorkloadsCreateCatalogueVersionResp, error) {
	rsp, err := c.WorkloadsCreateCatalogueVersionWithBody(ctx, catalogueId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkloadsCreateCatalogueVersionResp(rsp)
}

func (c *ClientWithResponses) WorkloadsCreateCatalogueVersionWithResponse(ctx context.Context, catalogueId string, body WorkloadsCreateCatalogueVersionJSONRequestBody, reqEditors ...RequestEditorFn) (*WorkloadsCreateCatalogueVersionResp, error) {
	rsp, err := c.WorkloadsCreateCatalogueVersion(ctx, catalogueId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkloadsCreateCatalogueVersionResp(rsp)
}

// WorkloadsDeleteCatalogueVersionWithResponse request returning *WorkloadsDeleteCatalogueVersionResp
func (c *ClientWithResponses) WorkloadsDeleteCatalogueVersionWithResponse(ctx context.Context, catalogueId string, versionId string, reqEditors ...RequestEditorFn) (*WorkloadsDeleteCatalogueVersionResp, error) {
	rsp, err := c.WorkloadsDeleteCatalogueVersion(ctx, catalogueId, versionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkloadsDeleteCatalogueVersionResp(rsp)
}

// WorkloadsReadCatalogueVersionWithResponse request returning *WorkloadsReadCatalogueVersionResp
func (c *ClientWithResponses) WorkloadsReadCatalogueVersionWithResponse(ctx context.Context, catalogueId string, versionId string, params *WorkloadsReadCatalogueVersionParams, reqEditors ...RequestEditorFn) (*WorkloadsReadCatalogueVersionResp, error) {
	rsp, err := c.WorkloadsReadCatalogueVersion(ctx, catalogueId, versionId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkloadsReadCatalogueVersionResp(rsp)
}

// WorkloadsUpdateAllWithBodyWithResponse request with arbitrary body returning *WorkloadsUpdateAllResp
func (c *ClientWithResponses) WorkloadsUpdateAllWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WorkloadsUpdateAllResp, error) {
	rsp, err := c.WorkloadsUpdateAllWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkloadsUpdateAllResp(rsp)
}

func (c *ClientWithResponses) WorkloadsUpdateAllWithResponse(ctx context.Context, body WorkloadsUpdateAllJSONRequestBody, reqEditors ...RequestEditorFn) (*WorkloadsUpdateAllResp, error) {
	rsp, err := c.WorkloadsUpdateAll(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkloadsUpdateAllResp(rsp)
}

// WorkloadsReadWorkloadsWithResponse request returning *WorkloadsReadWorkloadsResp
func (c *ClientWithResponses) WorkloadsReadWorkloadsWithResponse(ctx context.Context, params *WorkloadsReadWorkloadsParams, reqEditors ...RequestEditorFn) (*WorkloadsReadWorkloadsResp, error) {
	rsp, err := c.WorkloadsReadWorkloads(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkloadsReadWorkloadsResp(rsp)
}

// WorkloadsCreateWorkloadWithBodyWithResponse request with arbitrary body returning *WorkloadsCreateWorkloadResp
func (c *ClientWithResponses) WorkloadsCreateWorkloadWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WorkloadsCreateWorkloadResp, error) {
	rsp, err := c.WorkloadsCreateWorkloadWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkloadsCreateWorkloadResp(rsp)
}

func (c *ClientWithResponses) WorkloadsCreateWorkloadWithResponse(ctx context.Context, body WorkloadsCreateWorkloadJSONRequestBody, reqEditors ...RequestEditorFn) (*WorkloadsCreateWorkloadResp, error) {
	rsp, err := c.WorkloadsCreateWorkload(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkloadsCreateWorkloadResp(rsp)
}

// WorkloadsDeleteWorkloadWithResponse request returning *WorkloadsDeleteWorkloadResp
func (c *ClientWithResponses) WorkloadsDeleteWorkloadWithResponse(ctx context.Context, workloadId string, reqEditors ...RequestEditorFn) (*WorkloadsDeleteWorkloadResp, error) {
	rsp, err := c.WorkloadsDeleteWorkload(ctx, workloadId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkloadsDeleteWorkloadResp(rsp)
}

// WorkloadsReadWorkloadWithResponse request returning *WorkloadsReadWorkloadResp
func (c *ClientWithResponses) WorkloadsReadWorkloadWithResponse(ctx context.Context, workloadId string, params *WorkloadsReadWorkloadParams, reqEditors ...RequestEditorFn) (*WorkloadsReadWorkloadResp, error) {
	rsp, err := c.WorkloadsReadWorkload(ctx, workloadId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkloadsReadWorkloadResp(rsp)
}

// WorkloadsUpdateWorkloadWithBodyWithResponse request with arbitrary body returning *WorkloadsUpdateWorkloadResp
func (c *ClientWithResponses) WorkloadsUpdateWorkloadWithBodyWithResponse(ctx context.Context, workloadId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WorkloadsUpdateWorkloadResp, error) {
	rsp, err := c.WorkloadsUpdateWorkloadWithBody(ctx, workloadId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkloadsUpdateWorkloadResp(rsp)
}

func (c *ClientWithResponses) WorkloadsUpdateWorkloadWithResponse(ctx context.Context, workloadId string, body WorkloadsUpdateWorkloadJSONRequestBody, reqEditors ...RequestEditorFn) (*WorkloadsUpdateWorkloadResp, error) {
	rsp, err := c.WorkloadsUpdateWorkload(ctx, workloadId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkloadsUpdateWorkloadResp(rsp)
}

// ParseAccountsUpdateAccountTypeMembersResp parses an HTTP response from a AccountsUpdateAccountTypeMembersWithResponse call
func ParseAccountsUpdateAccountTypeMembersResp(rsp *http.Response) (*AccountsUpdateAccountTypeMembersResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccountsUpdateAccountTypeMembersResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AccountsUpdateAccountTypeMembersEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseAccountsUpdateAccountTypePoliciesResp parses an HTTP response from a AccountsUpdateAccountTypePoliciesWithResponse call
func ParseAccountsUpdateAccountTypePoliciesResp(rsp *http.Response) (*AccountsUpdateAccountTypePoliciesResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccountsUpdateAccountTypePoliciesResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AccountsUpdateAccountTypePoliciesEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseAccountsReadAccountsResp parses an HTTP response from a AccountsReadAccountsWithResponse call
func ParseAccountsReadAccountsResp(rsp *http.Response) (*AccountsReadAccountsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccountsReadAccountsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AccountsReadAccounts
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAccountsCreateAccountResp parses an HTTP response from a AccountsCreateAccountWithResponse call
func ParseAccountsCreateAccountResp(rsp *http.Response) (*AccountsCreateAccountResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccountsCreateAccountResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AccountsCreateAccountResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseAccountsCloseAccountResp parses an HTTP response from a AccountsCloseAccountWithResponse call
func ParseAccountsCloseAccountResp(rsp *http.Response) (*AccountsCloseAccountResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccountsCloseAccountResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AccountsCloseAccountResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseAccountsDiscoverAccountsResp parses an HTTP response from a AccountsDiscoverAccountsWithResponse call
func ParseAccountsDiscoverAccountsResp(rsp *http.Response) (*AccountsDiscoverAccountsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccountsDiscoverAccountsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AccountsDiscoverAccountsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseAccountsDiscoverAccountResp parses an HTTP response from a AccountsDiscoverAccountWithResponse call
func ParseAccountsDiscoverAccountResp(rsp *http.Response) (*AccountsDiscoverAccountResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccountsDiscoverAccountResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AccountsDiscoverAccountsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseAccountsOnboardAccountResp parses an HTTP response from a AccountsOnboardAccountWithResponse call
func ParseAccountsOnboardAccountResp(rsp *http.Response) (*AccountsOnboardAccountResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccountsOnboardAccountResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AccountsUpdateAccountResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseAccountsReadAccountTypesResp parses an HTTP response from a AccountsReadAccountTypesWithResponse call
func ParseAccountsReadAccountTypesResp(rsp *http.Response) (*AccountsReadAccountTypesResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccountsReadAccountTypesResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AccountsReadAccountTypes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAccountsCreateAccountTypeResp parses an HTTP response from a AccountsCreateAccountTypeWithResponse call
func ParseAccountsCreateAccountTypeResp(rsp *http.Response) (*AccountsCreateAccountTypeResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccountsCreateAccountTypeResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AccountsCreateAccountTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseAccountsUpdateAccountTypeAccessResp parses an HTTP response from a AccountsUpdateAccountTypeAccessWithResponse call
func ParseAccountsUpdateAccountTypeAccessResp(rsp *http.Response) (*AccountsUpdateAccountTypeAccessResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccountsUpdateAccountTypeAccessResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AccountsUpdateAccountTypeAccessEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseAccountsDeleteAccountTypeResp parses an HTTP response from a AccountsDeleteAccountTypeWithResponse call
func ParseAccountsDeleteAccountTypeResp(rsp *http.Response) (*AccountsDeleteAccountTypeResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccountsDeleteAccountTypeResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AccountsDeleteAccountTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseAccountsReadAccountTypeResp parses an HTTP response from a AccountsReadAccountTypeWithResponse call
func ParseAccountsReadAccountTypeResp(rsp *http.Response) (*AccountsReadAccountTypeResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccountsReadAccountTypeResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AccountsReadAccountTypes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAccountsUpdateAccountTypeResp parses an HTTP response from a AccountsUpdateAccountTypeWithResponse call
func ParseAccountsUpdateAccountTypeResp(rsp *http.Response) (*AccountsUpdateAccountTypeResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccountsUpdateAccountTypeResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AccountsUpdateAccountTypeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseAccountsReadAccountResp parses an HTTP response from a AccountsReadAccountWithResponse call
func ParseAccountsReadAccountResp(rsp *http.Response) (*AccountsReadAccountResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccountsReadAccountResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AccountsReadAccounts
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAccountsUpdateAccountResp parses an HTTP response from a AccountsUpdateAccountWithResponse call
func ParseAccountsUpdateAccountResp(rsp *http.Response) (*AccountsUpdateAccountResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AccountsUpdateAccountResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AccountsUpdateAccountResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseTeamsReadApiTokensResp parses an HTTP response from a TeamsReadApiTokensWithResponse call
func ParseTeamsReadApiTokensResp(rsp *http.Response) (*TeamsReadApiTokensResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TeamsReadApiTokensResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TeamsReadApiTokens
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTeamsCreateApiTokenResp parses an HTTP response from a TeamsCreateApiTokenWithResponse call
func ParseTeamsCreateApiTokenResp(rsp *http.Response) (*TeamsCreateApiTokenResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TeamsCreateApiTokenResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TeamsCreateApiTokenResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseTeamsDeleteApiTokenResp parses an HTTP response from a TeamsDeleteApiTokenWithResponse call
func ParseTeamsDeleteApiTokenResp(rsp *http.Response) (*TeamsDeleteApiTokenResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TeamsDeleteApiTokenResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TeamsDeleteApiTokenResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseTeamsReadApiTokenResp parses an HTTP response from a TeamsReadApiTokenWithResponse call
func ParseTeamsReadApiTokenResp(rsp *http.Response) (*TeamsReadApiTokenResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TeamsReadApiTokenResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TeamsReadApiTokens
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTeamsUpdateApiTokenResp parses an HTTP response from a TeamsUpdateApiTokenWithResponse call
func ParseTeamsUpdateApiTokenResp(rsp *http.Response) (*TeamsUpdateApiTokenResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TeamsUpdateApiTokenResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TeamsUpdateApiTokenResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseTeamsReadGroupsResp parses an HTTP response from a TeamsReadGroupsWithResponse call
func ParseTeamsReadGroupsResp(rsp *http.Response) (*TeamsReadGroupsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TeamsReadGroupsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TeamsReadGroupsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTeamsCreateGroupResp parses an HTTP response from a TeamsCreateGroupWithResponse call
func ParseTeamsCreateGroupResp(rsp *http.Response) (*TeamsCreateGroupResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TeamsCreateGroupResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TeamsCreateGroupEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest StaxEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseTeamsUpdateGroupMembersResp parses an HTTP response from a TeamsUpdateGroupMembersWithResponse call
func ParseTeamsUpdateGroupMembersResp(rsp *http.Response) (*TeamsUpdateGroupMembersResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TeamsUpdateGroupMembersResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TeamsUpdateGroupMembersEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest StaxEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseTeamsDeleteGroupResp parses an HTTP response from a TeamsDeleteGroupWithResponse call
func ParseTeamsDeleteGroupResp(rsp *http.Response) (*TeamsDeleteGroupResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TeamsDeleteGroupResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TeamsDeleteGroupEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest StaxEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest StaxEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseTeamsReadGroupResp parses an HTTP response from a TeamsReadGroupWithResponse call
func ParseTeamsReadGroupResp(rsp *http.Response) (*TeamsReadGroupResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TeamsReadGroupResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TeamsReadGroupsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseTeamsUpdateGroupResp parses an HTTP response from a TeamsUpdateGroupWithResponse call
func ParseTeamsUpdateGroupResp(rsp *http.Response) (*TeamsUpdateGroupResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TeamsUpdateGroupResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TeamsUpdateGroupEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest StaxEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest StaxEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseTeamsReadIdamUsersResp parses an HTTP response from a TeamsReadIdamUsersWithResponse call
func ParseTeamsReadIdamUsersResp(rsp *http.Response) (*TeamsReadIdamUsersResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TeamsReadIdamUsersResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TeamsReadIdamUsers
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseTeamsCreateUserResp parses an HTTP response from a TeamsCreateUserWithResponse call
func ParseTeamsCreateUserResp(rsp *http.Response) (*TeamsCreateUserResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TeamsCreateUserResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TeamsCreateUserEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseTeamsUpdateUserInviteResp parses an HTTP response from a TeamsUpdateUserInviteWithResponse call
func ParseTeamsUpdateUserInviteResp(rsp *http.Response) (*TeamsUpdateUserInviteResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TeamsUpdateUserInviteResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TeamsUpdateUserInviteEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseTeamsUpdateUserPasswordResp parses an HTTP response from a TeamsUpdateUserPasswordWithResponse call
func ParseTeamsUpdateUserPasswordResp(rsp *http.Response) (*TeamsUpdateUserPasswordResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TeamsUpdateUserPasswordResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TeamsUpdateUserPasswordEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseTeamsReadIdamUserResp parses an HTTP response from a TeamsReadIdamUserWithResponse call
func ParseTeamsReadIdamUserResp(rsp *http.Response) (*TeamsReadIdamUserResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TeamsReadIdamUserResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TeamsReadIdamUsers
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseTeamsUpdateUserResp parses an HTTP response from a TeamsUpdateUserWithResponse call
func ParseTeamsUpdateUserResp(rsp *http.Response) (*TeamsUpdateUserResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TeamsUpdateUserResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TeamsUpdateUserEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseNetworkingReadDnsResolversResp parses an HTTP response from a NetworkingReadDnsResolversWithResponse call
func ParseNetworkingReadDnsResolversResp(rsp *http.Response) (*NetworkingReadDnsResolversResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkingReadDnsResolversResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NetworkingReadDnsResolvers
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseNetworkingDeleteDnsResolverResp parses an HTTP response from a NetworkingDeleteDnsResolverWithResponse call
func ParseNetworkingDeleteDnsResolverResp(rsp *http.Response) (*NetworkingDeleteDnsResolverResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkingDeleteDnsResolverResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NetworkingDeleteDnsResolverEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseNetworkingReadDnsResolverResp parses an HTTP response from a NetworkingReadDnsResolverWithResponse call
func ParseNetworkingReadDnsResolverResp(rsp *http.Response) (*NetworkingReadDnsResolverResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkingReadDnsResolverResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NetworkingReadDnsResolvers
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseNetworkingUpdateDnsResolverResp parses an HTTP response from a NetworkingUpdateDnsResolverWithResponse call
func ParseNetworkingUpdateDnsResolverResp(rsp *http.Response) (*NetworkingUpdateDnsResolverResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkingUpdateDnsResolverResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NetworkingUpdateDnsResolverEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseNetworkingReadResolverDnsRulesResp parses an HTTP response from a NetworkingReadResolverDnsRulesWithResponse call
func ParseNetworkingReadResolverDnsRulesResp(rsp *http.Response) (*NetworkingReadResolverDnsRulesResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkingReadResolverDnsRulesResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NetworkingReadDnsRules
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseNetworkingCreateDnsRuleResp parses an HTTP response from a NetworkingCreateDnsRuleWithResponse call
func ParseNetworkingCreateDnsRuleResp(rsp *http.Response) (*NetworkingCreateDnsRuleResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkingCreateDnsRuleResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NetworkingCreateDnsRuleEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseNetworkingReadDnsRulesResp parses an HTTP response from a NetworkingReadDnsRulesWithResponse call
func ParseNetworkingReadDnsRulesResp(rsp *http.Response) (*NetworkingReadDnsRulesResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkingReadDnsRulesResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NetworkingReadDnsRules
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseNetworkingDeleteDnsRuleResp parses an HTTP response from a NetworkingDeleteDnsRuleWithResponse call
func ParseNetworkingDeleteDnsRuleResp(rsp *http.Response) (*NetworkingDeleteDnsRuleResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkingDeleteDnsRuleResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NetworkingDeleteDnsRuleEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseNetworkingReadDnsRuleResp parses an HTTP response from a NetworkingReadDnsRuleWithResponse call
func ParseNetworkingReadDnsRuleResp(rsp *http.Response) (*NetworkingReadDnsRuleResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkingReadDnsRuleResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NetworkingReadDnsRules
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseNetworkingUpdateDnsRuleResp parses an HTTP response from a NetworkingUpdateDnsRuleWithResponse call
func ParseNetworkingUpdateDnsRuleResp(rsp *http.Response) (*NetworkingUpdateDnsRuleResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkingUpdateDnsRuleResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NetworkingUpdateDnsRuleEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseNetworkingReadDxAssociationsResp parses an HTTP response from a NetworkingReadDxAssociationsWithResponse call
func ParseNetworkingReadDxAssociationsResp(rsp *http.Response) (*NetworkingReadDxAssociationsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkingReadDxAssociationsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NetworkingReadDxAssociations
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseNetworkingDeleteDxAssociationResp parses an HTTP response from a NetworkingDeleteDxAssociationWithResponse call
func ParseNetworkingDeleteDxAssociationResp(rsp *http.Response) (*NetworkingDeleteDxAssociationResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkingDeleteDxAssociationResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NetworkingDeleteDxAssociationEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseNetworkingReadDxAssociationResp parses an HTTP response from a NetworkingReadDxAssociationWithResponse call
func ParseNetworkingReadDxAssociationResp(rsp *http.Response) (*NetworkingReadDxAssociationResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkingReadDxAssociationResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NetworkingReadDxAssociations
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseNetworkingUpdateDxAssociationResp parses an HTTP response from a NetworkingUpdateDxAssociationWithResponse call
func ParseNetworkingUpdateDxAssociationResp(rsp *http.Response) (*NetworkingUpdateDxAssociationResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkingUpdateDxAssociationResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NetworkingUpdateDxAssociationEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseNetworkingReadDxGatewaysResp parses an HTTP response from a NetworkingReadDxGatewaysWithResponse call
func ParseNetworkingReadDxGatewaysResp(rsp *http.Response) (*NetworkingReadDxGatewaysResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkingReadDxGatewaysResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NetworkingReadDxGateways
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseNetworkingDeleteDxGatewayResp parses an HTTP response from a NetworkingDeleteDxGatewayWithResponse call
func ParseNetworkingDeleteDxGatewayResp(rsp *http.Response) (*NetworkingDeleteDxGatewayResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkingDeleteDxGatewayResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NetworkingDeleteDxGatewayEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseNetworkingReadDxGatewayResp parses an HTTP response from a NetworkingReadDxGatewayWithResponse call
func ParseNetworkingReadDxGatewayResp(rsp *http.Response) (*NetworkingReadDxGatewayResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkingReadDxGatewayResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NetworkingReadDxGateways
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseNetworkingReadGatewayDxAssociationsResp parses an HTTP response from a NetworkingReadGatewayDxAssociationsWithResponse call
func ParseNetworkingReadGatewayDxAssociationsResp(rsp *http.Response) (*NetworkingReadGatewayDxAssociationsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkingReadGatewayDxAssociationsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NetworkingReadDxAssociations
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseNetworkingCreateDxAssociationResp parses an HTTP response from a NetworkingCreateDxAssociationWithResponse call
func ParseNetworkingCreateDxAssociationResp(rsp *http.Response) (*NetworkingCreateDxAssociationResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkingCreateDxAssociationResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NetworkingCreateDxAssociationEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseNetworkingReadGatewayDxVifsResp parses an HTTP response from a NetworkingReadGatewayDxVifsWithResponse call
func ParseNetworkingReadGatewayDxVifsResp(rsp *http.Response) (*NetworkingReadGatewayDxVifsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkingReadGatewayDxVifsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NetworkingReadDxVifs
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseNetworkingCreateDxResourceResp parses an HTTP response from a NetworkingCreateDxResourceWithResponse call
func ParseNetworkingCreateDxResourceResp(rsp *http.Response) (*NetworkingCreateDxResourceResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkingCreateDxResourceResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NetworkingCreateDxResourceEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseNetworkingReadDxVifsResp parses an HTTP response from a NetworkingReadDxVifsWithResponse call
func ParseNetworkingReadDxVifsResp(rsp *http.Response) (*NetworkingReadDxVifsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkingReadDxVifsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NetworkingReadDxVifs
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseNetworkingDeleteDxVifResp parses an HTTP response from a NetworkingDeleteDxVifWithResponse call
func ParseNetworkingDeleteDxVifResp(rsp *http.Response) (*NetworkingDeleteDxVifResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkingDeleteDxVifResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NetworkingDeleteDxVifEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseNetworkingReadDxVifResp parses an HTTP response from a NetworkingReadDxVifWithResponse call
func ParseNetworkingReadDxVifResp(rsp *http.Response) (*NetworkingReadDxVifResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkingReadDxVifResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NetworkingReadDxVifs
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseNetworkingUpdateDxVifResp parses an HTTP response from a NetworkingUpdateDxVifWithResponse call
func ParseNetworkingUpdateDxVifResp(rsp *http.Response) (*NetworkingUpdateDxVifResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkingUpdateDxVifResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NetworkingUpdateDxVifEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseNetworkingReadDxVifStatusResp parses an HTTP response from a NetworkingReadDxVifStatusWithResponse call
func ParseNetworkingReadDxVifStatusResp(rsp *http.Response) (*NetworkingReadDxVifStatusResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkingReadDxVifStatusResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NetworkingReadDxVifStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseNetworkingReadCidrExclusionsResp parses an HTTP response from a NetworkingReadCidrExclusionsWithResponse call
func ParseNetworkingReadCidrExclusionsResp(rsp *http.Response) (*NetworkingReadCidrExclusionsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkingReadCidrExclusionsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NetworkingReadCidrExclusions
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseNetworkingDeleteCidrExclusionResp parses an HTTP response from a NetworkingDeleteCidrExclusionWithResponse call
func ParseNetworkingDeleteCidrExclusionResp(rsp *http.Response) (*NetworkingDeleteCidrExclusionResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkingDeleteCidrExclusionResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NetworkingReadCidrExclusions
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseNetworkingReadCidrExclusionResp parses an HTTP response from a NetworkingReadCidrExclusionWithResponse call
func ParseNetworkingReadCidrExclusionResp(rsp *http.Response) (*NetworkingReadCidrExclusionResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkingReadCidrExclusionResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NetworkingReadCidrExclusions
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseNetworkingUpdateCidrExclusionResp parses an HTTP response from a NetworkingUpdateCidrExclusionWithResponse call
func ParseNetworkingUpdateCidrExclusionResp(rsp *http.Response) (*NetworkingUpdateCidrExclusionResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkingUpdateCidrExclusionResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NetworkingUpdateCidrExclusion
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseNetworkingReadHubPeeringsResp parses an HTTP response from a NetworkingReadHubPeeringsWithResponse call
func ParseNetworkingReadHubPeeringsResp(rsp *http.Response) (*NetworkingReadHubPeeringsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkingReadHubPeeringsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NetworkingReadHubPeerings
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseNetworkingDeleteHubPeeringResp parses an HTTP response from a NetworkingDeleteHubPeeringWithResponse call
func ParseNetworkingDeleteHubPeeringResp(rsp *http.Response) (*NetworkingDeleteHubPeeringResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkingDeleteHubPeeringResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NetworkingDeleteHubPeeringEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseNetworkingReadHubPeeringResp parses an HTTP response from a NetworkingReadHubPeeringWithResponse call
func ParseNetworkingReadHubPeeringResp(rsp *http.Response) (*NetworkingReadHubPeeringResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkingReadHubPeeringResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NetworkingReadHubPeerings
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseNetworkingUpdateHubPeeringResp parses an HTTP response from a NetworkingUpdateHubPeeringWithResponse call
func ParseNetworkingUpdateHubPeeringResp(rsp *http.Response) (*NetworkingUpdateHubPeeringResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkingUpdateHubPeeringResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NetworkingUpdateHubPeeringEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseNetworkingReadHubsResp parses an HTTP response from a NetworkingReadHubsWithResponse call
func ParseNetworkingReadHubsResp(rsp *http.Response) (*NetworkingReadHubsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkingReadHubsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NetworkingReadHubs
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseNetworkingCreateHubResp parses an HTTP response from a NetworkingCreateHubWithResponse call
func ParseNetworkingCreateHubResp(rsp *http.Response) (*NetworkingCreateHubResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkingCreateHubResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NetworkingCreateHubEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseNetworkingDeleteHubResp parses an HTTP response from a NetworkingDeleteHubWithResponse call
func ParseNetworkingDeleteHubResp(rsp *http.Response) (*NetworkingDeleteHubResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkingDeleteHubResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NetworkingDeleteHubEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseNetworkingReadHubResp parses an HTTP response from a NetworkingReadHubWithResponse call
func ParseNetworkingReadHubResp(rsp *http.Response) (*NetworkingReadHubResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkingReadHubResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NetworkingReadHubs
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseNetworkingUpdateHubResp parses an HTTP response from a NetworkingUpdateHubWithResponse call
func ParseNetworkingUpdateHubResp(rsp *http.Response) (*NetworkingUpdateHubResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkingUpdateHubResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NetworkingUpdateHubEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseNetworkingReadHubDnsResolversResp parses an HTTP response from a NetworkingReadHubDnsResolversWithResponse call
func ParseNetworkingReadHubDnsResolversResp(rsp *http.Response) (*NetworkingReadHubDnsResolversResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkingReadHubDnsResolversResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NetworkingReadDnsResolvers
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseNetworkingCreateDnsResolverResp parses an HTTP response from a NetworkingCreateDnsResolverWithResponse call
func ParseNetworkingCreateDnsResolverResp(rsp *http.Response) (*NetworkingCreateDnsResolverResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkingCreateDnsResolverResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NetworkingCreateDnsResolverEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseNetworkingReadHubDxAssociationsResp parses an HTTP response from a NetworkingReadHubDxAssociationsWithResponse call
func ParseNetworkingReadHubDxAssociationsResp(rsp *http.Response) (*NetworkingReadHubDxAssociationsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkingReadHubDxAssociationsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NetworkingReadDxAssociations
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseNetworkingReadHubDxGatewaysResp parses an HTTP response from a NetworkingReadHubDxGatewaysWithResponse call
func ParseNetworkingReadHubDxGatewaysResp(rsp *http.Response) (*NetworkingReadHubDxGatewaysResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkingReadHubDxGatewaysResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NetworkingReadDxGateways
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseNetworkingReadHubCidrExclusionsResp parses an HTTP response from a NetworkingReadHubCidrExclusionsWithResponse call
func ParseNetworkingReadHubCidrExclusionsResp(rsp *http.Response) (*NetworkingReadHubCidrExclusionsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkingReadHubCidrExclusionsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NetworkingReadCidrExclusions
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseNetworkingCreateCidrExclusionResp parses an HTTP response from a NetworkingCreateCidrExclusionWithResponse call
func ParseNetworkingCreateCidrExclusionResp(rsp *http.Response) (*NetworkingCreateCidrExclusionResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkingCreateCidrExclusionResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NetworkingReadCidrExclusions
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseNetworkingReadHubPrefixListsResp parses an HTTP response from a NetworkingReadHubPrefixListsWithResponse call
func ParseNetworkingReadHubPrefixListsResp(rsp *http.Response) (*NetworkingReadHubPrefixListsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkingReadHubPrefixListsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NetworkingReadPrefixLists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseNetworkingCreateHubPrefixListResp parses an HTTP response from a NetworkingCreateHubPrefixListWithResponse call
func ParseNetworkingCreateHubPrefixListResp(rsp *http.Response) (*NetworkingCreateHubPrefixListResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkingCreateHubPrefixListResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NetworkingCreatePrefixListEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseNetworkingCreateVpcPrefixListResp parses an HTTP response from a NetworkingCreateVpcPrefixListWithResponse call
func ParseNetworkingCreateVpcPrefixListResp(rsp *http.Response) (*NetworkingCreateVpcPrefixListResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkingCreateVpcPrefixListResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NetworkingCreatePrefixListEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseNetworkingReadHubCidrRangesResp parses an HTTP response from a NetworkingReadHubCidrRangesWithResponse call
func ParseNetworkingReadHubCidrRangesResp(rsp *http.Response) (*NetworkingReadHubCidrRangesResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkingReadHubCidrRangesResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NetworkingReadCidrRanges
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseNetworkingCreateCidrRangeResp parses an HTTP response from a NetworkingCreateCidrRangeWithResponse call
func ParseNetworkingCreateCidrRangeResp(rsp *http.Response) (*NetworkingCreateCidrRangeResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkingCreateCidrRangeResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NetworkingReadCidrRanges
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseNetworkingReadHubVpcsResp parses an HTTP response from a NetworkingReadHubVpcsWithResponse call
func ParseNetworkingReadHubVpcsResp(rsp *http.Response) (*NetworkingReadHubVpcsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkingReadHubVpcsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NetworkingReadVpcs
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseNetworkingCreateVpcResp parses an HTTP response from a NetworkingCreateVpcWithResponse call
func ParseNetworkingCreateVpcResp(rsp *http.Response) (*NetworkingCreateVpcResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkingCreateVpcResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NetworkingCreateVpcEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseNetworkingReadHubVpnConnectionsResp parses an HTTP response from a NetworkingReadHubVpnConnectionsWithResponse call
func ParseNetworkingReadHubVpnConnectionsResp(rsp *http.Response) (*NetworkingReadHubVpnConnectionsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkingReadHubVpnConnectionsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NetworkingReadVpnConnections
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseNetworkingReadHubVpnCustomerGatewaysResp parses an HTTP response from a NetworkingReadHubVpnCustomerGatewaysWithResponse call
func ParseNetworkingReadHubVpnCustomerGatewaysResp(rsp *http.Response) (*NetworkingReadHubVpnCustomerGatewaysResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkingReadHubVpnCustomerGatewaysResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NetworkingReadVpnCustomerGateways
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseNetworkingReadHubHubPeeringsResp parses an HTTP response from a NetworkingReadHubHubPeeringsWithResponse call
func ParseNetworkingReadHubHubPeeringsResp(rsp *http.Response) (*NetworkingReadHubHubPeeringsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkingReadHubHubPeeringsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NetworkingReadHubPeerings
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseNetworkingCreateHubPeeringResp parses an HTTP response from a NetworkingCreateHubPeeringWithResponse call
func ParseNetworkingCreateHubPeeringResp(rsp *http.Response) (*NetworkingCreateHubPeeringResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkingCreateHubPeeringResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NetworkingCreateHubPeeringEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseNetworkingReadPrefixListsResp parses an HTTP response from a NetworkingReadPrefixListsWithResponse call
func ParseNetworkingReadPrefixListsResp(rsp *http.Response) (*NetworkingReadPrefixListsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkingReadPrefixListsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NetworkingReadPrefixLists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseNetworkingUpdateHubPrefixListAssociationResp parses an HTTP response from a NetworkingUpdateHubPrefixListAssociationWithResponse call
func ParseNetworkingUpdateHubPrefixListAssociationResp(rsp *http.Response) (*NetworkingUpdateHubPrefixListAssociationResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkingUpdateHubPrefixListAssociationResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NetworkingUpdatePrefixListAssociationEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseNetworkingUpdateVpcPrefixListAssociationResp parses an HTTP response from a NetworkingUpdateVpcPrefixListAssociationWithResponse call
func ParseNetworkingUpdateVpcPrefixListAssociationResp(rsp *http.Response) (*NetworkingUpdateVpcPrefixListAssociationResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkingUpdateVpcPrefixListAssociationResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NetworkingUpdatePrefixListAssociationEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseNetworkingDeletePrefixListResp parses an HTTP response from a NetworkingDeletePrefixListWithResponse call
func ParseNetworkingDeletePrefixListResp(rsp *http.Response) (*NetworkingDeletePrefixListResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkingDeletePrefixListResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NetworkingDeletePrefixListEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseNetworkingReadPrefixListResp parses an HTTP response from a NetworkingReadPrefixListWithResponse call
func ParseNetworkingReadPrefixListResp(rsp *http.Response) (*NetworkingReadPrefixListResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkingReadPrefixListResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NetworkingReadPrefixLists
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseNetworkingUpdatePrefixListResp parses an HTTP response from a NetworkingUpdatePrefixListWithResponse call
func ParseNetworkingUpdatePrefixListResp(rsp *http.Response) (*NetworkingUpdatePrefixListResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkingUpdatePrefixListResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NetworkingUpdatePrefixListEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseNetworkingReadCidrRangesResp parses an HTTP response from a NetworkingReadCidrRangesWithResponse call
func ParseNetworkingReadCidrRangesResp(rsp *http.Response) (*NetworkingReadCidrRangesResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkingReadCidrRangesResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NetworkingReadCidrRanges
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseNetworkingDeleteCidrRangeResp parses an HTTP response from a NetworkingDeleteCidrRangeWithResponse call
func ParseNetworkingDeleteCidrRangeResp(rsp *http.Response) (*NetworkingDeleteCidrRangeResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkingDeleteCidrRangeResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NetworkingReadCidrRanges
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseNetworkingReadCidrRangeResp parses an HTTP response from a NetworkingReadCidrRangeWithResponse call
func ParseNetworkingReadCidrRangeResp(rsp *http.Response) (*NetworkingReadCidrRangeResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkingReadCidrRangeResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NetworkingReadCidrRanges
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseNetworkingUpdateCidrRangeResp parses an HTTP response from a NetworkingUpdateCidrRangeWithResponse call
func ParseNetworkingUpdateCidrRangeResp(rsp *http.Response) (*NetworkingUpdateCidrRangeResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkingUpdateCidrRangeResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NetworkingUpdateCidrRange
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseNetworkingReadVpcsResp parses an HTTP response from a NetworkingReadVpcsWithResponse call
func ParseNetworkingReadVpcsResp(rsp *http.Response) (*NetworkingReadVpcsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkingReadVpcsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NetworkingReadVpcs
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseNetworkingDeleteVpcResp parses an HTTP response from a NetworkingDeleteVpcWithResponse call
func ParseNetworkingDeleteVpcResp(rsp *http.Response) (*NetworkingDeleteVpcResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkingDeleteVpcResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NetworkingDeleteVpcEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseNetworkingReadVpcResp parses an HTTP response from a NetworkingReadVpcWithResponse call
func ParseNetworkingReadVpcResp(rsp *http.Response) (*NetworkingReadVpcResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkingReadVpcResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NetworkingReadVpcs
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseNetworkingUpdateVpcResp parses an HTTP response from a NetworkingUpdateVpcWithResponse call
func ParseNetworkingUpdateVpcResp(rsp *http.Response) (*NetworkingUpdateVpcResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkingUpdateVpcResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NetworkingUpdateVpcEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseNetworkingReadVpnConnectionsResp parses an HTTP response from a NetworkingReadVpnConnectionsWithResponse call
func ParseNetworkingReadVpnConnectionsResp(rsp *http.Response) (*NetworkingReadVpnConnectionsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkingReadVpnConnectionsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NetworkingReadVpnConnections
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseNetworkingDeleteVpnConnectionResp parses an HTTP response from a NetworkingDeleteVpnConnectionWithResponse call
func ParseNetworkingDeleteVpnConnectionResp(rsp *http.Response) (*NetworkingDeleteVpnConnectionResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkingDeleteVpnConnectionResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NetworkingDeleteVpnConnectionEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseNetworkingReadVpnConnectionResp parses an HTTP response from a NetworkingReadVpnConnectionWithResponse call
func ParseNetworkingReadVpnConnectionResp(rsp *http.Response) (*NetworkingReadVpnConnectionResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkingReadVpnConnectionResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NetworkingReadVpnConnections
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseNetworkingUpdateVpnConnectionResp parses an HTTP response from a NetworkingUpdateVpnConnectionWithResponse call
func ParseNetworkingUpdateVpnConnectionResp(rsp *http.Response) (*NetworkingUpdateVpnConnectionResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkingUpdateVpnConnectionResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NetworkingUpdateVpnConnectionEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseNetworkingReadVpnConnectionStatusResp parses an HTTP response from a NetworkingReadVpnConnectionStatusWithResponse call
func ParseNetworkingReadVpnConnectionStatusResp(rsp *http.Response) (*NetworkingReadVpnConnectionStatusResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkingReadVpnConnectionStatusResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NetworkingReadVpnConnectionStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseNetworkingReadVpnCustomerGatewaysResp parses an HTTP response from a NetworkingReadVpnCustomerGatewaysWithResponse call
func ParseNetworkingReadVpnCustomerGatewaysResp(rsp *http.Response) (*NetworkingReadVpnCustomerGatewaysResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkingReadVpnCustomerGatewaysResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NetworkingReadVpnCustomerGateways
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseNetworkingCreateVpnCustomerGatewayResp parses an HTTP response from a NetworkingCreateVpnCustomerGatewayWithResponse call
func ParseNetworkingCreateVpnCustomerGatewayResp(rsp *http.Response) (*NetworkingCreateVpnCustomerGatewayResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkingCreateVpnCustomerGatewayResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NetworkingCreateVpnCustomerGatewayEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseNetworkingDeleteVpnCustomerGatewayResp parses an HTTP response from a NetworkingDeleteVpnCustomerGatewayWithResponse call
func ParseNetworkingDeleteVpnCustomerGatewayResp(rsp *http.Response) (*NetworkingDeleteVpnCustomerGatewayResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkingDeleteVpnCustomerGatewayResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NetworkingDeleteVpnCustomerGatewayEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseNetworkingReadVpnCustomerGatewayResp parses an HTTP response from a NetworkingReadVpnCustomerGatewayWithResponse call
func ParseNetworkingReadVpnCustomerGatewayResp(rsp *http.Response) (*NetworkingReadVpnCustomerGatewayResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkingReadVpnCustomerGatewayResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NetworkingReadVpnCustomerGateways
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseNetworkingUpdateVpnCustomerGatewayResp parses an HTTP response from a NetworkingUpdateVpnCustomerGatewayWithResponse call
func ParseNetworkingUpdateVpnCustomerGatewayResp(rsp *http.Response) (*NetworkingUpdateVpnCustomerGatewayResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkingUpdateVpnCustomerGatewayResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NetworkingUpdateVpnCustomerGatewayEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseNetworkingCreateVpnConnectionResp parses an HTTP response from a NetworkingCreateVpnConnectionWithResponse call
func ParseNetworkingCreateVpnConnectionResp(rsp *http.Response) (*NetworkingCreateVpnConnectionResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkingCreateVpnConnectionResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NetworkingCreateVpnConnectionEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseNetworkingReadGatewayVpnConnectionsResp parses an HTTP response from a NetworkingReadGatewayVpnConnectionsWithResponse call
func ParseNetworkingReadGatewayVpnConnectionsResp(rsp *http.Response) (*NetworkingReadGatewayVpnConnectionsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkingReadGatewayVpnConnectionsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NetworkingReadVpnConnections
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseNetworkingReadDxConnectionsResp parses an HTTP response from a NetworkingReadDxConnectionsWithResponse call
func ParseNetworkingReadDxConnectionsResp(rsp *http.Response) (*NetworkingReadDxConnectionsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NetworkingReadDxConnectionsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NetworkingReadDxConnections
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseOrganisationsReadOrganisationsResp parses an HTTP response from a OrganisationsReadOrganisationsWithResponse call
func ParseOrganisationsReadOrganisationsResp(rsp *http.Response) (*OrganisationsReadOrganisationsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OrganisationsReadOrganisationsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrganisationsReadOrganisations
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseOrganisationsReadOrganisationResp parses an HTTP response from a OrganisationsReadOrganisationWithResponse call
func ParseOrganisationsReadOrganisationResp(rsp *http.Response) (*OrganisationsReadOrganisationResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OrganisationsReadOrganisationResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrganisationsReadOrganisations
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseOrganisationsReadOrganisationalUnitsResp parses an HTTP response from a OrganisationsReadOrganisationalUnitsWithResponse call
func ParseOrganisationsReadOrganisationalUnitsResp(rsp *http.Response) (*OrganisationsReadOrganisationalUnitsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OrganisationsReadOrganisationalUnitsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrganisationsReadOrganisationalUnits
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseOrganisationsReadOrganisationalUnitResp parses an HTTP response from a OrganisationsReadOrganisationalUnitWithResponse call
func ParseOrganisationsReadOrganisationalUnitResp(rsp *http.Response) (*OrganisationsReadOrganisationalUnitResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OrganisationsReadOrganisationalUnitResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrganisationsReadOrganisationalUnits
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseOrganisationsReadPoliciesResp parses an HTTP response from a OrganisationsReadPoliciesWithResponse call
func ParseOrganisationsReadPoliciesResp(rsp *http.Response) (*OrganisationsReadPoliciesResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OrganisationsReadPoliciesResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrganisationsReadPolicies
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseOrganisationsCreatePolicyResp parses an HTTP response from a OrganisationsCreatePolicyWithResponse call
func ParseOrganisationsCreatePolicyResp(rsp *http.Response) (*OrganisationsCreatePolicyResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OrganisationsCreatePolicyResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrganisationsCreatePolicyEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseOrganisationsDetachPolicyResp parses an HTTP response from a OrganisationsDetachPolicyWithResponse call
func ParseOrganisationsDetachPolicyResp(rsp *http.Response) (*OrganisationsDetachPolicyResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OrganisationsDetachPolicyResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrganisationsDetachPolicyEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseOrganisationsAttachPolicyResp parses an HTTP response from a OrganisationsAttachPolicyWithResponse call
func ParseOrganisationsAttachPolicyResp(rsp *http.Response) (*OrganisationsAttachPolicyResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OrganisationsAttachPolicyResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrganisationsAttachPolicyEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseOrganisationsDeletePolicyResp parses an HTTP response from a OrganisationsDeletePolicyWithResponse call
func ParseOrganisationsDeletePolicyResp(rsp *http.Response) (*OrganisationsDeletePolicyResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OrganisationsDeletePolicyResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrganisationsDeletePolicyEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseOrganisationsReadPolicyResp parses an HTTP response from a OrganisationsReadPolicyWithResponse call
func ParseOrganisationsReadPolicyResp(rsp *http.Response) (*OrganisationsReadPolicyResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OrganisationsReadPolicyResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrganisationsReadPolicies
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseOrganisationsUpdatePolicyResp parses an HTTP response from a OrganisationsUpdatePolicyWithResponse call
func ParseOrganisationsUpdatePolicyResp(rsp *http.Response) (*OrganisationsUpdatePolicyResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OrganisationsUpdatePolicyResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrganisationsUpdatePolicyEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePublicCheckAliasResp parses an HTTP response from a PublicCheckAliasWithResponse call
func ParsePublicCheckAliasResp(rsp *http.Response) (*PublicCheckAliasResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PublicCheckAliasResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PublicCheckAlias
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest PublicCheckAlias
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParsePublicReadConfigResp parses an HTTP response from a PublicReadConfigWithResponse call
func ParsePublicReadConfigResp(rsp *http.Response) (*PublicReadConfigResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PublicReadConfigResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PublicReadConfig
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseServicesReadConfigurationsResp parses an HTTP response from a ServicesReadConfigurationsWithResponse call
func ParseServicesReadConfigurationsResp(rsp *http.Response) (*ServicesReadConfigurationsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ServicesReadConfigurationsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ServicesReadConfigurations
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseServicesReadSecurityHubConfigurationResp parses an HTTP response from a ServicesReadSecurityHubConfigurationWithResponse call
func ParseServicesReadSecurityHubConfigurationResp(rsp *http.Response) (*ServicesReadSecurityHubConfigurationResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ServicesReadSecurityHubConfigurationResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ServicesReadSecurityHubConfiguration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseServicesConfigureSecurityHubResp parses an HTTP response from a ServicesConfigureSecurityHubWithResponse call
func ParseServicesConfigureSecurityHubResp(rsp *http.Response) (*ServicesConfigureSecurityHubResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ServicesConfigureSecurityHubResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ServicesConfigureSecurityHubEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseTasksReadTaskResp parses an HTTP response from a TasksReadTaskWithResponse call
func ParseTasksReadTaskResp(rsp *http.Response) (*TasksReadTaskResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TasksReadTaskResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TasksReadTask
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseTeamsReadUsersResp parses an HTTP response from a TeamsReadUsersWithResponse call
func ParseTeamsReadUsersResp(rsp *http.Response) (*TeamsReadUsersResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TeamsReadUsersResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TeamsReadUsers
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseTeamsFetchCurrentUserResp parses an HTTP response from a TeamsFetchCurrentUserWithResponse call
func ParseTeamsFetchCurrentUserResp(rsp *http.Response) (*TeamsFetchCurrentUserResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TeamsFetchCurrentUserResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TeamsReadUsers
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseTeamsDeleteUserResp parses an HTTP response from a TeamsDeleteUserWithResponse call
func ParseTeamsDeleteUserResp(rsp *http.Response) (*TeamsDeleteUserResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TeamsDeleteUserResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TeamsDeleteUserResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseTeamsReadUserResp parses an HTTP response from a TeamsReadUserWithResponse call
func ParseTeamsReadUserResp(rsp *http.Response) (*TeamsReadUserResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TeamsReadUserResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TeamsReadUsers
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseWorkloadsReadCatalogueItemsResp parses an HTTP response from a WorkloadsReadCatalogueItemsWithResponse call
func ParseWorkloadsReadCatalogueItemsResp(rsp *http.Response) (*WorkloadsReadCatalogueItemsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WorkloadsReadCatalogueItemsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkloadsReadCatalogueItems
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseWorkloadsCreateCatalogueItemResp parses an HTTP response from a WorkloadsCreateCatalogueItemWithResponse call
func ParseWorkloadsCreateCatalogueItemResp(rsp *http.Response) (*WorkloadsCreateCatalogueItemResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WorkloadsCreateCatalogueItemResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreateCatalogueEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseWorkloadsReadCatalogueManifestResp parses an HTTP response from a WorkloadsReadCatalogueManifestWithResponse call
func ParseWorkloadsReadCatalogueManifestResp(rsp *http.Response) (*WorkloadsReadCatalogueManifestResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WorkloadsReadCatalogueManifestResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkloadsReadCatalogueManifest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseWorkloadsReadCatalogueTemplateResp parses an HTTP response from a WorkloadsReadCatalogueTemplateWithResponse call
func ParseWorkloadsReadCatalogueTemplateResp(rsp *http.Response) (*WorkloadsReadCatalogueTemplateResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WorkloadsReadCatalogueTemplateResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkloadsReadCatalogueTemplate
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseWorkloadsDeleteCatalogueItemResp parses an HTTP response from a WorkloadsDeleteCatalogueItemWithResponse call
func ParseWorkloadsDeleteCatalogueItemResp(rsp *http.Response) (*WorkloadsDeleteCatalogueItemResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WorkloadsDeleteCatalogueItemResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeleteCatalogueEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseWorkloadsReadCatalogueItemResp parses an HTTP response from a WorkloadsReadCatalogueItemWithResponse call
func ParseWorkloadsReadCatalogueItemResp(rsp *http.Response) (*WorkloadsReadCatalogueItemResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WorkloadsReadCatalogueItemResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkloadsReadCatalogueItems
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseWorkloadsCreateCatalogueVersionResp parses an HTTP response from a WorkloadsCreateCatalogueVersionWithResponse call
func ParseWorkloadsCreateCatalogueVersionResp(rsp *http.Response) (*WorkloadsCreateCatalogueVersionResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WorkloadsCreateCatalogueVersionResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreateVersionEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseWorkloadsDeleteCatalogueVersionResp parses an HTTP response from a WorkloadsDeleteCatalogueVersionWithResponse call
func ParseWorkloadsDeleteCatalogueVersionResp(rsp *http.Response) (*WorkloadsDeleteCatalogueVersionResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WorkloadsDeleteCatalogueVersionResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeleteVersionEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseWorkloadsReadCatalogueVersionResp parses an HTTP response from a WorkloadsReadCatalogueVersionWithResponse call
func ParseWorkloadsReadCatalogueVersionResp(rsp *http.Response) (*WorkloadsReadCatalogueVersionResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WorkloadsReadCatalogueVersionResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkloadsReadCatalogueVersion
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseWorkloadsUpdateAllResp parses an HTTP response from a WorkloadsUpdateAllWithResponse call
func ParseWorkloadsUpdateAllResp(rsp *http.Response) (*WorkloadsUpdateAllResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WorkloadsUpdateAllResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StaxEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseWorkloadsReadWorkloadsResp parses an HTTP response from a WorkloadsReadWorkloadsWithResponse call
func ParseWorkloadsReadWorkloadsResp(rsp *http.Response) (*WorkloadsReadWorkloadsResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WorkloadsReadWorkloadsResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkloadsReadWorkloadsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseWorkloadsCreateWorkloadResp parses an HTTP response from a WorkloadsCreateWorkloadWithResponse call
func ParseWorkloadsCreateWorkloadResp(rsp *http.Response) (*WorkloadsCreateWorkloadResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WorkloadsCreateWorkloadResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreateWorkloadEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest StaxEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseWorkloadsDeleteWorkloadResp parses an HTTP response from a WorkloadsDeleteWorkloadWithResponse call
func ParseWorkloadsDeleteWorkloadResp(rsp *http.Response) (*WorkloadsDeleteWorkloadResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WorkloadsDeleteWorkloadResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeleteWorkloadEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest StaxEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest StaxEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseWorkloadsReadWorkloadResp parses an HTTP response from a WorkloadsReadWorkloadWithResponse call
func ParseWorkloadsReadWorkloadResp(rsp *http.Response) (*WorkloadsReadWorkloadResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WorkloadsReadWorkloadResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkloadsReadWorkloadsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseWorkloadsUpdateWorkloadResp parses an HTTP response from a WorkloadsUpdateWorkloadWithResponse call
func ParseWorkloadsUpdateWorkloadResp(rsp *http.Response) (*WorkloadsUpdateWorkloadResp, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WorkloadsUpdateWorkloadResp{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UpdateWorkloadEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest StaxEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}
