// Package models provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package models

import (
	"encoding/json"
	"fmt"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
)

const (
	Sigv4Scopes = "sigv4.Scopes"
)

// Defines values for AccountAccountRole.
const (
	LOGGING          AccountAccountRole = "LOGGING"
	MANAGEMENT       AccountAccountRole = "MANAGEMENT"
	MANAGEMENTRESELL AccountAccountRole = "MANAGEMENT_RESELL"
	MEMBER           AccountAccountRole = "MEMBER"
	SECURITY         AccountAccountRole = "SECURITY"
)

// Defines values for AccountAssuranceState.
const (
	AccountAssuranceStateACTIVE   AccountAssuranceState = "ACTIVE"
	AccountAssuranceStateERROR    AccountAssuranceState = "ERROR"
	AccountAssuranceStateNONE     AccountAssuranceState = "NONE"
	AccountAssuranceStateUPDATING AccountAssuranceState = "UPDATING"
)

// Defines values for AccountOrigin.
const (
	AccountOriginEXTERNAL AccountOrigin = "EXTERNAL"
	AccountOriginSTAX     AccountOrigin = "STAX"
)

// Defines values for AccountStatus.
const (
	AccountStatusACTIVE       AccountStatus = "ACTIVE"
	AccountStatusAWSERROR     AccountStatus = "AWSERROR"
	AccountStatusCLOSED       AccountStatus = "CLOSED"
	AccountStatusDISCOVERED   AccountStatus = "DISCOVERED"
	AccountStatusERROR        AccountStatus = "ERROR"
	AccountStatusINACTIVE     AccountStatus = "INACTIVE"
	AccountStatusINITIALIZING AccountStatus = "INITIALIZING"
	AccountStatusMAINTENANCE  AccountStatus = "MAINTENANCE"
	AccountStatusNEW          AccountStatus = "NEW"
	AccountStatusNOAWS        AccountStatus = "NOAWS"
	AccountStatusOFFBOARDED   AccountStatus = "OFFBOARDED"
	AccountStatusONBOARDING   AccountStatus = "ONBOARDING"
	AccountStatusSUSPENDED    AccountStatus = "SUSPENDED"
)

// Defines values for AccountTypeAccessMapRoleName.
const (
	Admin     AccountTypeAccessMapRoleName = "admin"
	Developer AccountTypeAccessMapRoleName = "developer"
	Readonly  AccountTypeAccessMapRoleName = "readonly"
)

// Defines values for ApiRole.
const (
	ApiRoleApiAdmin    ApiRole = "api_admin"
	ApiRoleApiReadonly ApiRole = "api_readonly"
	ApiRoleApiUser     ApiRole = "api_user"
)

// Defines values for AwsRegion.
const (
	AwsRegionApNortheast1 AwsRegion = "ap-northeast-1"
	AwsRegionApNortheast2 AwsRegion = "ap-northeast-2"
	AwsRegionApSouth1     AwsRegion = "ap-south-1"
	AwsRegionApSoutheast1 AwsRegion = "ap-southeast-1"
	AwsRegionApSoutheast2 AwsRegion = "ap-southeast-2"
	AwsRegionCaCentral1   AwsRegion = "ca-central-1"
	AwsRegionEuCentral1   AwsRegion = "eu-central-1"
	AwsRegionEuNorth1     AwsRegion = "eu-north-1"
	AwsRegionEuWest1      AwsRegion = "eu-west-1"
	AwsRegionEuWest2      AwsRegion = "eu-west-2"
	AwsRegionEuWest3      AwsRegion = "eu-west-3"
	AwsRegionSaEast1      AwsRegion = "sa-east-1"
	AwsRegionUsEast1      AwsRegion = "us-east-1"
	AwsRegionUsEast2      AwsRegion = "us-east-2"
	AwsRegionUsWest1      AwsRegion = "us-west-1"
	AwsRegionUsWest2      AwsRegion = "us-west-2"
)

// Defines values for BgpMappingBgpStatus.
const (
	BgpMappingBgpStatusDown    BgpMappingBgpStatus = "down"
	BgpMappingBgpStatusUnknown BgpMappingBgpStatus = "unknown"
	BgpMappingBgpStatusUp      BgpMappingBgpStatus = "up"
)

// Defines values for CatalogueStatus.
const (
	CatalogueStatusACTIVE     CatalogueStatus = "ACTIVE"
	CatalogueStatusDELETED    CatalogueStatus = "DELETED"
	CatalogueStatusFAILED     CatalogueStatus = "FAILED"
	CatalogueStatusNEW        CatalogueStatus = "NEW"
	CatalogueStatusUPLOADING  CatalogueStatus = "UPLOADING"
	CatalogueStatusVALIDATING CatalogueStatus = "VALIDATING"
)

// Defines values for CatalogueVersionPropertiesStatus.
const (
	CatalogueVersionPropertiesStatusACTIVE     CatalogueVersionPropertiesStatus = "ACTIVE"
	CatalogueVersionPropertiesStatusDELETED    CatalogueVersionPropertiesStatus = "DELETED"
	CatalogueVersionPropertiesStatusFAILED     CatalogueVersionPropertiesStatus = "FAILED"
	CatalogueVersionPropertiesStatusNEW        CatalogueVersionPropertiesStatus = "NEW"
	CatalogueVersionPropertiesStatusUPLOADING  CatalogueVersionPropertiesStatus = "UPLOADING"
	CatalogueVersionPropertiesStatusVALIDATING CatalogueVersionPropertiesStatus = "VALIDATING"
)

// Defines values for CidrExclusionStatus.
const (
	CidrExclusionStatusACTIVE           CidrExclusionStatus = "ACTIVE"
	CidrExclusionStatusCREATEFAILED     CidrExclusionStatus = "CREATE_FAILED"
	CidrExclusionStatusCREATEINPROGRESS CidrExclusionStatus = "CREATE_IN_PROGRESS"
	CidrExclusionStatusDELETED          CidrExclusionStatus = "DELETED"
	CidrExclusionStatusDELETEFAILED     CidrExclusionStatus = "DELETE_FAILED"
	CidrExclusionStatusDELETEINPROGRESS CidrExclusionStatus = "DELETE_IN_PROGRESS"
	CidrExclusionStatusUPDATEFAILED     CidrExclusionStatus = "UPDATE_FAILED"
	CidrExclusionStatusUPDATEINPROGRESS CidrExclusionStatus = "UPDATE_IN_PROGRESS"
)

// Defines values for CidrRangeStatus.
const (
	CidrRangeStatusACTIVE           CidrRangeStatus = "ACTIVE"
	CidrRangeStatusCREATEFAILED     CidrRangeStatus = "CREATE_FAILED"
	CidrRangeStatusCREATEINPROGRESS CidrRangeStatus = "CREATE_IN_PROGRESS"
	CidrRangeStatusDELETED          CidrRangeStatus = "DELETED"
	CidrRangeStatusDELETEFAILED     CidrRangeStatus = "DELETE_FAILED"
	CidrRangeStatusDELETEINPROGRESS CidrRangeStatus = "DELETE_IN_PROGRESS"
	CidrRangeStatusUPDATEFAILED     CidrRangeStatus = "UPDATE_FAILED"
	CidrRangeStatusUPDATEINPROGRESS CidrRangeStatus = "UPDATE_IN_PROGRESS"
)

// Defines values for DNSResolverStatus.
const (
	DNSResolverStatusACTIVE           DNSResolverStatus = "ACTIVE"
	DNSResolverStatusCREATEFAILED     DNSResolverStatus = "CREATE_FAILED"
	DNSResolverStatusCREATEINPROGRESS DNSResolverStatus = "CREATE_IN_PROGRESS"
	DNSResolverStatusDELETED          DNSResolverStatus = "DELETED"
	DNSResolverStatusDELETEFAILED     DNSResolverStatus = "DELETE_FAILED"
	DNSResolverStatusDELETEINPROGRESS DNSResolverStatus = "DELETE_IN_PROGRESS"
	DNSResolverStatusUPDATEFAILED     DNSResolverStatus = "UPDATE_FAILED"
	DNSResolverStatusUPDATEINPROGRESS DNSResolverStatus = "UPDATE_IN_PROGRESS"
)

// Defines values for DNSRuleStatus.
const (
	DNSRuleStatusACTIVE           DNSRuleStatus = "ACTIVE"
	DNSRuleStatusCREATEFAILED     DNSRuleStatus = "CREATE_FAILED"
	DNSRuleStatusCREATEINPROGRESS DNSRuleStatus = "CREATE_IN_PROGRESS"
	DNSRuleStatusDELETED          DNSRuleStatus = "DELETED"
	DNSRuleStatusDELETEFAILED     DNSRuleStatus = "DELETE_FAILED"
	DNSRuleStatusDELETEINPROGRESS DNSRuleStatus = "DELETE_IN_PROGRESS"
	DNSRuleStatusUPDATEFAILED     DNSRuleStatus = "UPDATE_FAILED"
	DNSRuleStatusUPDATEINPROGRESS DNSRuleStatus = "UPDATE_IN_PROGRESS"
)

// Defines values for DxAssociationStatus.
const (
	DxAssociationStatusACTIVE           DxAssociationStatus = "ACTIVE"
	DxAssociationStatusCREATEFAILED     DxAssociationStatus = "CREATE_FAILED"
	DxAssociationStatusCREATEINPROGRESS DxAssociationStatus = "CREATE_IN_PROGRESS"
	DxAssociationStatusDELETED          DxAssociationStatus = "DELETED"
	DxAssociationStatusDELETEFAILED     DxAssociationStatus = "DELETE_FAILED"
	DxAssociationStatusDELETEINPROGRESS DxAssociationStatus = "DELETE_IN_PROGRESS"
	DxAssociationStatusUPDATEFAILED     DxAssociationStatus = "UPDATE_FAILED"
	DxAssociationStatusUPDATEINPROGRESS DxAssociationStatus = "UPDATE_IN_PROGRESS"
)

// Defines values for DxConnectionConnectionState.
const (
	DxConnectionConnectionStateAvailable DxConnectionConnectionState = "available"
	DxConnectionConnectionStateDeleted   DxConnectionConnectionState = "deleted"
	DxConnectionConnectionStateDeleting  DxConnectionConnectionState = "deleting"
	DxConnectionConnectionStateDown      DxConnectionConnectionState = "down"
	DxConnectionConnectionStateOrdering  DxConnectionConnectionState = "ordering"
	DxConnectionConnectionStatePending   DxConnectionConnectionState = "pending"
	DxConnectionConnectionStateRejected  DxConnectionConnectionState = "rejected"
	DxConnectionConnectionStateRequested DxConnectionConnectionState = "requested"
	DxConnectionConnectionStateUnknown   DxConnectionConnectionState = "unknown"
)

// Defines values for DxGatewayGatewayType.
const (
	DxGatewayGatewayTypePRIVATE DxGatewayGatewayType = "PRIVATE"
	DxGatewayGatewayTypeTRANSIT DxGatewayGatewayType = "TRANSIT"
)

// Defines values for DxGatewayStatus.
const (
	DxGatewayStatusACTIVE           DxGatewayStatus = "ACTIVE"
	DxGatewayStatusCREATEFAILED     DxGatewayStatus = "CREATE_FAILED"
	DxGatewayStatusCREATEINPROGRESS DxGatewayStatus = "CREATE_IN_PROGRESS"
	DxGatewayStatusDELETED          DxGatewayStatus = "DELETED"
	DxGatewayStatusDELETEFAILED     DxGatewayStatus = "DELETE_FAILED"
	DxGatewayStatusDELETEINPROGRESS DxGatewayStatus = "DELETE_IN_PROGRESS"
	DxGatewayStatusUPDATEFAILED     DxGatewayStatus = "UPDATE_FAILED"
	DxGatewayStatusUPDATEINPROGRESS DxGatewayStatus = "UPDATE_IN_PROGRESS"
)

// Defines values for DxVifStatus.
const (
	DxVifStatusACTIVE           DxVifStatus = "ACTIVE"
	DxVifStatusCREATEFAILED     DxVifStatus = "CREATE_FAILED"
	DxVifStatusCREATEINPROGRESS DxVifStatus = "CREATE_IN_PROGRESS"
	DxVifStatusDELETED          DxVifStatus = "DELETED"
	DxVifStatusDELETEFAILED     DxVifStatus = "DELETE_FAILED"
	DxVifStatusDELETEINPROGRESS DxVifStatus = "DELETE_IN_PROGRESS"
	DxVifStatusUPDATEFAILED     DxVifStatus = "UPDATE_FAILED"
	DxVifStatusUPDATEINPROGRESS DxVifStatus = "UPDATE_IN_PROGRESS"
)

// Defines values for DxVifVifType.
const (
	DxVifVifTypePRIVATE DxVifVifType = "PRIVATE"
	DxVifVifTypeTRANSIT DxVifVifType = "TRANSIT"
)

// Defines values for GatewayMapGatewayType.
const (
	GatewayMapGatewayTypePRIVATE GatewayMapGatewayType = "PRIVATE"
	GatewayMapGatewayTypeTRANSIT GatewayMapGatewayType = "TRANSIT"
)

// Defines values for GroupGroupType.
const (
	LOCAL GroupGroupType = "LOCAL"
	SCIM  GroupGroupType = "SCIM"
)

// Defines values for GroupStatus.
const (
	GroupStatusACTIVE  GroupStatus = "ACTIVE"
	GroupStatusDELETED GroupStatus = "DELETED"
	GroupStatusNEW     GroupStatus = "NEW"
)

// Defines values for GuardDutyConfigurationFeaturesEBSMALWAREPROTECTIONEbsSnapshotPreservation.
const (
	NORETENTION          GuardDutyConfigurationFeaturesEBSMALWAREPROTECTIONEbsSnapshotPreservation = "NO_RETENTION"
	RETENTIONWITHFINDING GuardDutyConfigurationFeaturesEBSMALWAREPROTECTIONEbsSnapshotPreservation = "RETENTION_WITH_FINDING"
)

// Defines values for GuardDutyConfigurationFindingPublishingFrequency.
const (
	FIFTEENMINUTES GuardDutyConfigurationFindingPublishingFrequency = "FIFTEEN_MINUTES"
	ONEHOUR        GuardDutyConfigurationFindingPublishingFrequency = "ONE_HOUR"
	SIXHOURS       GuardDutyConfigurationFindingPublishingFrequency = "SIX_HOURS"
)

// Defines values for HubPeeringHubPeeringTarget.
const (
	HubPeeringHubPeeringTargetEXTERNAL     HubPeeringHubPeeringTarget = "EXTERNAL"
	HubPeeringHubPeeringTargetSTAXACCOUNT  HubPeeringHubPeeringTarget = "STAX_ACCOUNT"
	HubPeeringHubPeeringTargetSTAXRESOURCE HubPeeringHubPeeringTarget = "STAX_RESOURCE"
)

// Defines values for HubPeeringStatus.
const (
	HubPeeringStatusACTIVE           HubPeeringStatus = "ACTIVE"
	HubPeeringStatusCREATEFAILED     HubPeeringStatus = "CREATE_FAILED"
	HubPeeringStatusCREATEINPROGRESS HubPeeringStatus = "CREATE_IN_PROGRESS"
	HubPeeringStatusDELETED          HubPeeringStatus = "DELETED"
	HubPeeringStatusDELETEFAILED     HubPeeringStatus = "DELETE_FAILED"
	HubPeeringStatusDELETEINPROGRESS HubPeeringStatus = "DELETE_IN_PROGRESS"
	HubPeeringStatusPENDINGACCEPT    HubPeeringStatus = "PENDING_ACCEPT"
	HubPeeringStatusUPDATEINPROGRESS HubPeeringStatus = "UPDATE_IN_PROGRESS"
)

// Defines values for IdamUserRole.
const (
	CustomerAdmin     IdamUserRole = "customer_admin"
	CustomerCostadmin IdamUserRole = "customer_costadmin"
	CustomerReadonly  IdamUserRole = "customer_readonly"
	CustomerUser      IdamUserRole = "customer_user"
)

// Defines values for NetworkingHubStatus.
const (
	NetworkingHubStatusACTIVE           NetworkingHubStatus = "ACTIVE"
	NetworkingHubStatusCREATEFAILED     NetworkingHubStatus = "CREATE_FAILED"
	NetworkingHubStatusCREATEINPROGRESS NetworkingHubStatus = "CREATE_IN_PROGRESS"
	NetworkingHubStatusDELETED          NetworkingHubStatus = "DELETED"
	NetworkingHubStatusDELETEFAILED     NetworkingHubStatus = "DELETE_FAILED"
	NetworkingHubStatusDELETEINPROGRESS NetworkingHubStatus = "DELETE_IN_PROGRESS"
	NetworkingHubStatusUPDATEFAILED     NetworkingHubStatus = "UPDATE_FAILED"
	NetworkingHubStatusUPDATEINPROGRESS NetworkingHubStatus = "UPDATE_IN_PROGRESS"
)

// Defines values for Operation.
const (
	OperationAccountAssuranceCreateHardenAccount        Operation = "account_assurance:CreateHardenAccount"
	OperationAccountAssuranceHardenAccount              Operation = "account_assurance:HardenAccount"
	OperationAccountAssuranceUpdateHardenAccount        Operation = "account_assurance:UpdateHardenAccount"
	OperationAccountDiscoveryDiscoverAccounts           Operation = "account_discovery:DiscoverAccounts"
	OperationAccountsCloseAccount                       Operation = "accounts:CloseAccount"
	OperationAccountsCreateAccount                      Operation = "accounts:CreateAccount"
	OperationAccountsCreateAccountType                  Operation = "accounts:CreateAccountType"
	OperationAccountsDeleteAccountType                  Operation = "accounts:DeleteAccountType"
	OperationAccountsDiscoverAccount                    Operation = "accounts:DiscoverAccount"
	OperationAccountsDiscoverAccounts                   Operation = "accounts:DiscoverAccounts"
	OperationAccountsOnboardAccount                     Operation = "accounts:OnboardAccount"
	OperationAccountsReadAccountTypes                   Operation = "accounts:ReadAccountTypes"
	OperationAccountsReadAccounts                       Operation = "accounts:ReadAccounts"
	OperationAccountsUpdateAccount                      Operation = "accounts:UpdateAccount"
	OperationAccountsUpdateAccountType                  Operation = "accounts:UpdateAccountType"
	OperationAccountsUpdateAccountTypeAccess            Operation = "accounts:UpdateAccountTypeAccess"
	OperationAccountsUpdateAccountTypeMembers           Operation = "accounts:UpdateAccountTypeMembers"
	OperationAccountsUpdateAccountTypePolicies          Operation = "accounts:UpdateAccountTypePolicies"
	OperationAwsAccountCreateAwsAccounts                Operation = "aws_account:CreateAwsAccounts"
	OperationCREATE                                     Operation = "CREATE"
	OperationCustomerCreateCustomer                     Operation = "customer:CreateCustomer"
	OperationDELETE                                     Operation = "DELETE"
	OperationIdamAccountIdamAccount                     Operation = "idam_account:IdamAccount"
	OperationIdamUserCreateIdamUser                     Operation = "idam_user:CreateIdamUser"
	OperationIdamUserUpdateIdamUser                     Operation = "idam_user:UpdateIdamUser"
	OperationIdamWorkloadCreateIdamWorkload             Operation = "idam_workload:CreateIdamWorkload"
	OperationNetworkingCreateDnsResolver                Operation = "networking:CreateDnsResolver"
	OperationNetworkingCreateDnsRule                    Operation = "networking:CreateDnsRule"
	OperationNetworkingCreateDxAssociation              Operation = "networking:CreateDxAssociation"
	OperationNetworkingCreateDxResource                 Operation = "networking:CreateDxResource"
	OperationNetworkingCreateHub                        Operation = "networking:CreateHub"
	OperationNetworkingCreateHubPeering                 Operation = "networking:CreateHubPeering"
	OperationNetworkingCreateHubPrefixList              Operation = "networking:CreateHubPrefixList"
	OperationNetworkingCreateVpc                        Operation = "networking:CreateVpc"
	OperationNetworkingCreateVpcPrefixList              Operation = "networking:CreateVpcPrefixList"
	OperationNetworkingCreateVpnConnection              Operation = "networking:CreateVpnConnection"
	OperationNetworkingCreateVpnCustomerGateway         Operation = "networking:CreateVpnCustomerGateway"
	OperationNetworkingDeleteDnsResolver                Operation = "networking:DeleteDnsResolver"
	OperationNetworkingDeleteDnsRule                    Operation = "networking:DeleteDnsRule"
	OperationNetworkingDeleteDxAssociation              Operation = "networking:DeleteDxAssociation"
	OperationNetworkingDeleteDxGateway                  Operation = "networking:DeleteDxGateway"
	OperationNetworkingDeleteDxVif                      Operation = "networking:DeleteDxVif"
	OperationNetworkingDeleteHub                        Operation = "networking:DeleteHub"
	OperationNetworkingDeleteHubPeering                 Operation = "networking:DeleteHubPeering"
	OperationNetworkingDeletePrefixList                 Operation = "networking:DeletePrefixList"
	OperationNetworkingDeleteVpc                        Operation = "networking:DeleteVpc"
	OperationNetworkingDeleteVpnConnection              Operation = "networking:DeleteVpnConnection"
	OperationNetworkingDeleteVpnCustomerGateway         Operation = "networking:DeleteVpnCustomerGateway"
	OperationNetworkingUpdateDnsResolver                Operation = "networking:UpdateDnsResolver"
	OperationNetworkingUpdateDnsRule                    Operation = "networking:UpdateDnsRule"
	OperationNetworkingUpdateDxAssociation              Operation = "networking:UpdateDxAssociation"
	OperationNetworkingUpdateDxVif                      Operation = "networking:UpdateDxVif"
	OperationNetworkingUpdateHub                        Operation = "networking:UpdateHub"
	OperationNetworkingUpdateHubPeering                 Operation = "networking:UpdateHubPeering"
	OperationNetworkingUpdateHubPrefixListAssociation   Operation = "networking:UpdateHubPrefixListAssociation"
	OperationNetworkingUpdatePrefixList                 Operation = "networking:UpdatePrefixList"
	OperationNetworkingUpdateVpc                        Operation = "networking:UpdateVpc"
	OperationNetworkingUpdateVpcPrefixListAssociation   Operation = "networking:UpdateVpcPrefixListAssociation"
	OperationNetworkingUpdateVpnConnection              Operation = "networking:UpdateVpnConnection"
	OperationNetworkingUpdateVpnCustomerGateway         Operation = "networking:UpdateVpnCustomerGateway"
	OperationOrganisationAssuranceOrganisationAssurance Operation = "organisation_assurance:OrganisationAssurance"
	OperationOrganisationBillingDeployEtl               Operation = "organisation_billing:DeployEtl"
	OperationOrganisationBillingRegisterApn             Operation = "organisation_billing:RegisterApn"
	OperationOrganisationBillingUpdateCrm               Operation = "organisation_billing:UpdateCrm"
	OperationOrganisationCreateOrganisation             Operation = "organisation:CreateOrganisation"
	OperationOrganisationsAttachPolicy                  Operation = "organisations:AttachPolicy"
	OperationOrganisationsCreateOrganisationalUnit      Operation = "organisations:CreateOrganisationalUnit"
	OperationOrganisationsCreatePolicy                  Operation = "organisations:CreatePolicy"
	OperationOrganisationsDeleteOrganisationalUnit      Operation = "organisations:DeleteOrganisationalUnit"
	OperationOrganisationsDeletePolicy                  Operation = "organisations:DeletePolicy"
	OperationOrganisationsDetachPolicy                  Operation = "organisations:DetachPolicy"
	OperationOrganisationsReadOrganisationalUnit        Operation = "organisations:ReadOrganisationalUnit"
	OperationOrganisationsReadPolicies                  Operation = "organisations:ReadPolicies"
	OperationOrganisationsUpdateOrganisationalUnit      Operation = "organisations:UpdateOrganisationalUnit"
	OperationOrganisationsUpdatePolicy                  Operation = "organisations:UpdatePolicy"
	OperationPoliciesAttachPolicy                       Operation = "policies:AttachPolicy"
	OperationPoliciesDetachPolicy                       Operation = "policies:DetachPolicy"
	OperationREAD                                       Operation = "READ"
	OperationSagaCloseAccount                           Operation = "saga:CloseAccount"
	OperationSagaCreateAccount                          Operation = "saga:CreateAccount"
	OperationSagaCreateAwsAccounts                      Operation = "saga:CreateAwsAccounts"
	OperationSagaCreateCustomer                         Operation = "saga:CreateCustomer"
	OperationSagaCreateOrganisation                     Operation = "saga:CreateOrganisation"
	OperationSagaDiscoverAccount                        Operation = "saga:DiscoverAccount"
	OperationSagaOnboardAccount                         Operation = "saga:OnboardAccount"
	OperationSagaUpdateAccount                          Operation = "saga:UpdateAccount"
	OperationSagaUpdateOrgAccounts                      Operation = "saga:UpdateOrgAccounts"
	OperationSagaUpdateOrganisation                     Operation = "saga:UpdateOrganisation"
	OperationServicesConfigureGuardDuty                 Operation = "services:ConfigureGuardDuty"
	OperationServicesConfigureSecurityHub               Operation = "services:ConfigureSecurityHub"
	OperationServicesReadConfigurations                 Operation = "services:ReadConfigurations"
	OperationServicesReadGuardDutyConfiguration         Operation = "services:ReadGuardDutyConfiguration"
	OperationServicesReadSecurityHubConfiguration       Operation = "services:ReadSecurityHubConfiguration"
	OperationStaxAccountCloseStaxAccount                Operation = "stax_account:CloseStaxAccount"
	OperationStaxAccountCreateStaxAccount               Operation = "stax_account:CreateStaxAccount"
	OperationStaxAccountOnboardStaxAccount              Operation = "stax_account:OnboardStaxAccount"
	OperationStaxAccountUpdateStaxAccount               Operation = "stax_account:UpdateStaxAccount"
	OperationTeamsCreateApiToken                        Operation = "teams:CreateApiToken"
	OperationTeamsCreateGroup                           Operation = "teams:CreateGroup"
	OperationTeamsCreateUser                            Operation = "teams:CreateUser"
	OperationTeamsDeleteApiToken                        Operation = "teams:DeleteApiToken"
	OperationTeamsDeleteGroup                           Operation = "teams:DeleteGroup"
	OperationTeamsDeleteUser                            Operation = "teams:DeleteUser"
	OperationTeamsReadApiTokens                         Operation = "teams:ReadApiTokens"
	OperationTeamsReadGroups                            Operation = "teams:ReadGroups"
	OperationTeamsReadUsers                             Operation = "teams:ReadUsers"
	OperationTeamsUpdateApiToken                        Operation = "teams:UpdateApiToken"
	OperationTeamsUpdateGroup                           Operation = "teams:UpdateGroup"
	OperationTeamsUpdateGroupMembers                    Operation = "teams:UpdateGroupMembers"
	OperationTeamsUpdateUser                            Operation = "teams:UpdateUser"
	OperationTeamsUpdateUserPassword                    Operation = "teams:UpdateUserPassword"
	OperationUPDATE                                     Operation = "UPDATE"
	OperationWorkloadsCreateCatalogueItem               Operation = "workloads:CreateCatalogueItem"
	OperationWorkloadsCreateCatalogueVersion            Operation = "workloads:CreateCatalogueVersion"
	OperationWorkloadsCreateWorkload                    Operation = "workloads:CreateWorkload"
	OperationWorkloadsDeleteCatalogueItem               Operation = "workloads:DeleteCatalogueItem"
	OperationWorkloadsDeleteCatalogueVersion            Operation = "workloads:DeleteCatalogueVersion"
	OperationWorkloadsDeleteWorkload                    Operation = "workloads:DeleteWorkload"
	OperationWorkloadsReadWorkloadCatalogueItems        Operation = "workloads:ReadWorkloadCatalogueItems"
	OperationWorkloadsReadWorkloads                     Operation = "workloads:ReadWorkloads"
	OperationWorkloadsUpdateWorkload                    Operation = "workloads:UpdateWorkload"
)

// Defines values for OperationStatus.
const (
	OperationStatusFAILED    OperationStatus = "FAILED"
	OperationStatusPENDING   OperationStatus = "PENDING"
	OperationStatusRUNNING   OperationStatus = "RUNNING"
	OperationStatusSTARTED   OperationStatus = "STARTED"
	OperationStatusSUCCEEDED OperationStatus = "SUCCEEDED"
)

// Defines values for OrganisationAwsSupportType.
const (
	BASIC      OrganisationAwsSupportType = "BASIC"
	BUSINESS   OrganisationAwsSupportType = "BUSINESS"
	DEVELOPER  OrganisationAwsSupportType = "DEVELOPER"
	ENTERPRISE OrganisationAwsSupportType = "ENTERPRISE"
)

// Defines values for OrganisationComplianceType.
const (
	APRA OrganisationComplianceType = "APRA"
	PCI  OrganisationComplianceType = "PCI"
	SOC2 OrganisationComplianceType = "SOC2"
)

// Defines values for OrganisationStatus.
const (
	OrganisationStatusACTIVE       OrganisationStatus = "ACTIVE"
	OrganisationStatusINITIALIZING OrganisationStatus = "INITIALIZING"
	OrganisationStatusNEW          OrganisationStatus = "NEW"
	OrganisationStatusSUSPENDED    OrganisationStatus = "SUSPENDED"
)

// Defines values for OrganisationalUnitOrganisationalUnitType.
const (
	CHILD            OrganisationalUnitOrganisationalUnitType = "CHILD"
	ORGANISATIONROOT OrganisationalUnitOrganisationalUnitType = "ORGANISATION_ROOT"
	ROOT             OrganisationalUnitOrganisationalUnitType = "ROOT"
	STAXACCOUNTPOOL  OrganisationalUnitOrganisationalUnitType = "STAX_ACCOUNT_POOL"
	STAXDEFAULT      OrganisationalUnitOrganisationalUnitType = "STAX_DEFAULT"
	STAXSECURITY     OrganisationalUnitOrganisationalUnitType = "STAX_SECURITY"
)

// Defines values for OrganisationalUnitStatus.
const (
	OrganisationalUnitStatusACTIVE           OrganisationalUnitStatus = "ACTIVE"
	OrganisationalUnitStatusCREATEFAILED     OrganisationalUnitStatus = "CREATE_FAILED"
	OrganisationalUnitStatusCREATEINPROGRESS OrganisationalUnitStatus = "CREATE_IN_PROGRESS"
	OrganisationalUnitStatusDELETED          OrganisationalUnitStatus = "DELETED"
	OrganisationalUnitStatusDELETEFAILED     OrganisationalUnitStatus = "DELETE_FAILED"
	OrganisationalUnitStatusDELETEINPROGRESS OrganisationalUnitStatus = "DELETE_IN_PROGRESS"
	OrganisationalUnitStatusUPDATEINPROGRESS OrganisationalUnitStatus = "UPDATE_IN_PROGRESS"
)

// Defines values for PolicyAttachableTo.
const (
	ACCOUNTTYPE PolicyAttachableTo = "ACCOUNT_TYPE"
	ANY         PolicyAttachableTo = "ANY"
	ORG         PolicyAttachableTo = "ORG"
)

// Defines values for PolicyStatus.
const (
	PolicyStatusACTIVE  PolicyStatus = "ACTIVE"
	PolicyStatusDELETED PolicyStatus = "DELETED"
	PolicyStatusFAILED  PolicyStatus = "FAILED"
)

// Defines values for PrefixListPrefixListType.
const (
	PrefixListPrefixListTypeHUB PrefixListPrefixListType = "HUB"
	PrefixListPrefixListTypeVPC PrefixListPrefixListType = "VPC"
)

// Defines values for PrefixListRouteTableTypes.
const (
	PrefixListRouteTableTypesFLAT           PrefixListRouteTableTypes = "FLAT"
	PrefixListRouteTableTypesINFRASTRUCTURE PrefixListRouteTableTypes = "INFRASTRUCTURE"
	PrefixListRouteTableTypesISOLATED       PrefixListRouteTableTypes = "ISOLATED"
	PrefixListRouteTableTypesONPREMISES     PrefixListRouteTableTypes = "ONPREMISES"
)

// Defines values for PrefixListStatus.
const (
	PrefixListStatusACTIVE           PrefixListStatus = "ACTIVE"
	PrefixListStatusCREATEFAILED     PrefixListStatus = "CREATE_FAILED"
	PrefixListStatusCREATEINPROGRESS PrefixListStatus = "CREATE_IN_PROGRESS"
	PrefixListStatusDELETED          PrefixListStatus = "DELETED"
	PrefixListStatusDELETEFAILED     PrefixListStatus = "DELETE_FAILED"
	PrefixListStatusDELETEINPROGRESS PrefixListStatus = "DELETE_IN_PROGRESS"
	PrefixListStatusUPDATEFAILED     PrefixListStatus = "UPDATE_FAILED"
	PrefixListStatusUPDATEINPROGRESS PrefixListStatus = "UPDATE_IN_PROGRESS"
)

// Defines values for PrefixListSubnetTypes.
const (
	PrefixListSubnetTypesCONNECTIVITY PrefixListSubnetTypes = "CONNECTIVITY"
	PrefixListSubnetTypesENDPOINT     PrefixListSubnetTypes = "ENDPOINT"
	PrefixListSubnetTypesPRIVATE      PrefixListSubnetTypes = "PRIVATE"
	PrefixListSubnetTypesPUBLIC       PrefixListSubnetTypes = "PUBLIC"
	PrefixListSubnetTypesRESTRICTED   PrefixListSubnetTypes = "RESTRICTED"
)

// Defines values for PrefixListTargetType.
const (
	PrefixListTargetTypeBLACKHOLE            PrefixListTargetType = "BLACKHOLE"
	PrefixListTargetTypeDIRECTCONNECTGATEWAY PrefixListTargetType = "DIRECT_CONNECT_GATEWAY"
	PrefixListTargetTypeHUBPEERING           PrefixListTargetType = "HUB_PEERING"
	PrefixListTargetTypeVPC                  PrefixListTargetType = "VPC"
	PrefixListTargetTypeVPN                  PrefixListTargetType = "VPN"
)

// Defines values for PrefixListVpcTypes.
const (
	PrefixListVpcTypesFLAT           PrefixListVpcTypes = "FLAT"
	PrefixListVpcTypesISOLATED       PrefixListVpcTypes = "ISOLATED"
	PrefixListVpcTypesSHAREDSERVICES PrefixListVpcTypes = "SHAREDSERVICES"
	PrefixListVpcTypesTRANSIT        PrefixListVpcTypes = "TRANSIT"
)

// Defines values for Role.
const (
	RoleApiAdmin          Role = "api_admin"
	RoleApiReadonly       Role = "api_readonly"
	RoleApiUser           Role = "api_user"
	RoleCustomerAdmin     Role = "customer_admin"
	RoleCustomerCostadmin Role = "customer_costadmin"
	RoleCustomerReadonly  Role = "customer_readonly"
	RoleCustomerRoot      Role = "customer_root"
	RoleCustomerUser      Role = "customer_user"
)

// Defines values for ServiceConfigurationService.
const (
	GUARDDUTY   ServiceConfigurationService = "GUARDDUTY"
	SECURITYHUB ServiceConfigurationService = "SECURITYHUB"
)

// Defines values for ServiceConfigurationStatus.
const (
	ServiceConfigurationStatusACTIVE      ServiceConfigurationStatus = "ACTIVE"
	ServiceConfigurationStatusCONFIGURING ServiceConfigurationStatus = "CONFIGURING"
	ServiceConfigurationStatusERROR       ServiceConfigurationStatus = "ERROR"
	ServiceConfigurationStatusINACTIVE    ServiceConfigurationStatus = "INACTIVE"
)

// Defines values for TunnelMappingTunnelStatus.
const (
	Down TunnelMappingTunnelStatus = "down"
	Up   TunnelMappingTunnelStatus = "up"
)

// Defines values for UserStatus.
const (
	UserStatusACTIVE   UserStatus = "ACTIVE"
	UserStatusDELETED  UserStatus = "DELETED"
	UserStatusDISABLED UserStatus = "DISABLED"
	UserStatusINVITED  UserStatus = "INVITED"
	UserStatusNEW      UserStatus = "NEW"
)

// Defines values for VPCSize.
const (
	VPCSizeLARGE  VPCSize = "LARGE"
	VPCSizeMEDIUM VPCSize = "MEDIUM"
	VPCSizeSMALL  VPCSize = "SMALL"
)

// Defines values for VPCStatus.
const (
	VPCStatusACTIVE           VPCStatus = "ACTIVE"
	VPCStatusCREATEFAILED     VPCStatus = "CREATE_FAILED"
	VPCStatusCREATEINPROGRESS VPCStatus = "CREATE_IN_PROGRESS"
	VPCStatusDELETED          VPCStatus = "DELETED"
	VPCStatusDELETEFAILED     VPCStatus = "DELETE_FAILED"
	VPCStatusDELETEINPROGRESS VPCStatus = "DELETE_IN_PROGRESS"
	VPCStatusUPDATEFAILED     VPCStatus = "UPDATE_FAILED"
	VPCStatusUPDATEINPROGRESS VPCStatus = "UPDATE_IN_PROGRESS"
)

// Defines values for VPCType.
const (
	VPCTypeFLAT           VPCType = "FLAT"
	VPCTypeISOLATED       VPCType = "ISOLATED"
	VPCTypeSHAREDSERVICES VPCType = "SHAREDSERVICES"
	VPCTypeTRANSIT        VPCType = "TRANSIT"
)

// Defines values for VpnConnectionStatus.
const (
	VpnConnectionStatusACTIVE           VpnConnectionStatus = "ACTIVE"
	VpnConnectionStatusCREATEFAILED     VpnConnectionStatus = "CREATE_FAILED"
	VpnConnectionStatusCREATEINPROGRESS VpnConnectionStatus = "CREATE_IN_PROGRESS"
	VpnConnectionStatusDELETED          VpnConnectionStatus = "DELETED"
	VpnConnectionStatusDELETEFAILED     VpnConnectionStatus = "DELETE_FAILED"
	VpnConnectionStatusDELETEINPROGRESS VpnConnectionStatus = "DELETE_IN_PROGRESS"
	VpnConnectionStatusUPDATEFAILED     VpnConnectionStatus = "UPDATE_FAILED"
	VpnConnectionStatusUPDATEINPROGRESS VpnConnectionStatus = "UPDATE_IN_PROGRESS"
)

// Defines values for VpnConnectionVpnConnectionType.
const (
	VpnConnectionVpnConnectionTypeHUB VpnConnectionVpnConnectionType = "HUB"
	VpnConnectionVpnConnectionTypeVPC VpnConnectionVpnConnectionType = "VPC"
)

// Defines values for VpnCustomerGatewayStatus.
const (
	VpnCustomerGatewayStatusACTIVE           VpnCustomerGatewayStatus = "ACTIVE"
	VpnCustomerGatewayStatusCREATEFAILED     VpnCustomerGatewayStatus = "CREATE_FAILED"
	VpnCustomerGatewayStatusCREATEINPROGRESS VpnCustomerGatewayStatus = "CREATE_IN_PROGRESS"
	VpnCustomerGatewayStatusDELETED          VpnCustomerGatewayStatus = "DELETED"
	VpnCustomerGatewayStatusDELETEFAILED     VpnCustomerGatewayStatus = "DELETE_FAILED"
	VpnCustomerGatewayStatusDELETEINPROGRESS VpnCustomerGatewayStatus = "DELETE_IN_PROGRESS"
	VpnCustomerGatewayStatusUPDATEFAILED     VpnCustomerGatewayStatus = "UPDATE_FAILED"
	VpnCustomerGatewayStatusUPDATEINPROGRESS VpnCustomerGatewayStatus = "UPDATE_IN_PROGRESS"
)

// Defines values for WorkloadStatus.
const (
	WorkloadStatusACTIVE           WorkloadStatus = "ACTIVE"
	WorkloadStatusCREATEFAILED     WorkloadStatus = "CREATE_FAILED"
	WorkloadStatusDELETED          WorkloadStatus = "DELETED"
	WorkloadStatusDELETEFAILED     WorkloadStatus = "DELETE_FAILED"
	WorkloadStatusDELETEINPROGRESS WorkloadStatus = "DELETE_IN_PROGRESS"
	WorkloadStatusINITIALIZING     WorkloadStatus = "INITIALIZING"
	WorkloadStatusNEW              WorkloadStatus = "NEW"
	WorkloadStatusUPDATECOMPLETE   WorkloadStatus = "UPDATE_COMPLETE"
	WorkloadStatusUPDATEFAILED     WorkloadStatus = "UPDATE_FAILED"
	WorkloadStatusUPDATEINPROGRESS WorkloadStatus = "UPDATE_IN_PROGRESS"
)

// Defines values for WorkloadCatalogueVersionStatus.
const (
	WorkloadCatalogueVersionStatusACTIVE     WorkloadCatalogueVersionStatus = "ACTIVE"
	WorkloadCatalogueVersionStatusDELETED    WorkloadCatalogueVersionStatus = "DELETED"
	WorkloadCatalogueVersionStatusFAILED     WorkloadCatalogueVersionStatus = "FAILED"
	WorkloadCatalogueVersionStatusNEW        WorkloadCatalogueVersionStatus = "NEW"
	WorkloadCatalogueVersionStatusUPLOADING  WorkloadCatalogueVersionStatus = "UPLOADING"
	WorkloadCatalogueVersionStatusVALIDATING WorkloadCatalogueVersionStatus = "VALIDATING"
)

// Defines values for GatewayEndpoint.
const (
	Dynamodb GatewayEndpoint = "dynamodb"
	S3       GatewayEndpoint = "s3"
)

// Defines values for InterfaceEndpoint.
const (
	AccessAnalyzer           InterfaceEndpoint = "access-analyzer"
	ApplicationAutoscaling   InterfaceEndpoint = "application-autoscaling"
	AppmeshEnvoyManagement   InterfaceEndpoint = "appmesh-envoy-management"
	AppstreamApi             InterfaceEndpoint = "appstream.api"
	AppstreamStreaming       InterfaceEndpoint = "appstream.streaming"
	Athena                   InterfaceEndpoint = "athena"
	Autoscaling              InterfaceEndpoint = "autoscaling"
	AutoscalingPlans         InterfaceEndpoint = "autoscaling-plans"
	Awsconnector             InterfaceEndpoint = "awsconnector"
	Backup                   InterfaceEndpoint = "backup"
	Clouddirectory           InterfaceEndpoint = "clouddirectory"
	Cloudformation           InterfaceEndpoint = "cloudformation"
	Cloudtrail               InterfaceEndpoint = "cloudtrail"
	Codebuild                InterfaceEndpoint = "codebuild"
	Codecommit               InterfaceEndpoint = "codecommit"
	Codedeploy               InterfaceEndpoint = "codedeploy"
	CodedeployCommandsSecure InterfaceEndpoint = "codedeploy-commands-secure"
	Codepipeline             InterfaceEndpoint = "codepipeline"
	Config                   InterfaceEndpoint = "config"
	Datasync                 InterfaceEndpoint = "datasync"
	Dms                      InterfaceEndpoint = "dms"
	Ebs                      InterfaceEndpoint = "ebs"
	Ec2                      InterfaceEndpoint = "ec2"
	Ec2messages              InterfaceEndpoint = "ec2messages"
	EcrApi                   InterfaceEndpoint = "ecr.api"
	EcrDkr                   InterfaceEndpoint = "ecr.dkr"
	Ecs                      InterfaceEndpoint = "ecs"
	EcsAgent                 InterfaceEndpoint = "ecs-agent"
	EcsTelemetry             InterfaceEndpoint = "ecs-telemetry"
	Elasticfilesystem        InterfaceEndpoint = "elasticfilesystem"
	ElasticfilesystemFips    InterfaceEndpoint = "elasticfilesystem-fips"
	Elasticloadbalancing     InterfaceEndpoint = "elasticloadbalancing"
	EmailSmtp                InterfaceEndpoint = "email-smtp"
	Events                   InterfaceEndpoint = "events"
	ExecuteApi               InterfaceEndpoint = "execute-api"
	Fsx                      InterfaceEndpoint = "fsx"
	GitCodecommit            InterfaceEndpoint = "git-codecommit"
	Glue                     InterfaceEndpoint = "glue"
	Imagebuilder             InterfaceEndpoint = "imagebuilder"
	KinesisFirehose          InterfaceEndpoint = "kinesis-firehose"
	KinesisStreams           InterfaceEndpoint = "kinesis-streams"
	Kms                      InterfaceEndpoint = "kms"
	Lambda                   InterfaceEndpoint = "lambda"
	Logs                     InterfaceEndpoint = "logs"
	Monitoring               InterfaceEndpoint = "monitoring"
	Notebook                 InterfaceEndpoint = "notebook"
	QldbSession              InterfaceEndpoint = "qldb.session"
	Rds                      InterfaceEndpoint = "rds"
	RdsData                  InterfaceEndpoint = "rds-data"
	Rekognition              InterfaceEndpoint = "rekognition"
	S3interface              InterfaceEndpoint = "s3interface"
	SagemakerApi             InterfaceEndpoint = "sagemaker.api"
	SagemakerRuntime         InterfaceEndpoint = "sagemaker.runtime"
	Secretsmanager           InterfaceEndpoint = "secretsmanager"
	Securityhub              InterfaceEndpoint = "securityhub"
	Servicecatalog           InterfaceEndpoint = "servicecatalog"
	Sms                      InterfaceEndpoint = "sms"
	Sns                      InterfaceEndpoint = "sns"
	Sqs                      InterfaceEndpoint = "sqs"
	Ssm                      InterfaceEndpoint = "ssm"
	Ssmmessages              InterfaceEndpoint = "ssmmessages"
	Storagegateway           InterfaceEndpoint = "storagegateway"
	Sts                      InterfaceEndpoint = "sts"
	Transfer                 InterfaceEndpoint = "transfer"
	TransferServer           InterfaceEndpoint = "transfer.server"
	Workspaces               InterfaceEndpoint = "workspaces"
	Xray                     InterfaceEndpoint = "xray"
)

// Defines values for NetworkingCreateHubPeeringHubPeeringTarget.
const (
	EXTERNAL     NetworkingCreateHubPeeringHubPeeringTarget = "EXTERNAL"
	STAXACCOUNT  NetworkingCreateHubPeeringHubPeeringTarget = "STAX_ACCOUNT"
	STAXRESOURCE NetworkingCreateHubPeeringHubPeeringTarget = "STAX_RESOURCE"
)

// Defines values for NetworkingCreateHubPrefixListRouteTableTypes.
const (
	NetworkingCreateHubPrefixListRouteTableTypesFLAT           NetworkingCreateHubPrefixListRouteTableTypes = "FLAT"
	NetworkingCreateHubPrefixListRouteTableTypesINFRASTRUCTURE NetworkingCreateHubPrefixListRouteTableTypes = "INFRASTRUCTURE"
	NetworkingCreateHubPrefixListRouteTableTypesISOLATED       NetworkingCreateHubPrefixListRouteTableTypes = "ISOLATED"
	NetworkingCreateHubPrefixListRouteTableTypesONPREMISES     NetworkingCreateHubPrefixListRouteTableTypes = "ONPREMISES"
)

// Defines values for NetworkingCreateHubPrefixListTargetType.
const (
	NetworkingCreateHubPrefixListTargetTypeBLACKHOLE            NetworkingCreateHubPrefixListTargetType = "BLACKHOLE"
	NetworkingCreateHubPrefixListTargetTypeDIRECTCONNECTGATEWAY NetworkingCreateHubPrefixListTargetType = "DIRECT_CONNECT_GATEWAY"
	NetworkingCreateHubPrefixListTargetTypeHUBPEERING           NetworkingCreateHubPrefixListTargetType = "HUB_PEERING"
	NetworkingCreateHubPrefixListTargetTypeVPC                  NetworkingCreateHubPrefixListTargetType = "VPC"
	NetworkingCreateHubPrefixListTargetTypeVPN                  NetworkingCreateHubPrefixListTargetType = "VPN"
)

// Defines values for NetworkingCreateVpcSize.
const (
	NetworkingCreateVpcSizeLARGE  NetworkingCreateVpcSize = "LARGE"
	NetworkingCreateVpcSizeMEDIUM NetworkingCreateVpcSize = "MEDIUM"
	NetworkingCreateVpcSizeSMALL  NetworkingCreateVpcSize = "SMALL"
)

// Defines values for NetworkingCreateVpcType.
const (
	NetworkingCreateVpcTypeFLAT           NetworkingCreateVpcType = "FLAT"
	NetworkingCreateVpcTypeISOLATED       NetworkingCreateVpcType = "ISOLATED"
	NetworkingCreateVpcTypeSHAREDSERVICES NetworkingCreateVpcType = "SHAREDSERVICES"
)

// Defines values for NetworkingCreateVpcPrefixListSubnetTypes.
const (
	NetworkingCreateVpcPrefixListSubnetTypesCONNECTIVITY NetworkingCreateVpcPrefixListSubnetTypes = "CONNECTIVITY"
	NetworkingCreateVpcPrefixListSubnetTypesENDPOINT     NetworkingCreateVpcPrefixListSubnetTypes = "ENDPOINT"
	NetworkingCreateVpcPrefixListSubnetTypesPRIVATE      NetworkingCreateVpcPrefixListSubnetTypes = "PRIVATE"
	NetworkingCreateVpcPrefixListSubnetTypesPUBLIC       NetworkingCreateVpcPrefixListSubnetTypes = "PUBLIC"
	NetworkingCreateVpcPrefixListSubnetTypesRESTRICTED   NetworkingCreateVpcPrefixListSubnetTypes = "RESTRICTED"
)

// Defines values for NetworkingCreateVpcPrefixListVpcTypes.
const (
	NetworkingCreateVpcPrefixListVpcTypesFLAT           NetworkingCreateVpcPrefixListVpcTypes = "FLAT"
	NetworkingCreateVpcPrefixListVpcTypesISOLATED       NetworkingCreateVpcPrefixListVpcTypes = "ISOLATED"
	NetworkingCreateVpcPrefixListVpcTypesSHAREDSERVICES NetworkingCreateVpcPrefixListVpcTypes = "SHAREDSERVICES"
	NetworkingCreateVpcPrefixListVpcTypesTRANSIT        NetworkingCreateVpcPrefixListVpcTypes = "TRANSIT"
)

// Defines values for NetworkingUpdateHubPrefixListAssociationRouteTableTypes.
const (
	NetworkingUpdateHubPrefixListAssociationRouteTableTypesFLAT           NetworkingUpdateHubPrefixListAssociationRouteTableTypes = "FLAT"
	NetworkingUpdateHubPrefixListAssociationRouteTableTypesINFRASTRUCTURE NetworkingUpdateHubPrefixListAssociationRouteTableTypes = "INFRASTRUCTURE"
	NetworkingUpdateHubPrefixListAssociationRouteTableTypesISOLATED       NetworkingUpdateHubPrefixListAssociationRouteTableTypes = "ISOLATED"
	NetworkingUpdateHubPrefixListAssociationRouteTableTypesONPREMISES     NetworkingUpdateHubPrefixListAssociationRouteTableTypes = "ONPREMISES"
)

// Defines values for NetworkingUpdatePrefixListTargetType.
const (
	NetworkingUpdatePrefixListTargetTypeBLACKHOLE            NetworkingUpdatePrefixListTargetType = "BLACKHOLE"
	NetworkingUpdatePrefixListTargetTypeDIRECTCONNECTGATEWAY NetworkingUpdatePrefixListTargetType = "DIRECT_CONNECT_GATEWAY"
	NetworkingUpdatePrefixListTargetTypeHUBPEERING           NetworkingUpdatePrefixListTargetType = "HUB_PEERING"
	NetworkingUpdatePrefixListTargetTypeVPC                  NetworkingUpdatePrefixListTargetType = "VPC"
	NetworkingUpdatePrefixListTargetTypeVPN                  NetworkingUpdatePrefixListTargetType = "VPN"
)

// Defines values for NetworkingUpdateVpcPrefixListAssociationSubnetTypes.
const (
	NetworkingUpdateVpcPrefixListAssociationSubnetTypesCONNECTIVITY NetworkingUpdateVpcPrefixListAssociationSubnetTypes = "CONNECTIVITY"
	NetworkingUpdateVpcPrefixListAssociationSubnetTypesENDPOINT     NetworkingUpdateVpcPrefixListAssociationSubnetTypes = "ENDPOINT"
	NetworkingUpdateVpcPrefixListAssociationSubnetTypesPRIVATE      NetworkingUpdateVpcPrefixListAssociationSubnetTypes = "PRIVATE"
	NetworkingUpdateVpcPrefixListAssociationSubnetTypesPUBLIC       NetworkingUpdateVpcPrefixListAssociationSubnetTypes = "PUBLIC"
	NetworkingUpdateVpcPrefixListAssociationSubnetTypesRESTRICTED   NetworkingUpdateVpcPrefixListAssociationSubnetTypes = "RESTRICTED"
)

// Defines values for NetworkingUpdateVpcPrefixListAssociationVpcTypes.
const (
	NetworkingUpdateVpcPrefixListAssociationVpcTypesFLAT           NetworkingUpdateVpcPrefixListAssociationVpcTypes = "FLAT"
	NetworkingUpdateVpcPrefixListAssociationVpcTypesISOLATED       NetworkingUpdateVpcPrefixListAssociationVpcTypes = "ISOLATED"
	NetworkingUpdateVpcPrefixListAssociationVpcTypesSHAREDSERVICES NetworkingUpdateVpcPrefixListAssociationVpcTypes = "SHAREDSERVICES"
	NetworkingUpdateVpcPrefixListAssociationVpcTypesTRANSIT        NetworkingUpdateVpcPrefixListAssociationVpcTypes = "TRANSIT"
)

// Defines values for NullableAwsRegion.
const (
	NullableAwsRegionApNortheast1 NullableAwsRegion = "ap-northeast-1"
	NullableAwsRegionApNortheast2 NullableAwsRegion = "ap-northeast-2"
	NullableAwsRegionApSouth1     NullableAwsRegion = "ap-south-1"
	NullableAwsRegionApSoutheast1 NullableAwsRegion = "ap-southeast-1"
	NullableAwsRegionApSoutheast2 NullableAwsRegion = "ap-southeast-2"
	NullableAwsRegionCaCentral1   NullableAwsRegion = "ca-central-1"
	NullableAwsRegionEuCentral1   NullableAwsRegion = "eu-central-1"
	NullableAwsRegionEuNorth1     NullableAwsRegion = "eu-north-1"
	NullableAwsRegionEuWest1      NullableAwsRegion = "eu-west-1"
	NullableAwsRegionEuWest2      NullableAwsRegion = "eu-west-2"
	NullableAwsRegionEuWest3      NullableAwsRegion = "eu-west-3"
	NullableAwsRegionSaEast1      NullableAwsRegion = "sa-east-1"
	NullableAwsRegionUsEast1      NullableAwsRegion = "us-east-1"
	NullableAwsRegionUsEast2      NullableAwsRegion = "us-east-2"
	NullableAwsRegionUsWest1      NullableAwsRegion = "us-west-1"
	NullableAwsRegionUsWest2      NullableAwsRegion = "us-west-2"
)

// Defines values for PublicCheckAliasAliasStatus.
const (
	TheCompanyAliasProvidedIsAlreadyInUseByAnotherCustomerAndCannotBeUsed PublicCheckAliasAliasStatus = "The company alias provided is already in use by another customer and cannot be used"
	TheCompanyAliasProvidedIsAvailable                                    PublicCheckAliasAliasStatus = "The company alias provided is available"
)

// Defines values for TeamsCreateApiTokenResponseApiTokensStatus.
const (
	TeamsCreateApiTokenResponseApiTokensStatusACTIVE  TeamsCreateApiTokenResponseApiTokensStatus = "ACTIVE"
	TeamsCreateApiTokenResponseApiTokensStatusDELETED TeamsCreateApiTokenResponseApiTokensStatus = "DELETED"
)

// Defines values for TeamsDeleteApiTokenResponseApiTokensStatus.
const (
	TeamsDeleteApiTokenResponseApiTokensStatusACTIVE  TeamsDeleteApiTokenResponseApiTokensStatus = "ACTIVE"
	TeamsDeleteApiTokenResponseApiTokensStatusDELETED TeamsDeleteApiTokenResponseApiTokensStatus = "DELETED"
)

// Defines values for TeamsReadApiTokensApiTokensStatus.
const (
	TeamsReadApiTokensApiTokensStatusACTIVE  TeamsReadApiTokensApiTokensStatus = "ACTIVE"
	TeamsReadApiTokensApiTokensStatusDELETED TeamsReadApiTokensApiTokensStatus = "DELETED"
)

// Defines values for TeamsUpdateApiTokenResponseApiTokensStatus.
const (
	TeamsUpdateApiTokenResponseApiTokensStatusACTIVE  TeamsUpdateApiTokenResponseApiTokensStatus = "ACTIVE"
	TeamsUpdateApiTokenResponseApiTokensStatusDELETED TeamsUpdateApiTokenResponseApiTokensStatus = "DELETED"
)

// Defines values for TeamsUpdateUserStatus.
const (
	ACTIVE   TeamsUpdateUserStatus = "ACTIVE"
	DISABLED TeamsUpdateUserStatus = "DISABLED"
)

// Defines values for AccountsReadAccountsParamsSortOrder.
const (
	AccountsReadAccountsParamsSortOrderASC  AccountsReadAccountsParamsSortOrder = "ASC"
	AccountsReadAccountsParamsSortOrderDESC AccountsReadAccountsParamsSortOrder = "DESC"
)

// Defines values for AccountsReadAccountParamsSortOrder.
const (
	AccountsReadAccountParamsSortOrderASC  AccountsReadAccountParamsSortOrder = "ASC"
	AccountsReadAccountParamsSortOrderDESC AccountsReadAccountParamsSortOrder = "DESC"
)

// Defines values for WorkloadsReadCatalogueItemsParamsSort.
const (
	WorkloadsReadCatalogueItemsParamsSortCatalogueVersionId WorkloadsReadCatalogueItemsParamsSort = "CatalogueVersionId"
	WorkloadsReadCatalogueItemsParamsSortCreatedBy          WorkloadsReadCatalogueItemsParamsSort = "CreatedBy"
	WorkloadsReadCatalogueItemsParamsSortCreatedTS          WorkloadsReadCatalogueItemsParamsSort = "CreatedTS"
	WorkloadsReadCatalogueItemsParamsSortDescription        WorkloadsReadCatalogueItemsParamsSort = "Description"
	WorkloadsReadCatalogueItemsParamsSortId                 WorkloadsReadCatalogueItemsParamsSort = "Id"
	WorkloadsReadCatalogueItemsParamsSortModifiedTS         WorkloadsReadCatalogueItemsParamsSort = "ModifiedTS"
	WorkloadsReadCatalogueItemsParamsSortName               WorkloadsReadCatalogueItemsParamsSort = "Name"
	WorkloadsReadCatalogueItemsParamsSortOrganisationId     WorkloadsReadCatalogueItemsParamsSort = "OrganisationId"
	WorkloadsReadCatalogueItemsParamsSortProtection         WorkloadsReadCatalogueItemsParamsSort = "Protection"
	WorkloadsReadCatalogueItemsParamsSortPublic             WorkloadsReadCatalogueItemsParamsSort = "Public"
	WorkloadsReadCatalogueItemsParamsSortStatus             WorkloadsReadCatalogueItemsParamsSort = "Status"
	WorkloadsReadCatalogueItemsParamsSortUserTaskId         WorkloadsReadCatalogueItemsParamsSort = "UserTaskId"
)

// Defines values for WorkloadsReadCatalogueItemsParamsSortOrder.
const (
	WorkloadsReadCatalogueItemsParamsSortOrderASC  WorkloadsReadCatalogueItemsParamsSortOrder = "ASC"
	WorkloadsReadCatalogueItemsParamsSortOrderDESC WorkloadsReadCatalogueItemsParamsSortOrder = "DESC"
)

// Defines values for WorkloadsReadCatalogueItemParamsSort.
const (
	WorkloadsReadCatalogueItemParamsSortCatalogueVersionId WorkloadsReadCatalogueItemParamsSort = "CatalogueVersionId"
	WorkloadsReadCatalogueItemParamsSortCreatedBy          WorkloadsReadCatalogueItemParamsSort = "CreatedBy"
	WorkloadsReadCatalogueItemParamsSortCreatedTS          WorkloadsReadCatalogueItemParamsSort = "CreatedTS"
	WorkloadsReadCatalogueItemParamsSortDescription        WorkloadsReadCatalogueItemParamsSort = "Description"
	WorkloadsReadCatalogueItemParamsSortId                 WorkloadsReadCatalogueItemParamsSort = "Id"
	WorkloadsReadCatalogueItemParamsSortModifiedTS         WorkloadsReadCatalogueItemParamsSort = "ModifiedTS"
	WorkloadsReadCatalogueItemParamsSortName               WorkloadsReadCatalogueItemParamsSort = "Name"
	WorkloadsReadCatalogueItemParamsSortOrganisationId     WorkloadsReadCatalogueItemParamsSort = "OrganisationId"
	WorkloadsReadCatalogueItemParamsSortProtection         WorkloadsReadCatalogueItemParamsSort = "Protection"
	WorkloadsReadCatalogueItemParamsSortPublic             WorkloadsReadCatalogueItemParamsSort = "Public"
	WorkloadsReadCatalogueItemParamsSortStatus             WorkloadsReadCatalogueItemParamsSort = "Status"
	WorkloadsReadCatalogueItemParamsSortUserTaskId         WorkloadsReadCatalogueItemParamsSort = "UserTaskId"
)

// Defines values for WorkloadsReadCatalogueItemParamsSortOrder.
const (
	WorkloadsReadCatalogueItemParamsSortOrderASC  WorkloadsReadCatalogueItemParamsSortOrder = "ASC"
	WorkloadsReadCatalogueItemParamsSortOrderDESC WorkloadsReadCatalogueItemParamsSortOrder = "DESC"
)

// Defines values for WorkloadsReadWorkloadsParamsSort.
const (
	WorkloadsReadWorkloadsParamsSortAccountId          WorkloadsReadWorkloadsParamsSort = "AccountId"
	WorkloadsReadWorkloadsParamsSortCatalogueId        WorkloadsReadWorkloadsParamsSort = "CatalogueId"
	WorkloadsReadWorkloadsParamsSortCatalogueVersionId WorkloadsReadWorkloadsParamsSort = "CatalogueVersionId"
	WorkloadsReadWorkloadsParamsSortCreatedBy          WorkloadsReadWorkloadsParamsSort = "CreatedBy"
	WorkloadsReadWorkloadsParamsSortCreatedTS          WorkloadsReadWorkloadsParamsSort = "CreatedTS"
	WorkloadsReadWorkloadsParamsSortFactoryVersion     WorkloadsReadWorkloadsParamsSort = "FactoryVersion"
	WorkloadsReadWorkloadsParamsSortId                 WorkloadsReadWorkloadsParamsSort = "Id"
	WorkloadsReadWorkloadsParamsSortModifiedTS         WorkloadsReadWorkloadsParamsSort = "ModifiedTS"
	WorkloadsReadWorkloadsParamsSortName               WorkloadsReadWorkloadsParamsSort = "Name"
	WorkloadsReadWorkloadsParamsSortRegion             WorkloadsReadWorkloadsParamsSort = "Region"
	WorkloadsReadWorkloadsParamsSortStatus             WorkloadsReadWorkloadsParamsSort = "Status"
	WorkloadsReadWorkloadsParamsSortUserTaskId         WorkloadsReadWorkloadsParamsSort = "UserTaskId"
)

// Defines values for WorkloadsReadWorkloadsParamsSortOrder.
const (
	WorkloadsReadWorkloadsParamsSortOrderASC  WorkloadsReadWorkloadsParamsSortOrder = "ASC"
	WorkloadsReadWorkloadsParamsSortOrderDESC WorkloadsReadWorkloadsParamsSortOrder = "DESC"
)

// Defines values for WorkloadsReadWorkloadParamsSort.
const (
	WorkloadsReadWorkloadParamsSortAccountId          WorkloadsReadWorkloadParamsSort = "AccountId"
	WorkloadsReadWorkloadParamsSortCatalogueId        WorkloadsReadWorkloadParamsSort = "CatalogueId"
	WorkloadsReadWorkloadParamsSortCatalogueVersionId WorkloadsReadWorkloadParamsSort = "CatalogueVersionId"
	WorkloadsReadWorkloadParamsSortCreatedBy          WorkloadsReadWorkloadParamsSort = "CreatedBy"
	WorkloadsReadWorkloadParamsSortCreatedTS          WorkloadsReadWorkloadParamsSort = "CreatedTS"
	WorkloadsReadWorkloadParamsSortFactoryVersion     WorkloadsReadWorkloadParamsSort = "FactoryVersion"
	WorkloadsReadWorkloadParamsSortId                 WorkloadsReadWorkloadParamsSort = "Id"
	WorkloadsReadWorkloadParamsSortModifiedTS         WorkloadsReadWorkloadParamsSort = "ModifiedTS"
	WorkloadsReadWorkloadParamsSortName               WorkloadsReadWorkloadParamsSort = "Name"
	WorkloadsReadWorkloadParamsSortRegion             WorkloadsReadWorkloadParamsSort = "Region"
	WorkloadsReadWorkloadParamsSortStatus             WorkloadsReadWorkloadParamsSort = "Status"
	WorkloadsReadWorkloadParamsSortUserTaskId         WorkloadsReadWorkloadParamsSort = "UserTaskId"
)

// Defines values for WorkloadsReadWorkloadParamsSortOrder.
const (
	WorkloadsReadWorkloadParamsSortOrderASC  WorkloadsReadWorkloadParamsSortOrder = "ASC"
	WorkloadsReadWorkloadParamsSortOrderDESC WorkloadsReadWorkloadParamsSortOrder = "DESC"
)

// Account defines model for Account.
type Account struct {
	AWSLoginURLs *struct {
		Admin     *string `json:"admin,omitempty"`
		Developer *string `json:"developer,omitempty"`
		Readonly  *string `json:"readonly,omitempty"`
	} `json:"AWSLoginURLs,omitempty"`

	// AccountRole The role of the account in the org
	AccountRole *AccountAccountRole `json:"AccountRole,omitempty"`
	AccountType *string             `json:"AccountType"`

	// AllocatedTS Allocated timestamp.
	AllocatedTS *time.Time `json:"AllocatedTS"`

	// AssuranceState Hardening state of the Account.
	AssuranceState *AccountAssuranceState `json:"AssuranceState,omitempty"`

	// AssuranceStateReason Descriptive reason for the current AssuranceState.
	AssuranceStateReason *string `json:"AssuranceStateReason"`

	// AwsAccountAlias The IAM alias for the account
	AwsAccountAlias *string `json:"AwsAccountAlias"`

	// AwsAccountCanonicalUserId The Canonical User ID of the account
	AwsAccountCanonicalUserId *string `json:"AwsAccountCanonicalUserId,omitempty"`

	// AwsAccountId AWS Account Id.
	AwsAccountId       *string `json:"AwsAccountId,omitempty"`
	AwsAccountStatusId *string `json:"AwsAccountStatusId"`
	AwsLoginURL        *string `json:"AwsLoginURL,omitempty"`

	// CreatedBy UUID of the account creator.
	CreatedBy *string `json:"CreatedBy"`

	// CreatedTS Created timestamp.
	CreatedTS *time.Time `json:"CreatedTS,omitempty"`

	// Email Email address of account owner.
	Email          *openapi_types.Email `json:"Email,omitempty"`
	FactoryVersion *GitHash             `json:"FactoryVersion,omitempty"`
	Id             *RoUuidv4            `json:"Id,omitempty"`

	// LatestCost Estimated cost to-date for the current billing period.
	LatestCost *float32 `json:"LatestCost,omitempty"`

	// ModifiedTS Modified timestamp.
	ModifiedTS *time.Time `json:"ModifiedTS,omitempty"`

	// Name Name of the Account.
	Name           string  `json:"Name"`
	OrganisationId Uuidv4  `json:"OrganisationId"`
	OrgsOuId       *string `json:"OrgsOuId"`

	// Origin Origin of the Account.
	Origin *AccountOrigin `json:"Origin,omitempty"`

	// Status Status of the Account.
	Status      *AccountStatus  `json:"Status,omitempty"`
	StaxCreated *bool           `json:"StaxCreated,omitempty"`
	Tags        *StaxTags       `json:"Tags"`
	UserTaskId  *NullableUuidv4 `json:"UserTaskId"`
}

// AccountAccountRole The role of the account in the org
type AccountAccountRole string

// AccountAssuranceState Hardening state of the Account.
type AccountAssuranceState string

// AccountOrigin Origin of the Account.
type AccountOrigin string

// AccountStatus Status of the Account.
type AccountStatus string

// AccountType defines model for AccountType.
type AccountType struct {
	Accounts  []RoUuidv4      `json:"Accounts"`
	CreatedBy *NullableUuidv4 `json:"CreatedBy"`

	// CreatedTS Created timestamp.
	CreatedTS *time.Time `json:"CreatedTS"`
	Id        *RoUuidv4  `json:"Id,omitempty"`

	// ModifiedTS Modified timestamp.
	ModifiedTS *time.Time `json:"ModifiedTS"`

	// Name Name of Account Type.
	Name           string     `json:"Name"`
	OrganisationId *RoUuidv4  `json:"OrganisationId,omitempty"`
	Policies       []RoUuidv4 `json:"Policies"`
	Roles          []struct {
		GroupId  *RoUuidv4 `json:"GroupId,omitempty"`
		RoleName string    `json:"RoleName"`
	} `json:"Roles"`
	Status      interface{} `json:"Status"`
	StaxCreated *bool       `json:"StaxCreated"`
}

// AccountTypeAccessMap defines model for AccountTypeAccessMap.
type AccountTypeAccessMap struct {
	AccountTypeId   *Uuidv4 `json:"AccountTypeId,omitempty"`
	AccountTypeName *string `json:"AccountTypeName,omitempty"`
	GroupId         *Uuidv4 `json:"GroupId,omitempty"`
	GroupName       *string `json:"GroupName,omitempty"`

	// RoleName AWS access roles enabled for an account type.
	RoleName *AccountTypeAccessMapRoleName `json:"RoleName,omitempty"`
	union    json.RawMessage
}

// AccountTypeAccessMapRoleName AWS access roles enabled for an account type.
type AccountTypeAccessMapRoleName string

// AccountTypeAccessMap0 defines model for .
type AccountTypeAccessMap0 = interface{}

// AccountTypeAccessMap1 defines model for .
type AccountTypeAccessMap1 = interface{}

// AccountTypeAccessMap2 defines model for .
type AccountTypeAccessMap2 = interface{}

// AccountTypeAccessMap3 defines model for .
type AccountTypeAccessMap3 = interface{}

// AccountTypeMemberMap defines model for AccountTypeMemberMap.
type AccountTypeMemberMap struct {
	AccountId       *Uuidv4 `json:"AccountId,omitempty"`
	AccountTypeId   *Uuidv4 `json:"AccountTypeId,omitempty"`
	AccountTypeName *string `json:"AccountTypeName,omitempty"`
	union           json.RawMessage
}

// AccountTypeMemberMap0 defines model for .
type AccountTypeMemberMap0 = interface{}

// AccountTypeMemberMap1 defines model for .
type AccountTypeMemberMap1 = interface{}

// AccountTypePolicyMap defines model for AccountTypePolicyMap.
type AccountTypePolicyMap struct {
	AccountTypeId   *Uuidv4 `json:"AccountTypeId,omitempty"`
	AccountTypeName *string `json:"AccountTypeName,omitempty"`
	PolicyId        *Uuidv4 `json:"PolicyId,omitempty"`
	union           json.RawMessage
}

// AccountTypePolicyMap0 defines model for .
type AccountTypePolicyMap0 = interface{}

// AccountTypePolicyMap1 defines model for .
type AccountTypePolicyMap1 = interface{}

// ApiRole Stax role assigned to an API Token.
type ApiRole string

// AwsRegion AWS Region
type AwsRegion string

// BaseEvent defines model for BaseEvent.
type BaseEvent struct {
	DetailType string `json:"DetailType"`
}

// BaseEventDetail defines model for BaseEventDetail.
type BaseEventDetail struct {
	Message   *MessageEventDetail `json:"Message,omitempty"`
	Operation Operation           `json:"Operation"`

	// OperationStatus The status of an operation within Stax. This status is returned as part of the response for an asynchronous request and as the status of a Task. STARTED indicates that a request/Task has been received by Stax and is awaiting a worker. PENDING indicates that the Task has been picked up by a worker and is in queue. RUNNING indicates that the Task is active and being processed by a worker. SUCCEEDED indicates that the Task has completed successfully. FAILED indicates that the Task failed.
	OperationStatus OperationStatus `json:"OperationStatus"`
	Severity        string          `json:"Severity"`
}

// BgpMapping defines model for BgpMapping.
type BgpMapping struct {
	// BgpPeerId The BGP Peer ID of the VIF
	BgpPeerId *string `json:"BgpPeerId,omitempty"`

	// BgpStatus The status of the BGP peer.
	BgpStatus *BgpMappingBgpStatus `json:"BgpStatus,omitempty"`
}

// BgpMappingBgpStatus The status of the BGP peer.
type BgpMappingBgpStatus string

// CatalogueData defines model for CatalogueData.
type CatalogueData struct {
	CatalogueId        *Uuidv4         `json:"CatalogueId,omitempty"`
	CatalogueVersionId *NullableUuidv4 `json:"CatalogueVersionId"`
	CreatedBy          *NullableUuidv4 `json:"CreatedBy"`

	// CreatedTS Created timestamp.
	CreatedTS *time.Time `json:"CreatedTS,omitempty"`

	// Description Description of the Workload.
	Description  string  `json:"Description"`
	Id           *Uuidv4 `json:"Id,omitempty"`
	ManifestBody *string `json:"ManifestBody,omitempty"`

	// ModifiedTS Modified timestamp.
	ModifiedTS *time.Time `json:"ModifiedTS,omitempty"`

	// Name Name of the Workload Catalogue Item to create.
	Name           string     `json:"Name"`
	Operation      *Operation `json:"Operation,omitempty"`
	OrganisationId *Uuidv4    `json:"OrganisationId,omitempty"`
	Parameters     *Parameter `json:"Parameters"`

	// Protection Boolean value declaring if the Workload Catalogue Item is public or private.
	Protection *bool `json:"Protection,omitempty"`

	// Public Boolean value declaring if the Workload Catalogue Item is public or private.
	Public *bool `json:"Public,omitempty"`

	// Status Status of the Workload.
	Status     *CatalogueStatus `json:"Status,omitempty"`
	Tags       *Tags            `json:"Tags"`
	UserTaskId *RoUuidv4        `json:"UserTaskId,omitempty"`
	Version    *string          `json:"Version,omitempty"`
}

// CatalogueStatus Status of the Workload.
type CatalogueStatus string

// CatalogueVersionProperties defines model for CatalogueVersionProperties.
type CatalogueVersionProperties struct {
	CatalogueId *RoUuidv4 `json:"CatalogueId,omitempty"`
	CreatedBy   *RoUuidv4 `json:"CreatedBy,omitempty"`

	// CreatedTS Created timestamp.
	CreatedTS *time.Time `json:"CreatedTS,omitempty"`

	// Description Description of the Workload.
	Description *string   `json:"Description,omitempty"`
	Id          *RoUuidv4 `json:"Id,omitempty"`

	// ManifestURL HTTPS/S3 URL of the manifest. Either this or ManifestBody must be provided.
	ManifestURL *string `json:"ManifestURL,omitempty"`

	// ModifiedTS Modified timestamp.
	ModifiedTS *time.Time `json:"ModifiedTS,omitempty"`
	Outputs    *[]string  `json:"Outputs"`

	// Public Boolean value declaring if the Workload Catalogue Item is public or private.
	Public *bool `json:"Public,omitempty"`

	// Status Status of the Workload.
	Status          *CatalogueVersionPropertiesStatus `json:"Status,omitempty"`
	UserTaskId      *RoUuidv4                         `json:"UserTaskId,omitempty"`
	WorkloadVersion *string                           `json:"WorkloadVersion,omitempty"`
}

// CatalogueVersionPropertiesStatus Status of the Workload.
type CatalogueVersionPropertiesStatus string

// CidrExclusion defines model for CidrExclusion.
type CidrExclusion struct {
	// Cidr CIDR Range in quad dot notation.
	Cidr      string          `json:"Cidr"`
	CreatedBy *NullableUuidv4 `json:"CreatedBy"`

	// CreatedTS Created timestamp.
	CreatedTS *time.Time `json:"CreatedTS,omitempty"`

	// Description Longer description of what the CIDR Exclusion is used for.
	Description *string   `json:"Description"`
	Id          *RoUuidv4 `json:"Id,omitempty"`

	// ModifiedTS Modified timestamp.
	ModifiedTS *time.Time `json:"ModifiedTS,omitempty"`

	// Name Name of the CIDR Exclusion.
	Name            string  `json:"Name"`
	NetworkingHubId *Uuidv4 `json:"NetworkingHubId,omitempty"`

	// Status The status of the CIRD Exclusion.
	Status *CidrExclusionStatus `json:"Status,omitempty"`
	Tags   *NetworkingTags      `json:"Tags"`
}

// CidrExclusionStatus The status of the CIRD Exclusion.
type CidrExclusionStatus string

// CidrRange defines model for CidrRange.
type CidrRange struct {
	// Cidr CIDR Range in quad dot notation. This range is a private network range with a size between /8 to /23
	Cidr      string          `json:"Cidr"`
	CreatedBy *NullableUuidv4 `json:"CreatedBy"`

	// CreatedTS Created timestamp.
	CreatedTS *time.Time `json:"CreatedTS,omitempty"`

	// DefaultCidrRange Boolean value declaring if the range is the default CIDR Range
	DefaultCidrRange *bool `json:"DefaultCidrRange,omitempty"`

	// Description Longer description of what the CIDR Range is used for.
	Description *string   `json:"Description"`
	Id          *RoUuidv4 `json:"Id,omitempty"`

	// LastAllocationTS Created timestamp.
	LastAllocationTS *time.Time `json:"LastAllocationTS,omitempty"`

	// ModifiedTS Modified timestamp.
	ModifiedTS *time.Time `json:"ModifiedTS,omitempty"`

	// Name Name of the CIDR Range.
	Name            string    `json:"Name"`
	NetworkingHubId *RoUuidv4 `json:"NetworkingHubId,omitempty"`

	// Status The status of the CIDR Range.
	Status *CidrRangeStatus `json:"Status,omitempty"`
	Tags   *NetworkingTags  `json:"Tags"`
}

// CidrRangeStatus The status of the CIDR Range.
type CidrRangeStatus string

// CreateCatalogueDetail defines model for CreateCatalogueDetail.
type CreateCatalogueDetail struct {
	Message   *MessageEventDetail `json:"Message,omitempty"`
	Operation Operation           `json:"Operation"`

	// OperationStatus The status of an operation within Stax. This status is returned as part of the response for an asynchronous request and as the status of a Task. STARTED indicates that a request/Task has been received by Stax and is awaiting a worker. PENDING indicates that the Task has been picked up by a worker and is in queue. RUNNING indicates that the Task is active and being processed by a worker. SUCCEEDED indicates that the Task has completed successfully. FAILED indicates that the Task failed.
	OperationStatus       OperationStatus `json:"OperationStatus"`
	Severity              string          `json:"Severity"`
	TraceId               *string         `json:"TraceId,omitempty"`
	WorkloadCatalogueItem *CatalogueData  `json:"WorkloadCatalogueItem,omitempty"`
}

// CreateCatalogueEvent defines model for CreateCatalogueEvent.
type CreateCatalogueEvent = BaseEvent

// CreateVersionDetail defines model for CreateVersionDetail.
type CreateVersionDetail = BaseEventDetail

// CreateVersionEvent defines model for CreateVersionEvent.
type CreateVersionEvent = BaseEvent

// CreateWorkloadDetail defines model for CreateWorkloadDetail.
type CreateWorkloadDetail struct {
	Message   *MessageEventDetail `json:"Message,omitempty"`
	Operation Operation           `json:"Operation"`

	// OperationStatus The status of an operation within Stax. This status is returned as part of the response for an asynchronous request and as the status of a Task. STARTED indicates that a request/Task has been received by Stax and is awaiting a worker. PENDING indicates that the Task has been picked up by a worker and is in queue. RUNNING indicates that the Task is active and being processed by a worker. SUCCEEDED indicates that the Task has completed successfully. FAILED indicates that the Task failed.
	OperationStatus OperationStatus `json:"OperationStatus"`
	Severity        string          `json:"Severity"`
	Workload        *WorkloadData   `json:"Workload,omitempty"`
}

// CreateWorkloadEvent defines model for CreateWorkloadEvent.
type CreateWorkloadEvent struct {
	Detail     *CreateWorkloadDetail `json:"Detail,omitempty"`
	DetailType string                `json:"DetailType"`
	WorkloadId *RoUuidv4             `json:"WorkloadId,omitempty"`
}

// DNSResolver defines model for DNSResolver.
type DNSResolver struct {
	CreatedBy *NullableUuidv4 `json:"CreatedBy"`

	// CreatedTS Created timestamp.
	CreatedTS *time.Time `json:"CreatedTS,omitempty"`
	Id        *RoUuidv4  `json:"Id,omitempty"`

	// InboundIpAddresses The IP Addresses attached to the Inbound DNS Resolver.
	InboundIpAddresses *[]string `json:"InboundIpAddresses"`

	// Interfaces The number of ENIs to attach to the DNS Resolvers.
	Interfaces int `json:"Interfaces"`

	// ModifiedTS Modified timestamp.
	ModifiedTS *time.Time `json:"ModifiedTS,omitempty"`

	// Name Name of the Stax DNS Resolvers.
	Name            string `json:"Name"`
	NetworkingHubId Uuidv4 `json:"NetworkingHubId"`

	// OutboundIpAddresses The IP Addresses attached to the Outbound DNS Resolver.
	OutboundIpAddresses *[]string `json:"OutboundIpAddresses"`

	// Status The status of the Stax DNS Resolvers.
	Status     *DNSResolverStatus `json:"Status,omitempty"`
	Tags       *NetworkingTags    `json:"Tags"`
	UserTaskId *NullableUuidv4    `json:"UserTaskId"`
}

// DNSResolverStatus The status of the Stax DNS Resolvers.
type DNSResolverStatus string

// DNSRule defines model for DNSRule.
type DNSRule struct {
	// AwsRuleId The AWS Route53 Resolver Rule Id.
	AwsRuleId *string         `json:"AwsRuleId"`
	CreatedBy *NullableUuidv4 `json:"CreatedBy"`

	// CreatedTS Created timestamp.
	CreatedTS     *time.Time `json:"CreatedTS,omitempty"`
	DnsResolverId *RoUuidv4  `json:"DnsResolverId,omitempty"`

	// DomainName Domain name to forward DNS queries for.
	DomainName string `json:"DomainName"`

	// ForwarderIpAddresses The IP Addresses to forward DNS queries to.
	ForwarderIpAddresses []string  `json:"ForwarderIpAddresses"`
	Id                   *RoUuidv4 `json:"Id,omitempty"`

	// ModifiedTS Modified timestamp.
	ModifiedTS *time.Time `json:"ModifiedTS,omitempty"`

	// Name Name of Stax DNS Rule.
	Name string `json:"Name"`

	// Status The status of the Stax DNS Rule.
	Status     *DNSRuleStatus  `json:"Status,omitempty"`
	Tags       *NetworkingTags `json:"Tags"`
	UserTaskId *NullableUuidv4 `json:"UserTaskId"`
}

// DNSRuleStatus The status of the Stax DNS Rule.
type DNSRuleStatus string

// DeleteCatalogueDetail defines model for DeleteCatalogueDetail.
type DeleteCatalogueDetail struct {
	Message   *MessageEventDetail `json:"Message,omitempty"`
	Operation Operation           `json:"Operation"`

	// OperationStatus The status of an operation within Stax. This status is returned as part of the response for an asynchronous request and as the status of a Task. STARTED indicates that a request/Task has been received by Stax and is awaiting a worker. PENDING indicates that the Task has been picked up by a worker and is in queue. RUNNING indicates that the Task is active and being processed by a worker. SUCCEEDED indicates that the Task has completed successfully. FAILED indicates that the Task failed.
	OperationStatus       OperationStatus `json:"OperationStatus"`
	Severity              string          `json:"Severity"`
	TraceId               *string         `json:"TraceId,omitempty"`
	WorkloadCatalogueItem *CatalogueData  `json:"WorkloadCatalogueItem,omitempty"`
}

// DeleteCatalogueEvent defines model for DeleteCatalogueEvent.
type DeleteCatalogueEvent = BaseEvent

// DeleteVersionDetail defines model for DeleteVersionDetail.
type DeleteVersionDetail = BaseEventDetail

// DeleteVersionEvent defines model for DeleteVersionEvent.
type DeleteVersionEvent = BaseEvent

// DeleteWorkloadDetail defines model for DeleteWorkloadDetail.
type DeleteWorkloadDetail struct {
	Message   *MessageEventDetail `json:"Message,omitempty"`
	Operation Operation           `json:"Operation"`

	// OperationStatus The status of an operation within Stax. This status is returned as part of the response for an asynchronous request and as the status of a Task. STARTED indicates that a request/Task has been received by Stax and is awaiting a worker. PENDING indicates that the Task has been picked up by a worker and is in queue. RUNNING indicates that the Task is active and being processed by a worker. SUCCEEDED indicates that the Task has completed successfully. FAILED indicates that the Task failed.
	OperationStatus OperationStatus `json:"OperationStatus"`
	Severity        string          `json:"Severity"`
	TraceId         *string         `json:"TraceId,omitempty"`
	Workload        *WorkloadData   `json:"Workload,omitempty"`
}

// DeleteWorkloadEvent defines model for DeleteWorkloadEvent.
type DeleteWorkloadEvent = BaseEvent

// DxAssociation defines model for DxAssociation.
type DxAssociation struct {
	// AwsAssociationId The AWS Id of the DX Association.
	AwsAssociationId *string         `json:"AwsAssociationId"`
	CreatedBy        *NullableUuidv4 `json:"CreatedBy"`

	// CreatedTS Created timestamp.
	CreatedTS   *time.Time `json:"CreatedTS,omitempty"`
	DxGatewayId Uuidv4     `json:"DxGatewayId"`
	Id          *RoUuidv4  `json:"Id,omitempty"`

	// ModifiedTS Modified timestamp.
	ModifiedTS      *time.Time `json:"ModifiedTS,omitempty"`
	NetworkingHubId Uuidv4     `json:"NetworkingHubId"`

	// Prefixes The CIDR Ranges to advertise to on-premises.
	Prefixes []string `json:"Prefixes"`

	// Status The status of the Stax DX Association.
	Status     *DxAssociationStatus `json:"Status,omitempty"`
	UserTaskId *NullableUuidv4      `json:"UserTaskId"`
	VpcId      *NullableUuidv4      `json:"VpcId"`
}

// DxAssociationStatus The status of the Stax DX Association.
type DxAssociationStatus string

// DxConnection defines model for DxConnection.
type DxConnection struct {
	// Bandwidth Bandwidth of the Direct Connect Connection.
	Bandwidth string `json:"Bandwidth"`

	// ConnectionId AWS Id of the Direct Connect Connection.
	ConnectionId string `json:"ConnectionId"`

	// ConnectionName Name of the Direct Connect Connection.
	ConnectionName string `json:"ConnectionName"`

	// ConnectionState State of the Direct Connect Connection.
	ConnectionState *DxConnectionConnectionState `json:"ConnectionState,omitempty"`

	// Region AWS Region
	Region AwsRegion `json:"Region"`

	// Vlan VLAN for the Direct Connect Connection.
	Vlan *int `json:"Vlan"`
}

// DxConnectionConnectionState State of the Direct Connect Connection.
type DxConnectionConnectionState string

// DxGateway defines model for DxGateway.
type DxGateway struct {
	AccountId Uuidv4 `json:"AccountId"`

	// Asn ASN to assign to the Direct Connect Gateway.
	Asn int `json:"Asn"`

	// AwsGatewayId The AWS Id of the Direct Connect Gateway.
	AwsGatewayId *string         `json:"AwsGatewayId"`
	CreatedBy    *NullableUuidv4 `json:"CreatedBy"`

	// CreatedTS Created timestamp.
	CreatedTS *time.Time `json:"CreatedTS,omitempty"`

	// ExternalResource Boolean value to determine if the resource did not originate from Stax.
	ExternalResource *bool `json:"ExternalResource,omitempty"`

	// GatewayType The type of the Stax DX Gateway.
	GatewayType *DxGatewayGatewayType `json:"GatewayType,omitempty"`
	Id          *RoUuidv4             `json:"Id,omitempty"`

	// ModifiedTS Modified timestamp.
	ModifiedTS *time.Time `json:"ModifiedTS,omitempty"`

	// Name Name of the Direct Connect Gateway.
	Name           string    `json:"Name"`
	OrganisationId *RoUuidv4 `json:"OrganisationId,omitempty"`

	// Status The status of the Stax DX Gateway.
	Status     *DxGatewayStatus `json:"Status,omitempty"`
	UserTaskId *NullableUuidv4  `json:"UserTaskId"`
}

// DxGatewayGatewayType The type of the Stax DX Gateway.
type DxGatewayGatewayType string

// DxGatewayStatus The status of the Stax DX Gateway.
type DxGatewayStatus string

// DxVif defines model for DxVif.
type DxVif struct {
	// Asn ASN to assign to the Direct Connect VIF.
	Asn int `json:"Asn"`

	// AwsConnectionId AWS Id of the Direct Connect Connection.
	AwsConnectionId string `json:"AwsConnectionId"`

	// AwsRouterIp The BGP peer IP configured on the AWS endpoint.
	AwsRouterIp string `json:"AwsRouterIp"`

	// AwsVifId The AWS Id of the Direct Connect VIF.
	AwsVifId  *string         `json:"AwsVifId"`
	CreatedBy *NullableUuidv4 `json:"CreatedBy"`

	// CreatedTS Created timestamp.
	CreatedTS   *time.Time `json:"CreatedTS,omitempty"`
	DxGatewayId Uuidv4     `json:"DxGatewayId"`

	// ExternalResource Boolean value to determine if the resource did not originate from Stax.
	ExternalResource *bool     `json:"ExternalResource,omitempty"`
	Id               *RoUuidv4 `json:"Id,omitempty"`

	// JumboMtu Boolean value to enable Jumbo Frames.
	JumboMtu bool `json:"JumboMtu"`

	// ModifiedTS Modified timestamp.
	ModifiedTS *time.Time `json:"ModifiedTS,omitempty"`

	// Name Name of the Direct Connect VIF.
	Name string `json:"Name"`

	// Region AWS Region
	Region AwsRegion `json:"Region"`

	// RouterIp The BGP peer IP configured on your endpoint.
	RouterIp string `json:"RouterIp"`

	// Status The status of the Stax DX VIF.
	Status     *DxVifStatus    `json:"Status,omitempty"`
	Tags       *NetworkingTags `json:"Tags"`
	UserTaskId *NullableUuidv4 `json:"UserTaskId"`

	// VifType The type of Direct Connect VIF.
	VifType *DxVifVifType `json:"VifType,omitempty"`

	// Vlan VLAN for the Direct Connect VIF.
	Vlan int `json:"Vlan"`
}

// DxVifStatus The status of the Stax DX VIF.
type DxVifStatus string

// DxVifVifType The type of Direct Connect VIF.
type DxVifVifType string

// VifStatus defines model for DxVifStatus.
type VifStatus = []BgpMapping

// Error defines model for Error.
type Error struct {
	Cause *string `json:"Cause,omitempty"`
	Error *string `json:"Error,omitempty"`
}

// GatewayMap defines model for GatewayMap.
type GatewayMap struct {
	AccountId Uuidv4 `json:"AccountId"`

	// Asn ASN to assign to the Direct Connect Gateway.
	Asn int `json:"Asn"`

	// GatewayType The type of the Stax DX Gateway.
	GatewayType *GatewayMapGatewayType `json:"GatewayType,omitempty"`

	// Name Name of the Direct Connect Gateway.
	Name string `json:"Name"`
}

// GatewayMapGatewayType The type of the Stax DX Gateway.
type GatewayMapGatewayType string

// GitHash defines model for GitHash.
type GitHash = string

// Group defines model for Group.
type Group struct {
	CreatedBy *NullableUuidv4 `json:"CreatedBy"`

	// CreatedTS Created timestamp.
	CreatedTS *time.Time `json:"CreatedTS,omitempty"`

	// GroupType Group Type identifies whether group is managed by stax (LOCAL) or externally (SCIM).
	GroupType GroupGroupType `json:"GroupType"`
	Id        *RoUuidv4      `json:"Id,omitempty"`

	// ModifiedTS Modified timestamp.
	ModifiedTS *time.Time `json:"ModifiedTS,omitempty"`

	// Name Name of the Group.
	Name           string    `json:"Name"`
	OrganisationId *RoUuidv4 `json:"OrganisationId,omitempty"`

	// Status Status of the Group.
	Status     GroupStatus     `json:"Status"`
	UserTaskId *NullableUuidv4 `json:"UserTaskId"`

	// Users Array of IDs of Users belonging to the Group.
	Users *[]RoUuidv4 `json:"Users,omitempty"`
}

// GroupGroupType Group Type identifies whether group is managed by stax (LOCAL) or externally (SCIM).
type GroupGroupType string

// GroupStatus Status of the Group.
type GroupStatus string

// GuardDutyConfiguration defines model for GuardDutyConfiguration.
type GuardDutyConfiguration struct {
	// Features A list of GuardDuty features that will be configured for the organization.
	Features struct {
		EBSMALWAREPROTECTION struct {
			// EbsSnapshotPreservation Snapshot preservation settings.
			EbsSnapshotPreservation *GuardDutyConfigurationFeaturesEBSMALWAREPROTECTIONEbsSnapshotPreservation `json:"EbsSnapshotPreservation"`

			// Enable Whether to enable malware scanning
			Enable               bool                                                                      `json:"Enable"`
			ScanResourceCriteria GuardDutyConfiguration_Features_EBSMALWAREPROTECTION_ScanResourceCriteria `json:"ScanResourceCriteria"`
		} `json:"EBS_MALWARE_PROTECTION"`

		// EKSAUDITLOGS Describes whether to monitor and generate findings from Kubernetes Audit Logs.
		EKSAUDITLOGS struct {
			// Enable Whether to enable findings from Kubernetes Audit Logs.
			Enable bool `json:"Enable"`
		} `json:"EKS_AUDIT_LOGS"`

		// EKSRUNTIMEMONITORING EKS Runtime Monitoring provides runtime threat detection coverage for Amazon Elastic Kubernetes Service (Amazon EKS) nodes and containers within your AWS environment.
		EKSRUNTIMEMONITORING struct {
			// EKSADDONMANAGEMENT Bool to indicate whether 'EKS Runtime Monitoring manage agent automatically' is enabled. GuardDuty will fully automate the deployment of and update to the GuardDuty security agent for the EKS clusters.
			EKSADDONMANAGEMENT *bool `json:"EKS_ADDON_MANAGEMENT"`

			// Enable Bool to indicate whether 'EKS Runtime Monitoring' is enabled.
			Enable bool `json:"Enable"`
		} `json:"EKS_RUNTIME_MONITORING"`

		// LAMBDANETWORKLOGS Describes whether to monitor lambda function network logs
		LAMBDANETWORKLOGS struct {
			// Enable Whether to enable monitor lambda function network logs
			Enable bool `json:"Enable"`
		} `json:"LAMBDA_NETWORK_LOGS"`

		// RDSLOGINEVENTS Describes whether to monitor and generate findings from RDS Protection.
		RDSLOGINEVENTS struct {
			// Enable Whether to enable findings from RDS Protection.
			Enable bool `json:"Enable"`
		} `json:"RDS_LOGIN_EVENTS"`

		// S3DATAEVENTS Describes whether to monitor and generate findings on S3 data events.
		S3DATAEVENTS struct {
			// Enable Whether to enable S3 Protection.
			Enable bool `json:"Enable"`
		} `json:"S3_DATA_EVENTS"`
	} `json:"Features"`

	// FindingPublishingFrequency  A value that specifies how frequently updated findings are exported.
	FindingPublishingFrequency GuardDutyConfigurationFindingPublishingFrequency `json:"FindingPublishingFrequency"`
}

// GuardDutyConfigurationFeaturesEBSMALWAREPROTECTIONEbsSnapshotPreservation Snapshot preservation settings.
type GuardDutyConfigurationFeaturesEBSMALWAREPROTECTIONEbsSnapshotPreservation string

// GuardDutyConfigurationFeaturesEBSMALWAREPROTECTIONScanResourceCriteria0 defines model for .
type GuardDutyConfigurationFeaturesEBSMALWAREPROTECTIONScanResourceCriteria0 struct {
	// Include Scan EC2 instances and EBS volumes using inclusion tags
	Include struct {
		// EC2INSTANCETAG Scan EC2 instances and EBS volumes using inclusion tags
		EC2INSTANCETAG []ScanTags `json:"EC2_INSTANCE_TAG"`
	} `json:"Include"`
}

// GuardDutyConfigurationFeaturesEBSMALWAREPROTECTIONScanResourceCriteria1 defines model for .
type GuardDutyConfigurationFeaturesEBSMALWAREPROTECTIONScanResourceCriteria1 struct {
	// Exclude Scan EC2 instances and EBS volumes using exclusion tags
	Exclude struct {
		// EC2INSTANCETAG Scan EC2 instances and EBS volumes using exclusion tags
		EC2INSTANCETAG []ScanTags `json:"EC2_INSTANCE_TAG"`
	} `json:"Exclude"`
}

// GuardDutyConfiguration_Features_EBSMALWAREPROTECTION_ScanResourceCriteria defines model for GuardDutyConfiguration.Features.EBSMALWAREPROTECTION.ScanResourceCriteria.
type GuardDutyConfiguration_Features_EBSMALWAREPROTECTION_ScanResourceCriteria struct {
	union json.RawMessage
}

// GuardDutyConfigurationFindingPublishingFrequency  A value that specifies how frequently updated findings are exported.
type GuardDutyConfigurationFindingPublishingFrequency string

// HubConnection defines model for HubConnection.
type HubConnection struct {
	// ImprovedAcceleration Boolean value to turn on AWS Global Accelerator and the AWS global network for improved performance
	ImprovedAcceleration bool `json:"ImprovedAcceleration"`

	// Name Name of Stax VPN Connection.
	Name            string          `json:"Name"`
	NetworkingHubId Uuidv4          `json:"NetworkingHubId"`
	Tags            *NetworkingTags `json:"Tags"`
}

// HubPeering defines model for HubPeering.
type HubPeering struct {
	CreatedBy *NullableUuidv4 `json:"CreatedBy"`

	// CreatedTS Created timestamp.
	CreatedTS *time.Time `json:"CreatedTS,omitempty"`

	// DestinationAwsAccountId The AWS Account Id that contains the Destination TGW.
	DestinationAwsAccountId *string `json:"DestinationAwsAccountId"`

	// DestinationAwsRegion AWS Region
	DestinationAwsRegion *NullableAwsRegion `json:"DestinationAwsRegion"`

	// DestinationAwsTgwId The AWS Id of the Destination TGW.
	DestinationAwsTgwId        *string         `json:"DestinationAwsTgwId"`
	DestinationNetworkingHubId *NullableUuidv4 `json:"DestinationNetworkingHubId"`

	// DestinationTgwPeeringAttachmentId The AWS Id of the Destination TGW Peering attachment.
	DestinationTgwPeeringAttachmentId *string `json:"DestinationTgwPeeringAttachmentId"`

	// ExternalResource Boolean value to determine if the resource did not originate from Stax.
	ExternalResource *bool `json:"ExternalResource,omitempty"`

	// HubPeeringTarget The target type to determine the actions against the destination.
	HubPeeringTarget *HubPeeringHubPeeringTarget `json:"HubPeeringTarget,omitempty"`
	Id               *RoUuidv4                   `json:"Id,omitempty"`

	// ModifiedTS Modified timestamp.
	ModifiedTS *time.Time `json:"ModifiedTS,omitempty"`

	// Name The Name of the Hub Peering.
	Name           string    `json:"Name"`
	OrganisationId *RoUuidv4 `json:"OrganisationId,omitempty"`

	// SourceAwsAccountId The AWS Account Id that contains the Source TGW.
	SourceAwsAccountId *string `json:"SourceAwsAccountId"`

	// SourceAwsRegion AWS Region
	SourceAwsRegion *NullableAwsRegion `json:"SourceAwsRegion"`

	// SourceAwsTgwId The AWS Id of the Source TGW.
	SourceAwsTgwId        *string `json:"SourceAwsTgwId"`
	SourceNetworkingHubId Uuidv4  `json:"SourceNetworkingHubId"`

	// SourceTgwPeeringAttachmentId The AWS Id of the Source TGW Peering attachment.
	SourceTgwPeeringAttachmentId *string `json:"SourceTgwPeeringAttachmentId"`

	// Status The status of the Hub Peering.
	Status     *HubPeeringStatus `json:"Status,omitempty"`
	Tags       *NetworkingTags   `json:"Tags"`
	UserTaskId *NullableUuidv4   `json:"UserTaskId"`
}

// HubPeeringHubPeeringTarget The target type to determine the actions against the destination.
type HubPeeringHubPeeringTarget string

// HubPeeringStatus The status of the Hub Peering.
type HubPeeringStatus string

// IdamUser defines model for IdamUser.
type IdamUser struct {
	Access           *map[string]interface{} `json:"access,omitempty"`
	Attributes       *map[string]interface{} `json:"attributes,omitempty"`
	CreatedTimestamp *int                    `json:"createdTimestamp,omitempty"`
	CustomerId       *RoUuidv4               `json:"customerId,omitempty"`

	// Email Email address of User.
	Email         *openapi_types.Email `json:"email,omitempty"`
	EmailVerified *bool                `json:"emailVerified,omitempty"`
	Enabled       *bool                `json:"enabled,omitempty"`

	// FirstName Given Name of the User.
	FirstName *string   `json:"firstName,omitempty"`
	Id        *RoUuidv4 `json:"id,omitempty"`

	// LastName Family Name of the User.
	LastName        *string   `json:"lastName,omitempty"`
	OrgAlias        *string   `json:"orgAlias,omitempty"`
	OrganisationId  *RoUuidv4 `json:"organisationId,omitempty"`
	RequiredActions *[]string `json:"requiredActions,omitempty"`

	// Role Stax role assigned to user.
	Role *Role `json:"role,omitempty"`
	Totp *bool `json:"totp,omitempty"`
}

// IdamUserRole Stax role assigned to an IDAM user.
type IdamUserRole string

// KeyValueRequestParameter defines model for KeyValueRequestParameter.
type KeyValueRequestParameter struct {
	Key   string `json:"Key"`
	Value string `json:"Value"`
}

// MessageEventDetail defines model for MessageEventDetail.
type MessageEventDetail struct {
	union json.RawMessage
}

// MessageEventDetail0 defines model for .
type MessageEventDetail0 struct {
	CustomerId *Uuidv4 `json:"CustomerId,omitempty"`
	TaskId     *Uuidv4 `json:"TaskId,omitempty"`
	TraceId    *string `json:"TraceId,omitempty"`
}

// MessageEventDetail1 defines model for .
type MessageEventDetail1 = string

// NetworkingHub defines model for NetworkingHub.
type NetworkingHub struct {
	AccountId Uuidv4 `json:"AccountId"`

	// Asn A private Autonomous System Number (ASN) for the Amazon side of a BGP session
	Asn       *int            `json:"Asn,omitempty"`
	CreatedBy *NullableUuidv4 `json:"CreatedBy"`

	// CreatedTS Created timestamp.
	CreatedTS *time.Time `json:"CreatedTS,omitempty"`

	// Description Longer description of what the Stax Networking Hub is used for.
	Description        *string              `json:"Description"`
	Id                 *RoUuidv4            `json:"Id,omitempty"`
	InterfaceEndpoints *[]InterfaceEndpoint `json:"InterfaceEndpoints,omitempty"`

	// ModifiedTS Modified timestamp.
	ModifiedTS *time.Time `json:"ModifiedTS,omitempty"`

	// Name Name of Stax Networking Hub.
	Name           string    `json:"Name"`
	OrganisationId *RoUuidv4 `json:"OrganisationId,omitempty"`

	// PhzSuffix The suffix used to create Route53 Private Hosted Zones names within the Networking Hub, cannot be modified once set
	PhzSuffix *string `json:"PhzSuffix"`

	// RedundantEndpoints Boolean value declaring if redundant Interface VPC Endpoints will be created
	RedundantEndpoints *bool `json:"RedundantEndpoints,omitempty"`

	// Region AWS Region
	Region AwsRegion `json:"Region"`

	// Status The status of the Stax Networking Hub.
	Status     *NetworkingHubStatus `json:"Status,omitempty"`
	Tags       *NetworkingTags      `json:"Tags"`
	UserTaskId *NullableUuidv4      `json:"UserTaskId"`

	// VpnEcmpSupport Boolean value declaring to enable or disable Equal Cost Multipath Protocol support
	VpnEcmpSupport *bool `json:"VpnEcmpSupport,omitempty"`
}

// NetworkingHubStatus The status of the Stax Networking Hub.
type NetworkingHubStatus string

// NetworkingTags defines model for NetworkingTags.
type NetworkingTags map[string]string

// Null defines model for Null.
type Null = interface{}

// Operation defines model for Operation.
type Operation string

// OperationStatus The status of an operation within Stax. This status is returned as part of the response for an asynchronous request and as the status of a Task. STARTED indicates that a request/Task has been received by Stax and is awaiting a worker. PENDING indicates that the Task has been picked up by a worker and is in queue. RUNNING indicates that the Task is active and being processed by a worker. SUCCEEDED indicates that the Task has completed successfully. FAILED indicates that the Task failed.
type OperationStatus string

// Organisation defines model for Organisation.
type Organisation struct {
	// Alias Alias for your Organisation. This alias will be used in the URL of your Stax Identity Broker. Allowed characters include a-z, 0-9 and hyphens (except start and end).
	Alias *string `json:"Alias,omitempty"`

	// AllowedDomains Allowed email domains for the Organisation, this limits who can be invited to your Team.
	AllowedDomains   *[]string   `json:"AllowedDomains"`
	AttachedPolicies *[]RoUuidv4 `json:"AttachedPolicies,omitempty"`

	// AwsAccountEmailTemplate AWS Accounts will be registered with email addresses fitting this pattern. Please ensure these email addresses are secured, as they can be used for Root Credential recovery.
	AwsAccountEmailTemplate *string `json:"AwsAccountEmailTemplate"`

	// AwsPartnerSupport AWS Partner Led Support - if you have partner led support then Stax Support will open AWS Support cases on your behalf.
	AwsPartnerSupport *bool `json:"AwsPartnerSupport,omitempty"`

	// AwsSupportType Default AWS Support level set on Accounts in your Organisation.
	AwsSupportType *OrganisationAwsSupportType `json:"AwsSupportType,omitempty"`

	// ComplianceType Compliance type for the Organisation.
	ComplianceType *OrganisationComplianceType `json:"ComplianceType"`
	CreatedBy      *NullableUuidv4             `json:"CreatedBy"`

	// CreatedTS Created timestamp.
	CreatedTS      *time.Time `json:"CreatedTS,omitempty"`
	CustomerId     *RoUuidv4  `json:"CustomerId,omitempty"`
	ExternalStaxId *RoUuidv4  `json:"ExternalStaxId,omitempty"`
	Id             *RoUuidv4  `json:"Id,omitempty"`

	// ModifiedTS Modified timestamp.
	ModifiedTS *time.Time `json:"ModifiedTS,omitempty"`

	// Name Name of the Organisation
	Name *string `json:"Name,omitempty"`

	// Region AWS Region
	Region          *AwsRegion `json:"Region,omitempty"`
	SpotlightSsoURL *string    `json:"SpotlightSsoURL,omitempty"`

	// Status Status of the Organisation.
	Status     *OrganisationStatus `json:"Status,omitempty"`
	UserTaskId *RoUuidv4           `json:"UserTaskId,omitempty"`
}

// OrganisationAwsSupportType Default AWS Support level set on Accounts in your Organisation.
type OrganisationAwsSupportType string

// OrganisationComplianceType Compliance type for the Organisation.
type OrganisationComplianceType string

// OrganisationStatus Status of the Organisation.
type OrganisationStatus string

// OrganisationalUnit defines model for OrganisationalUnit.
type OrganisationalUnit struct {
	AwsId     *string         `json:"AwsId"`
	CreatedBy *NullableUuidv4 `json:"CreatedBy"`

	// CreatedTS Created timestamp.
	CreatedTS *time.Time `json:"CreatedTS,omitempty"`

	// ExternalResource Boolean value to determine if the resource did not originate from Stax.
	ExternalResource *bool     `json:"ExternalResource,omitempty"`
	Id               *RoUuidv4 `json:"Id,omitempty"`

	// ModifiedTS Modified timestamp.
	ModifiedTS *time.Time `json:"ModifiedTS,omitempty"`

	// Name Name of the Organisational Unit.
	Name           string    `json:"Name"`
	OrganisationId *RoUuidv4 `json:"OrganisationId,omitempty"`

	// OrganisationalUnitType Type of the organisational unit.
	OrganisationalUnitType     *OrganisationalUnitOrganisationalUnitType `json:"OrganisationalUnitType,omitempty"`
	ParentOrganisationalUnitId *NullableUuidv4                           `json:"ParentOrganisationalUnitId"`

	// Status Status of the organisational unit.
	Status     *OrganisationalUnitStatus `json:"Status,omitempty"`
	Tags       *StaxTags                 `json:"Tags"`
	UserTaskId *NullableUuidv4           `json:"UserTaskId"`
}

// OrganisationalUnitOrganisationalUnitType Type of the organisational unit.
type OrganisationalUnitOrganisationalUnitType string

// OrganisationalUnitStatus Status of the organisational unit.
type OrganisationalUnitStatus string

// Pagination Pagination metadata. Present when limit and offset parameters are supplied.
type Pagination struct {
	// NextOffset Offset value to provide to retrieve the next set of items. Null when there are no more pages to fetch.
	NextOffset *float32 `json:"NextOffset"`

	// PrevOffset Offset value to provide to retrieve the previous set of items. Null when the first page is returned.
	PrevOffset *float32 `json:"PrevOffset"`

	// Total Total number of items in the full pagination set after filters are applied.
	Total float32 `json:"Total"`
}

// Parameter defines model for Parameter.
type Parameter map[string]interface{}

// Policy defines model for Policy.
type Policy struct {
	// AttachableTo Whether a policy is org only or account type only, or both
	AttachableTo PolicyAttachableTo `json:"AttachableTo"`
	CreatedBy    *NullableUuidv4    `json:"CreatedBy"`

	// CreatedTS Created timestamp.
	CreatedTS *time.Time `json:"CreatedTS,omitempty"`

	// Description Description of the Policy.
	Description *string   `json:"Description"`
	Id          *RoUuidv4 `json:"Id,omitempty"`

	// Mandatory Boolean value declaring if the policy is mandatory or not.
	Mandatory bool `json:"Mandatory"`

	// ModifiedTS Modified timestamp.
	ModifiedTS *time.Time `json:"ModifiedTS,omitempty"`

	// Name Name of the Policy.
	Name           string                 `json:"Name"`
	OrganisationId *RoUuidv4              `json:"OrganisationId,omitempty"`
	Policy         map[string]interface{} `json:"Policy"`

	// Public Boolean value declaring if the policy is public or private.
	Public bool `json:"Public"`

	// Status Status of the policy.
	Status *PolicyStatus `json:"Status,omitempty"`
}

// PolicyAttachableTo Whether a policy is org only or account type only, or both
type PolicyAttachableTo string

// PolicyStatus Status of the policy.
type PolicyStatus string

// PrefixList defines model for PrefixList.
type PrefixList struct {
	// AwsPrefixListId The AWS Id of the Prefix List.
	AwsPrefixListId *string `json:"AwsPrefixListId"`

	// AwsTargetId The AWS Id of either a VPN, VPC or Direct Connect Gateway to the target of the HUB Prefix List associations.
	AwsTargetId *string         `json:"AwsTargetId"`
	CreatedBy   *NullableUuidv4 `json:"CreatedBy"`

	// CreatedTS Created timestamp.
	CreatedTS *time.Time `json:"CreatedTS,omitempty"`

	// Entries The CIDR Ranges to include in the Prefix List.
	Entries []string  `json:"Entries"`
	Id      *RoUuidv4 `json:"Id,omitempty"`

	// MaxEntries The maximum number of CIDR entries that can exist in the Prefix List.
	MaxEntries int `json:"MaxEntries"`

	// ModifiedTS Modified timestamp.
	ModifiedTS *time.Time `json:"ModifiedTS,omitempty"`

	// Name Name of the Stax Prefix List.
	Name            string    `json:"Name"`
	NetworkingHubId *RoUuidv4 `json:"NetworkingHubId,omitempty"`

	// PrefixListType The type of Prefix List.
	PrefixListType PrefixListPrefixListType `json:"PrefixListType"`

	// RouteTableTypes The TGW Route Table types to associate a HUB Prefix List with.
	RouteTableTypes *[]PrefixListRouteTableTypes `json:"RouteTableTypes"`

	// Status The status of the Stax Prefix List.
	Status *PrefixListStatus `json:"Status,omitempty"`

	// SubnetTypes The subnet types to associate a VPC Prefix List with.
	SubnetTypes *[]PrefixListSubnetTypes `json:"SubnetTypes"`
	Tags        *NetworkingTags          `json:"Tags"`

	// TargetId The Stax Id of either a VPN, VPC or Direct Connect Gateway which will be the target of the HUB Prefix List.
	TargetId *string `json:"TargetId"`

	// TargetType The type of the target for the HUB Prefix List associations.
	TargetType *PrefixListTargetType `json:"TargetType"`
	UserTaskId *NullableUuidv4       `json:"UserTaskId"`

	// VpcIds The list of Stax VPC Ids to associate a VPC Prefix List with.
	VpcIds *[]Uuidv4 `json:"VpcIds"`

	// VpcTypes The VPC types to associate a VPC Prefix List with.
	VpcTypes *[]PrefixListVpcTypes `json:"VpcTypes"`

	// Zones The VPC Zones to associate a VPC or HUB Prefix List with.
	Zones *[]string `json:"Zones"`
}

// PrefixListPrefixListType The type of Prefix List.
type PrefixListPrefixListType string

// PrefixListRouteTableTypes defines model for PrefixList.RouteTableTypes.
type PrefixListRouteTableTypes string

// PrefixListStatus The status of the Stax Prefix List.
type PrefixListStatus string

// PrefixListSubnetTypes defines model for PrefixList.SubnetTypes.
type PrefixListSubnetTypes string

// PrefixListTargetType The type of the target for the HUB Prefix List associations.
type PrefixListTargetType string

// PrefixListVpcTypes defines model for PrefixList.VpcTypes.
type PrefixListVpcTypes string

// PrivateAssociation defines model for PrivateAssociation.
type PrivateAssociation struct {
	// Prefixes The CIDR Ranges to advertise to on-premises.
	Prefixes []string `json:"Prefixes"`
	VpcId    Uuidv4   `json:"VpcId"`
}

// Role Stax role assigned to user.
type Role string

// ScanTags defines model for ScanTags.
type ScanTags map[string]string

// SecurityHubConfiguration defines model for SecurityHubConfiguration.
type SecurityHubConfiguration struct {
	Standards struct {
		AWSFOUNDATIONALSECURITYBESTPRACTICES100 bool `json:"AWS_FOUNDATIONAL_SECURITY_BEST_PRACTICES_1_0_0"`

		// AWSREGIONS List of AWS Regions to enable security hub standards in.
		AWSREGIONS                    []AwsRegion `json:"AWS_REGIONS"`
		CISAWSFOUNDATIONSBENCHMARK120 bool        `json:"CIS_AWS_FOUNDATIONS_BENCHMARK_1_2_0"`
		CISAWSFOUNDATIONSBENCHMARK140 bool        `json:"CIS_AWS_FOUNDATIONS_BENCHMARK_1_4_0"`
		PCIDSS321                     bool        `json:"PCI_DSS_3_2_1"`
	} `json:"Standards"`
}

// ServiceConfiguration defines model for ServiceConfiguration.
type ServiceConfiguration struct {
	CreatedBy *NullableUuidv4 `json:"CreatedBy"`

	// CreatedTS Created timestamp.
	CreatedTS *time.Time `json:"CreatedTS,omitempty"`

	// Enabled Set to True if enabling an organisation service like guardduty.
	Enabled bool      `json:"Enabled"`
	Id      *RoUuidv4 `json:"Id,omitempty"`

	// ModifiedTS Modified timestamp.
	ModifiedTS     *time.Time `json:"ModifiedTS,omitempty"`
	OrganisationId *RoUuidv4  `json:"OrganisationId,omitempty"`

	// Service The service to configure
	Service *ServiceConfigurationService `json:"Service,omitempty"`

	// Status The status of the service configuration
	Status     *ServiceConfigurationStatus `json:"Status,omitempty"`
	UserTaskId *NullableUuidv4             `json:"UserTaskId"`
}

// ServiceConfigurationService The service to configure
type ServiceConfigurationService string

// ServiceConfigurationStatus The status of the service configuration
type ServiceConfigurationStatus string

// StaxEvent defines model for StaxEvent.
type StaxEvent = BaseEvent

// StaxTags defines model for StaxTags.
type StaxTags map[string]string

// Tags defines model for Tags.
type Tags map[string]string

// TaskEventDetail defines model for TaskEventDetail.
type TaskEventDetail = BaseEventDetail

// TraceEventDetail defines model for TraceEventDetail.
type TraceEventDetail = BaseEventDetail

// TransitAssociation defines model for TransitAssociation.
type TransitAssociation struct {
	NetworkingHubId Uuidv4 `json:"NetworkingHubId"`

	// Prefixes The CIDR Ranges to advertise to on-premises.
	Prefixes []string `json:"Prefixes"`
}

// TunnelMapping defines model for TunnelMapping.
type TunnelMapping struct {
	// TunnelName The name of VPN tunnel
	TunnelName *string `json:"TunnelName,omitempty"`

	// TunnelStatus The status of the VPN tunnel.
	TunnelStatus *TunnelMappingTunnelStatus `json:"TunnelStatus,omitempty"`
}

// TunnelMappingTunnelStatus The status of the VPN tunnel.
type TunnelMappingTunnelStatus string

// UpdateWorkloadDetail defines model for UpdateWorkloadDetail.
type UpdateWorkloadDetail struct {
	Message   *MessageEventDetail `json:"Message,omitempty"`
	Operation Operation           `json:"Operation"`

	// OperationStatus The status of an operation within Stax. This status is returned as part of the response for an asynchronous request and as the status of a Task. STARTED indicates that a request/Task has been received by Stax and is awaiting a worker. PENDING indicates that the Task has been picked up by a worker and is in queue. RUNNING indicates that the Task is active and being processed by a worker. SUCCEEDED indicates that the Task has completed successfully. FAILED indicates that the Task failed.
	OperationStatus OperationStatus `json:"OperationStatus"`
	Severity        string          `json:"Severity"`
	Workload        *WorkloadData   `json:"Workload,omitempty"`
}

// UpdateWorkloadEvent defines model for UpdateWorkloadEvent.
type UpdateWorkloadEvent = BaseEvent

// User defines model for User.
type User struct {
	AuthOrigin *string         `json:"AuthOrigin"`
	CreatedBy  *NullableUuidv4 `json:"CreatedBy"`

	// CreatedTS Created timestamp.
	CreatedTS  *time.Time `json:"CreatedTS,omitempty"`
	CustomerId *Uuidv4    `json:"CustomerId,omitempty"`

	// Email Email address of User.
	Email *openapi_types.Email `json:"Email,omitempty"`

	// FirstName Given Name of the User.
	FirstName *string   `json:"FirstName"`
	Id        *RoUuidv4 `json:"Id,omitempty"`

	// LastName Family Name of the User.
	LastName *string `json:"LastName"`

	// ModifiedTS Modified timestamp.
	ModifiedTS *time.Time `json:"ModifiedTS,omitempty"`

	// Name Concatenation of first and last name. Defaults to email address if neither are present.
	Name           string          `json:"Name"`
	OrganisationId *NullableUuidv4 `json:"OrganisationId"`

	// Role Stax role assigned to user.
	Role *Role `json:"Role,omitempty"`

	// Status Status of the User.
	Status     *UserStatus     `json:"Status,omitempty"`
	UserTaskId *NullableUuidv4 `json:"UserTaskId"`
}

// UserStatus Status of the User.
type UserStatus string

// UserGroupMemberMap defines model for UserGroupMemberMap.
type UserGroupMemberMap struct {
	GroupId Uuidv4 `json:"GroupId"`
	UserId  Uuidv4 `json:"UserId"`
}

// VPC defines model for VPC.
type VPC struct {
	AccountId Uuidv4 `json:"AccountId"`

	// AwsVpcId The AWS VPC ID.
	AwsVpcId *string `json:"AwsVpcId"`

	// Cidr CIDR Range in quad dot notation. This range is a private network range with a size between /8 to /23
	Cidr        *string `json:"Cidr,omitempty"`
	CidrRangeId *Uuidv4 `json:"CidrRangeId,omitempty"`

	// CreateFlowlogCwl Boolean value declaring to utilise a Cloudwatch log group for VPC Flow logs
	CreateFlowlogCwl *bool `json:"CreateFlowlogCwl,omitempty"`

	// CreateIgw Boolean value declaring if Internet Gateway is enabled
	CreateIgw *bool `json:"CreateIgw,omitempty"`

	// CreateNat Boolean value declaring if NAT Gateways is enabled
	CreateNat *bool `json:"CreateNat,omitempty"`

	// CreateVgw Boolean value declaring if a Virtual Private Gateway is enabled
	CreateVgw *bool           `json:"CreateVgw,omitempty"`
	CreatedBy *NullableUuidv4 `json:"CreatedBy"`

	// CreatedTS Created timestamp.
	CreatedTS *time.Time `json:"CreatedTS,omitempty"`

	// Description Longer description of what the Stax VPC is used for.
	Description      *string            `json:"Description"`
	GatewayEndpoints *[]GatewayEndpoint `json:"GatewayEndpoints,omitempty"`
	Id               *RoUuidv4          `json:"Id,omitempty"`

	// ModifiedTS Modified timestamp.
	ModifiedTS *time.Time `json:"ModifiedTS,omitempty"`

	// Name Name of Stax VPC
	Name            string  `json:"Name"`
	NetworkingHubId *Uuidv4 `json:"NetworkingHubId,omitempty"`

	// PhzId The Route53 Private Hosted Zone Id for the VPC
	PhzId *string `json:"PhzId"`

	// PhzPrefix The unique prefix to combine with the PhzSuffix to create a Route53 Private Hosted Zone for the VPC, cannot be modified once set
	PhzPrefix *string `json:"PhzPrefix"`

	// RedundantNat Boolean value declaring if redundant NAT Gateways will be created
	RedundantNat *bool `json:"RedundantNat,omitempty"`

	// Region AWS Region
	Region AwsRegion `json:"Region"`

	// Size Size of the VPC.
	Size *VPCSize `json:"Size,omitempty"`

	// Status The status of the Stax VPC.
	Status *VPCStatus      `json:"Status,omitempty"`
	Tags   *NetworkingTags `json:"Tags"`

	// Type Type of VPC. The Type determines what Route Tables are attached to the VPC
	Type       *VPCType        `json:"Type,omitempty"`
	UserTaskId *NullableUuidv4 `json:"UserTaskId"`

	// VgwAsn The ASN of the Virtual Private Gateway.
	VgwAsn *int `json:"VgwAsn"`

	// Zone All 'Flat' VPCs in the same Zone can communicate to each other.
	Zone *string `json:"Zone"`
}

// VPCSize Size of the VPC.
type VPCSize string

// VPCStatus The status of the Stax VPC.
type VPCStatus string

// VPCType Type of VPC. The Type determines what Route Tables are attached to the VPC
type VPCType string

// VifMap defines model for VifMap.
type VifMap struct {
	// Asn ASN to assign to the Direct Connect VIF.
	Asn int `json:"Asn"`

	// AwsConnectionId AWS Id of the Direct Connect Connection.
	AwsConnectionId string `json:"AwsConnectionId"`

	// AwsRouterIp The BGP peer IP configured on the AWS endpoint.
	AwsRouterIp string `json:"AwsRouterIp"`

	// BgpAuthKey The password that will be used to authenticate the BGP session.
	BgpAuthKey  string  `json:"BgpAuthKey"`
	DxGatewayId *Uuidv4 `json:"DxGatewayId,omitempty"`

	// JumboMtu Boolean value to enable Jumbo Frames.
	JumboMtu bool `json:"JumboMtu"`

	// Name Name of the Direct Connect VIF.
	Name string `json:"Name"`

	// RouterIp The BGP peer IP configured on your endpoint.
	RouterIp string          `json:"RouterIp"`
	Tags     *NetworkingTags `json:"Tags"`

	// Vlan VLAN for the Direct Connect VIF.
	Vlan int `json:"Vlan"`
}

// VpcConnection defines model for VpcConnection.
type VpcConnection struct {
	// Name Name of Stax VPN Connection.
	Name  string          `json:"Name"`
	Tags  *NetworkingTags `json:"Tags"`
	VpcId Uuidv4          `json:"VpcId"`
}

// VpnConnection defines model for VpnConnection.
type VpnConnection struct {
	// AwsVpnConnectionId The AWS Id of the VPN Connection.
	AwsVpnConnectionId *string         `json:"AwsVpnConnectionId"`
	CreatedBy          *NullableUuidv4 `json:"CreatedBy"`

	// CreatedTS Created timestamp.
	CreatedTS *time.Time `json:"CreatedTS,omitempty"`
	Id        *RoUuidv4  `json:"Id,omitempty"`

	// ImprovedAcceleration Boolean value to turn on AWS Global Accelerator and the AWS global network for improved performance
	ImprovedAcceleration *bool `json:"ImprovedAcceleration,omitempty"`

	// ModifiedTS Modified timestamp.
	ModifiedTS *time.Time `json:"ModifiedTS,omitempty"`

	// Name Name of the Customer Gateway.
	Name            string  `json:"Name"`
	NetworkingHubId *Uuidv4 `json:"NetworkingHubId,omitempty"`

	// Status The status of the Stax VPN Customer Gateway
	Status     *VpnConnectionStatus `json:"Status,omitempty"`
	Tags       *NetworkingTags      `json:"Tags"`
	UserTaskId *NullableUuidv4      `json:"UserTaskId"`
	VpcId      *NullableUuidv4      `json:"VpcId"`

	// VpnConnectionType The type of VPN Connection.
	VpnConnectionType    *VpnConnectionVpnConnectionType `json:"VpnConnectionType,omitempty"`
	VpnCustomerGatewayId Uuidv4                          `json:"VpnCustomerGatewayId"`
}

// VpnConnectionStatus The status of the Stax VPN Customer Gateway
type VpnConnectionStatus string

// VpnConnectionVpnConnectionType The type of VPN Connection.
type VpnConnectionVpnConnectionType string

// ConnectionStatus defines model for VpnConnectionStatus.
type ConnectionStatus = []TunnelMapping

// VpnCustomerGateway defines model for VpnCustomerGateway.
type VpnCustomerGateway struct {
	AccountId Uuidv4 `json:"AccountId"`

	// Asn ASN to assign to the Customer Gateway.
	Asn int `json:"Asn"`

	// AwsVpnCustomerGatewayId The AWS ID of the VPN Customer Gateway.
	AwsVpnCustomerGatewayId *string         `json:"AwsVpnCustomerGatewayId"`
	CreatedBy               *NullableUuidv4 `json:"CreatedBy"`

	// CreatedTS Created timestamp.
	CreatedTS *time.Time `json:"CreatedTS,omitempty"`
	Id        *RoUuidv4  `json:"Id,omitempty"`

	// IpAddress The IP address for the customer gateway's outside interface.
	IpAddress *string `json:"IpAddress,omitempty"`

	// ModifiedTS Modified timestamp.
	ModifiedTS *time.Time `json:"ModifiedTS,omitempty"`

	// Name Name of the Customer Gateway.
	Name           string    `json:"Name"`
	OrganisationId *RoUuidv4 `json:"OrganisationId,omitempty"`

	// Region AWS Region
	Region *AwsRegion `json:"Region,omitempty"`

	// Status The status of the Stax VPN Customer Gateway
	Status     *VpnCustomerGatewayStatus `json:"Status,omitempty"`
	Tags       *NetworkingTags           `json:"Tags"`
	UserTaskId *NullableUuidv4           `json:"UserTaskId"`
}

// VpnCustomerGatewayStatus The status of the Stax VPN Customer Gateway
type VpnCustomerGatewayStatus string

// Workload defines model for Workload.
type Workload struct {
	AccountId          Uuidv4          `json:"AccountId"`
	CatalogueId        Uuidv4          `json:"CatalogueId"`
	CatalogueVersionId *NullableUuidv4 `json:"CatalogueVersionId"`
	CreatedBy          *RoUuidv4       `json:"CreatedBy,omitempty"`

	// CreatedTS Created timestamp.
	CreatedTS *time.Time `json:"CreatedTS,omitempty"`
	Id        *RoUuidv4  `json:"Id,omitempty"`

	// ModifiedTS Modified timestamp.
	ModifiedTS *time.Time `json:"ModifiedTS,omitempty"`

	// Name The Workload name.
	Name           string     `json:"Name"`
	OrganisationId *Uuidv4    `json:"OrganisationId,omitempty"`
	Parameters     *Parameter `json:"Parameters"`

	// Protection Boolean value declaring if the Workload is protected from deletion
	Protection *bool `json:"Protection,omitempty"`

	// Region AWS Region the workload will be launched in
	Region string `json:"Region"`

	// Status Status of the Workload.
	Status     *WorkloadStatus `json:"Status,omitempty"`
	Tags       *Tags           `json:"Tags"`
	UserTaskId *RoUuidv4       `json:"UserTaskId,omitempty"`
}

// WorkloadStatus Status of the Workload.
type WorkloadStatus string

// WorkloadCatalogue defines model for WorkloadCatalogue.
type WorkloadCatalogue struct {
	CatalogueVersionId *NullableUuidv4 `json:"CatalogueVersionId"`
	CreatedBy          *RoUuidv4       `json:"CreatedBy,omitempty"`

	// CreatedTS Created timestamp.
	CreatedTS *time.Time `json:"CreatedTS,omitempty"`

	// Description Description of the Workload.
	Description *string   `json:"Description,omitempty"`
	Id          *RoUuidv4 `json:"Id,omitempty"`

	// ModifiedTS Modified timestamp.
	ModifiedTS *time.Time `json:"ModifiedTS,omitempty"`

	// Name Name of the Workload Catalogue Item to create.
	Name           string `json:"Name"`
	OrganisationId Uuidv4 `json:"OrganisationId"`

	// Protection Boolean value declaring if the Workload Catalogue Item is public or private.
	Protection *bool `json:"Protection,omitempty"`

	// Public Boolean value declaring if the Workload Catalogue Item is public or private.
	Public *bool `json:"Public,omitempty"`

	// Status Status of the Workload.
	Status     *CatalogueStatus            `json:"Status,omitempty"`
	UserTaskId *NullableUuidv4             `json:"UserTaskId"`
	Versions   *[]WorkloadCatalogueVersion `json:"Versions,omitempty"`
}

// WorkloadCatalogueVersion defines model for WorkloadCatalogueVersion.
type WorkloadCatalogueVersion struct {
	CatalogueId *RoUuidv4 `json:"CatalogueId,omitempty"`
	CreatedBy   *RoUuidv4 `json:"CreatedBy,omitempty"`

	// CreatedTS Created timestamp.
	CreatedTS *time.Time `json:"CreatedTS,omitempty"`

	// Description Description of the Workload.
	Description *string   `json:"Description,omitempty"`
	Id          *RoUuidv4 `json:"Id,omitempty"`

	// ManifestURL HTTPS/S3 URL of the manifest. Either this or ManifestBody must be provided.
	ManifestURL string `json:"ManifestURL"`

	// ModifiedTS Modified timestamp.
	ModifiedTS *time.Time   `json:"ModifiedTS,omitempty"`
	Outputs    *[]string    `json:"Outputs"`
	Parameters *[]Parameter `json:"Parameters,omitempty"`

	// Public Boolean value declaring if the Workload Catalogue Item is public or private.
	Public *bool `json:"Public,omitempty"`

	// Status Status of the Workload.
	Status          *WorkloadCatalogueVersionStatus `json:"Status,omitempty"`
	UserTaskId      *NullableUuidv4                 `json:"UserTaskId"`
	WorkloadVersion *string                         `json:"WorkloadVersion,omitempty"`
}

// WorkloadCatalogueVersionStatus Status of the Workload.
type WorkloadCatalogueVersionStatus string

// WorkloadData defines model for WorkloadData.
type WorkloadData struct {
	AccountId          *NullableUuidv4 `json:"AccountId"`
	CatalogueId        *Uuidv4         `json:"CatalogueId,omitempty"`
	CatalogueVersionId *NullableUuidv4 `json:"CatalogueVersionId"`
	CreatedBy          *RoUuidv4       `json:"CreatedBy,omitempty"`

	// Name The Workload name.
	Name           *string    `json:"Name"`
	Operation      *Operation `json:"Operation,omitempty"`
	OrgId          *Uuidv4    `json:"OrgId,omitempty"`
	OrganisationId *Uuidv4    `json:"OrganisationId,omitempty"`
	Parameters     *Parameter `json:"Parameters"`

	// Protection Boolean value declaring if the Workload Catalogue Item is public or private.
	Protection *bool `json:"Protection"`

	// Region AWS Region the workload will be launched in
	Region     *string `json:"Region"`
	Tags       *Tags   `json:"Tags"`
	TaskId     *Uuidv4 `json:"TaskId,omitempty"`
	TraceId    string  `json:"TraceId"`
	WorkloadId *Uuidv4 `json:"WorkloadId,omitempty"`
}

// AccountsCloseAccount defines model for accounts.CloseAccount.
type AccountsCloseAccount struct {
	Id Uuidv4 `json:"Id"`
}

// AccountsCloseAccountResponse defines model for accounts.CloseAccountResponse.
type AccountsCloseAccountResponse struct {
	CustomerId *RoUuidv4 `json:"CustomerId,omitempty"`
	Detail     struct {
		Message   *string   `json:"Message,omitempty"`
		Operation Operation `json:"Operation"`

		// OperationStatus The status of an operation within Stax. This status is returned as part of the response for an asynchronous request and as the status of a Task. STARTED indicates that a request/Task has been received by Stax and is awaiting a worker. PENDING indicates that the Task has been picked up by a worker and is in queue. RUNNING indicates that the Task is active and being processed by a worker. SUCCEEDED indicates that the Task has completed successfully. FAILED indicates that the Task failed.
		OperationStatus OperationStatus `json:"OperationStatus"`
		Severity        *string         `json:"Severity,omitempty"`
		TraceId         *string         `json:"TraceId,omitempty"`
	} `json:"Detail"`
	DetailType string    `json:"DetailType"`
	TaskId     *RoUuidv4 `json:"TaskId,omitempty"`
	TraceId    *string   `json:"TraceId,omitempty"`
}

// AccountsCreateAccount defines model for accounts.CreateAccount.
type AccountsCreateAccount struct {
	AccountType AccountsCreateAccount_AccountType `json:"AccountType"`

	// AwsAccountAlias The IAM alias for the account
	AwsAccountAlias *string `json:"AwsAccountAlias"`

	// Name Name of the Account.
	Name string    `json:"Name"`
	Tags *StaxTags `json:"Tags"`
}

// AccountsCreateAccountAccountType0 defines model for .
type AccountsCreateAccountAccountType0 = string

// AccountsCreateAccount_AccountType defines model for AccountsCreateAccount.AccountType.
type AccountsCreateAccount_AccountType struct {
	union json.RawMessage
}

// AccountsCreateAccountResponse defines model for accounts.CreateAccountResponse.
type AccountsCreateAccountResponse struct {
	CustomerId *RoUuidv4 `json:"CustomerId,omitempty"`
	Detail     struct {
		Account *struct {
			AccountType *AccountsCreateAccountResponse_Detail_Account_AccountType `json:"AccountType,omitempty"`

			// AwsAccountAlias The IAM alias for the account
			AwsAccountAlias *string    `json:"AwsAccountAlias"`
			Name            *string    `json:"Name,omitempty"`
			Operation       *Operation `json:"Operation,omitempty"`
			OrganisationId  *RoUuidv4  `json:"OrganisationId,omitempty"`
			Tags            *StaxTags  `json:"Tags"`
		} `json:"Account,omitempty"`
		Message   *string    `json:"Message,omitempty"`
		Operation *Operation `json:"Operation,omitempty"`

		// OperationStatus The status of an operation within Stax. This status is returned as part of the response for an asynchronous request and as the status of a Task. STARTED indicates that a request/Task has been received by Stax and is awaiting a worker. PENDING indicates that the Task has been picked up by a worker and is in queue. RUNNING indicates that the Task is active and being processed by a worker. SUCCEEDED indicates that the Task has completed successfully. FAILED indicates that the Task failed.
		OperationStatus *OperationStatus `json:"OperationStatus,omitempty"`
		Severity        *string          `json:"Severity,omitempty"`
		TraceId         *string          `json:"TraceId,omitempty"`
	} `json:"Detail"`
	DetailType string    `json:"DetailType"`
	TaskId     *RoUuidv4 `json:"TaskId,omitempty"`
	TraceId    *string   `json:"TraceId,omitempty"`
}

// AccountsCreateAccountResponseDetailAccountAccountType0 defines model for .
type AccountsCreateAccountResponseDetailAccountAccountType0 = string

// AccountsCreateAccountResponse_Detail_Account_AccountType defines model for AccountsCreateAccountResponse.Detail.Account.AccountType.
type AccountsCreateAccountResponse_Detail_Account_AccountType struct {
	union json.RawMessage
}

// AccountsCreateAccountType defines model for accounts.CreateAccountType.
type AccountsCreateAccountType struct {
	// Name Name of the Account Type.
	Name string `json:"Name"`
}

// AccountsCreateAccountTypeResponse defines model for accounts.CreateAccountTypeResponse.
type AccountsCreateAccountTypeResponse struct {
	Detail struct {
		AccountType AccountType `json:"AccountType"`
		Message     string      `json:"Message"`
		Operation   Operation   `json:"Operation"`

		// OperationStatus The status of an operation within Stax. This status is returned as part of the response for an asynchronous request and as the status of a Task. STARTED indicates that a request/Task has been received by Stax and is awaiting a worker. PENDING indicates that the Task has been picked up by a worker and is in queue. RUNNING indicates that the Task is active and being processed by a worker. SUCCEEDED indicates that the Task has completed successfully. FAILED indicates that the Task failed.
		OperationStatus OperationStatus `json:"OperationStatus"`
		Severity        string          `json:"Severity"`
	} `json:"Detail"`
	DetailType string `json:"DetailType"`
}

// AccountsDeleteAccountTypeResponse defines model for accounts.DeleteAccountTypeResponse.
type AccountsDeleteAccountTypeResponse struct {
	AccountTypes AccountType `json:"AccountTypes"`
}

// AccountsDiscoverAccountsResponse defines model for accounts.DiscoverAccountsResponse.
type AccountsDiscoverAccountsResponse struct {
	CustomerId *RoUuidv4         `json:"CustomerId,omitempty"`
	Detail     *TraceEventDetail `json:"Detail,omitempty"`
	DetailType string            `json:"DetailType"`
	TaskId     *RoUuidv4         `json:"TaskId,omitempty"`
	TraceId    string            `json:"TraceId"`
}

// AccountsOnboardAccount defines model for accounts.OnboardAccount.
type AccountsOnboardAccount struct {
	AccountType AccountsOnboardAccount_AccountType `json:"AccountType"`

	// AwsAccountId AWS Account Id.
	AwsAccountId string `json:"AwsAccountId"`

	// Name Name of the Account.
	Name *string   `json:"Name,omitempty"`
	Tags *StaxTags `json:"Tags"`
}

// AccountsOnboardAccountAccountType0 defines model for .
type AccountsOnboardAccountAccountType0 = string

// AccountsOnboardAccount_AccountType defines model for AccountsOnboardAccount.AccountType.
type AccountsOnboardAccount_AccountType struct {
	union json.RawMessage
}

// AccountsReadAccountTypes defines model for accounts.ReadAccountTypes.
type AccountsReadAccountTypes struct {
	AccountTypes []AccountType `json:"AccountTypes"`
}

// AccountsReadAccounts defines model for accounts.ReadAccounts.
type AccountsReadAccounts struct {
	Accounts []Account `json:"Accounts"`

	// Paging Pagination metadata. Present when limit and offset parameters are supplied.
	Paging *Pagination `json:"Paging,omitempty"`
}

// AccountsUpdateAccount defines model for accounts.UpdateAccount.
type AccountsUpdateAccount struct {
	AccountType *Uuidv4 `json:"AccountType,omitempty"`

	// AwsAccountAlias The IAM alias for the account
	AwsAccountAlias *string `json:"AwsAccountAlias"`

	// Name Name of the Account.
	Name *string   `json:"Name,omitempty"`
	Tags *StaxTags `json:"Tags"`
}

// AccountsUpdateAccountResponse defines model for accounts.UpdateAccountResponse.
type AccountsUpdateAccountResponse struct {
	CustomerId *RoUuidv4 `json:"CustomerId,omitempty"`
	Detail     struct {
		Account *struct {
			AccountId      *RoUuidv4  `json:"AccountId,omitempty"`
			AccountName    *string    `json:"AccountName,omitempty"`
			AccountType    *RoUuidv4  `json:"AccountType,omitempty"`
			Name           *string    `json:"Name,omitempty"`
			Operation      *Operation `json:"Operation,omitempty"`
			OrganisationId *RoUuidv4  `json:"OrganisationId,omitempty"`
			Tags           *StaxTags  `json:"Tags"`
		} `json:"Account,omitempty"`
		Message   *string    `json:"Message,omitempty"`
		Operation *Operation `json:"Operation,omitempty"`

		// OperationStatus The status of an operation within Stax. This status is returned as part of the response for an asynchronous request and as the status of a Task. STARTED indicates that a request/Task has been received by Stax and is awaiting a worker. PENDING indicates that the Task has been picked up by a worker and is in queue. RUNNING indicates that the Task is active and being processed by a worker. SUCCEEDED indicates that the Task has completed successfully. FAILED indicates that the Task failed.
		OperationStatus *OperationStatus `json:"OperationStatus,omitempty"`
		Severity        *string          `json:"Severity,omitempty"`
		TraceId         *string          `json:"TraceId,omitempty"`
	} `json:"Detail"`
	DetailType string    `json:"DetailType"`
	TaskId     *RoUuidv4 `json:"TaskId,omitempty"`
	TraceId    *string   `json:"TraceId,omitempty"`
}

// AccountsUpdateAccountType defines model for accounts.UpdateAccountType.
type AccountsUpdateAccountType struct {
	// Name Name of the Account Type.
	Name string `json:"Name"`
}

// AccountsUpdateAccountTypeAccess defines model for accounts.UpdateAccountTypeAccess.
type AccountsUpdateAccountTypeAccess struct {
	AddRoles    *[]AccountTypeAccessMap `json:"AddRoles,omitempty"`
	RemoveRoles *[]AccountTypeAccessMap `json:"RemoveRoles,omitempty"`
}

// AccountsUpdateAccountTypeAccessEvent defines model for accounts.UpdateAccountTypeAccessEvent.
type AccountsUpdateAccountTypeAccessEvent struct {
	Detail struct {
		Message   string    `json:"Message"`
		Operation Operation `json:"Operation"`

		// OperationStatus The status of an operation within Stax. This status is returned as part of the response for an asynchronous request and as the status of a Task. STARTED indicates that a request/Task has been received by Stax and is awaiting a worker. PENDING indicates that the Task has been picked up by a worker and is in queue. RUNNING indicates that the Task is active and being processed by a worker. SUCCEEDED indicates that the Task has completed successfully. FAILED indicates that the Task failed.
		OperationStatus OperationStatus `json:"OperationStatus"`
		Severity        string          `json:"Severity"`
		TaskId          *RoUuidv4       `json:"TaskId,omitempty"`
	} `json:"Detail"`
	DetailType string `json:"DetailType"`
}

// AccountsUpdateAccountTypeMembers defines model for accounts.UpdateAccountTypeMembers.
type AccountsUpdateAccountTypeMembers struct {
	Members []AccountTypeMemberMap `json:"Members"`
}

// AccountsUpdateAccountTypeMembersEvent defines model for accounts.UpdateAccountTypeMembersEvent.
type AccountsUpdateAccountTypeMembersEvent struct {
	Detail struct {
		Message   string    `json:"Message"`
		Operation Operation `json:"Operation"`

		// OperationStatus The status of an operation within Stax. This status is returned as part of the response for an asynchronous request and as the status of a Task. STARTED indicates that a request/Task has been received by Stax and is awaiting a worker. PENDING indicates that the Task has been picked up by a worker and is in queue. RUNNING indicates that the Task is active and being processed by a worker. SUCCEEDED indicates that the Task has completed successfully. FAILED indicates that the Task failed.
		OperationStatus OperationStatus `json:"OperationStatus"`
		Severity        string          `json:"Severity"`
		TaskId          *NullableUuidv4 `json:"TaskId"`
	} `json:"Detail"`
	DetailType string `json:"DetailType"`
}

// AccountsUpdateAccountTypePolicies defines model for accounts.UpdateAccountTypePolicies.
type AccountsUpdateAccountTypePolicies struct {
	AddPolicies    *[]AccountTypePolicyMap `json:"AddPolicies,omitempty"`
	RemovePolicies *[]AccountTypePolicyMap `json:"RemovePolicies,omitempty"`
}

// AccountsUpdateAccountTypePoliciesEvent defines model for accounts.UpdateAccountTypePoliciesEvent.
type AccountsUpdateAccountTypePoliciesEvent struct {
	Detail struct {
		Message   string    `json:"Message"`
		Operation Operation `json:"Operation"`

		// OperationStatus The status of an operation within Stax. This status is returned as part of the response for an asynchronous request and as the status of a Task. STARTED indicates that a request/Task has been received by Stax and is awaiting a worker. PENDING indicates that the Task has been picked up by a worker and is in queue. RUNNING indicates that the Task is active and being processed by a worker. SUCCEEDED indicates that the Task has completed successfully. FAILED indicates that the Task failed.
		OperationStatus OperationStatus `json:"OperationStatus"`
		Severity        string          `json:"Severity"`
		TaskId          *RoUuidv4       `json:"TaskId,omitempty"`
	} `json:"Detail"`
	DetailType string `json:"DetailType"`
}

// AccountsUpdateAccountTypeResponse defines model for accounts.UpdateAccountTypeResponse.
type AccountsUpdateAccountTypeResponse struct {
	AccountTypes AccountType `json:"AccountTypes"`
}

// GatewayEndpoint A list of gateway vpc endpoints
type GatewayEndpoint string

// InterfaceEndpoint A list of interface vpc endpoints
type InterfaceEndpoint string

// NetworkingCreateCidrExclusion defines model for networking.CreateCidrExclusion.
type NetworkingCreateCidrExclusion struct {
	// Cidr CIDR Range in quad dot notation.
	Cidr string `json:"Cidr"`

	// Description Longer description of what the CIDR Exclusion is used for.
	Description *string `json:"Description,omitempty"`

	// Name Name of the CIDR Exclusion.
	Name string          `json:"Name"`
	Tags *NetworkingTags `json:"Tags"`
}

// NetworkingCreateCidrRange defines model for networking.CreateCidrRange.
type NetworkingCreateCidrRange struct {
	// Cidr CIDR Range in quad dot notation. This range is a private network range with a size between /8 to /23
	Cidr string `json:"Cidr"`

	// Description Longer description of what the CIDR Range is used for.
	Description *string `json:"Description,omitempty"`

	// Name Name of the CIDR Range.
	Name string          `json:"Name"`
	Tags *NetworkingTags `json:"Tags"`
}

// NetworkingCreateDnsResolver defines model for networking.CreateDnsResolver.
type NetworkingCreateDnsResolver struct {
	// Name Name of Stax DNS Resolver.
	Name string `json:"Name"`

	// NumberOfInterfaces The number of ENIs to attach to the Stax DNS Resolvers.
	NumberOfInterfaces int             `json:"NumberOfInterfaces"`
	Tags               *NetworkingTags `json:"Tags"`
}

// NetworkingCreateDnsResolverEvent defines model for networking.CreateDnsResolverEvent.
type NetworkingCreateDnsResolverEvent struct {
	Detail struct {
		DnsResolver struct {
			Id *RoUuidv4 `json:"Id,omitempty"`
		} `json:"DnsResolver"`
		Message   *MessageEventDetail `json:"Message,omitempty"`
		Operation Operation           `json:"Operation"`

		// OperationStatus The status of an operation within Stax. This status is returned as part of the response for an asynchronous request and as the status of a Task. STARTED indicates that a request/Task has been received by Stax and is awaiting a worker. PENDING indicates that the Task has been picked up by a worker and is in queue. RUNNING indicates that the Task is active and being processed by a worker. SUCCEEDED indicates that the Task has completed successfully. FAILED indicates that the Task failed.
		OperationStatus OperationStatus `json:"OperationStatus"`
		Severity        *string         `json:"Severity,omitempty"`
		TraceId         *string         `json:"TraceId,omitempty"`
	} `json:"Detail"`
	DetailType string `json:"DetailType"`
}

// NetworkingCreateDnsRule defines model for networking.CreateDnsRule.
type NetworkingCreateDnsRule struct {
	// DomainName Domain name to forward DNS queries for.
	DomainName string `json:"DomainName"`

	// ForwarderIpAddresses The IP Addresses to forward DNS queries to.
	ForwarderIpAddresses []string `json:"ForwarderIpAddresses"`

	// Name Name of Stax DNS Rule.
	Name string          `json:"Name"`
	Tags *NetworkingTags `json:"Tags"`
}

// NetworkingCreateDnsRuleEvent defines model for networking.CreateDnsRuleEvent.
type NetworkingCreateDnsRuleEvent struct {
	Detail struct {
		DnsRule struct {
			Id *RoUuidv4 `json:"Id,omitempty"`
		} `json:"DnsRule"`
		Message   *MessageEventDetail `json:"Message,omitempty"`
		Operation Operation           `json:"Operation"`

		// OperationStatus The status of an operation within Stax. This status is returned as part of the response for an asynchronous request and as the status of a Task. STARTED indicates that a request/Task has been received by Stax and is awaiting a worker. PENDING indicates that the Task has been picked up by a worker and is in queue. RUNNING indicates that the Task is active and being processed by a worker. SUCCEEDED indicates that the Task has completed successfully. FAILED indicates that the Task failed.
		OperationStatus OperationStatus `json:"OperationStatus"`
		Severity        *string         `json:"Severity,omitempty"`
		TraceId         *string         `json:"TraceId,omitempty"`
	} `json:"Detail"`
	DetailType string `json:"DetailType"`
}

// NetworkingCreateDxAssociation defines model for networking.CreateDxAssociation.
type NetworkingCreateDxAssociation struct {
	union json.RawMessage
}

// NetworkingCreateDxAssociationEvent defines model for networking.CreateDxAssociationEvent.
type NetworkingCreateDxAssociationEvent struct {
	Detail struct {
		DxAssociation struct {
			Id *RoUuidv4 `json:"Id,omitempty"`
		} `json:"DxAssociation"`
		Message   *MessageEventDetail `json:"Message,omitempty"`
		Operation Operation           `json:"Operation"`

		// OperationStatus The status of an operation within Stax. This status is returned as part of the response for an asynchronous request and as the status of a Task. STARTED indicates that a request/Task has been received by Stax and is awaiting a worker. PENDING indicates that the Task has been picked up by a worker and is in queue. RUNNING indicates that the Task is active and being processed by a worker. SUCCEEDED indicates that the Task has completed successfully. FAILED indicates that the Task failed.
		OperationStatus OperationStatus `json:"OperationStatus"`
		Severity        *string         `json:"Severity,omitempty"`
		TraceId         *string         `json:"TraceId,omitempty"`
	} `json:"Detail"`
	DetailType string `json:"DetailType"`
}

// NetworkingCreateDxResource defines model for networking.CreateDxResource.
type NetworkingCreateDxResource struct {
	Gateway *GatewayMap `json:"Gateway,omitempty"`
	Vif     *VifMap     `json:"Vif,omitempty"`
}

// NetworkingCreateDxResourceEvent defines model for networking.CreateDxResourceEvent.
type NetworkingCreateDxResourceEvent struct {
	Detail struct {
		DxResource struct {
			Gateway *struct {
				Id *RoUuidv4 `json:"Id,omitempty"`
			} `json:"Gateway,omitempty"`
			Vif *struct {
				Id *RoUuidv4 `json:"Id,omitempty"`
			} `json:"Vif,omitempty"`
		} `json:"DxResource"`
		Message   *MessageEventDetail `json:"Message,omitempty"`
		Operation Operation           `json:"Operation"`

		// OperationStatus The status of an operation within Stax. This status is returned as part of the response for an asynchronous request and as the status of a Task. STARTED indicates that a request/Task has been received by Stax and is awaiting a worker. PENDING indicates that the Task has been picked up by a worker and is in queue. RUNNING indicates that the Task is active and being processed by a worker. SUCCEEDED indicates that the Task has completed successfully. FAILED indicates that the Task failed.
		OperationStatus OperationStatus `json:"OperationStatus"`
		Severity        *string         `json:"Severity,omitempty"`
		TraceId         *string         `json:"TraceId,omitempty"`
	} `json:"Detail"`
	DetailType string `json:"DetailType"`
}

// NetworkingCreateHub defines model for networking.CreateHub.
type NetworkingCreateHub struct {
	AccountId Uuidv4 `json:"AccountId"`

	// AmazonSideAsn A private Autonomous System Number (ASN) for the Amazon side of a BGP session
	AmazonSideAsn *int `json:"AmazonSideAsn,omitempty"`

	// Cidr CIDR Range in quad dot notation. This range is a private network range with a size between /8 to /22 for the Transit VPC
	Cidr           string           `json:"Cidr"`
	CidrExclusions *[]CidrExclusion `json:"CidrExclusions,omitempty"`

	// CidrRangeName Name of the CIDR Range where the Transit VPC lives.
	CidrRangeName *string `json:"CidrRangeName,omitempty"`

	// CreateCloudwatchVpcFlowlogs Boolean value declaring to utilise a Cloudwatch log group for VPC Flow logs
	CreateCloudwatchVpcFlowlogs *bool `json:"CreateCloudwatchVpcFlowlogs,omitempty"`

	// CreateInternetGateway Boolean value declaring to create an Internet Gateway
	CreateInternetGateway bool `json:"CreateInternetGateway"`

	// CreateNatGateway Boolean value declaring to create a NAT Gateway
	CreateNatGateway bool `json:"CreateNatGateway"`

	// CreateVirtualPrivateGateway Boolean value declaring to create a Virtual Private Gateway
	CreateVirtualPrivateGateway *bool `json:"CreateVirtualPrivateGateway,omitempty"`

	// Description Longer description of what the Stax Networking Hub is used for.
	Description        *string              `json:"Description,omitempty"`
	GatewayEndpoints   *[]GatewayEndpoint   `json:"GatewayEndpoints,omitempty"`
	InterfaceEndpoints *[]InterfaceEndpoint `json:"InterfaceEndpoints,omitempty"`

	// Name Name of Stax Networking Hub.
	Name string `json:"Name"`

	// PhzSuffix The suffix used to create Route53 Private Hosted Zones names within the Networking Hub, cannot be modified once set
	PhzSuffix *string `json:"PhzSuffix,omitempty"`

	// RedundantEndpoints Boolean value declaring if redundant Interface VPC Endpoints will be created
	RedundantEndpoints *bool `json:"RedundantEndpoints,omitempty"`

	// RedundantNat Boolean value declaring to create redundant NAT Gateways
	RedundantNat *bool `json:"RedundantNat,omitempty"`

	// Region AWS Region
	Region AwsRegion       `json:"Region"`
	Tags   *NetworkingTags `json:"Tags"`

	// VirtualPrivateGatewayAsn ASN to assign to the Virtual Private Gateway
	VirtualPrivateGatewayAsn *int `json:"VirtualPrivateGatewayAsn,omitempty"`

	// VpnEcmpSupport Boolean value declaring to enable or disable Equal Cost Multipath Protocol support
	VpnEcmpSupport *bool `json:"VpnEcmpSupport,omitempty"`
}

// NetworkingCreateHubEvent defines model for networking.CreateHubEvent.
type NetworkingCreateHubEvent struct {
	Detail struct {
		Message       *MessageEventDetail `json:"Message,omitempty"`
		NetworkingHub struct {
			Id *RoUuidv4 `json:"Id,omitempty"`
		} `json:"NetworkingHub"`
		Operation Operation `json:"Operation"`

		// OperationStatus The status of an operation within Stax. This status is returned as part of the response for an asynchronous request and as the status of a Task. STARTED indicates that a request/Task has been received by Stax and is awaiting a worker. PENDING indicates that the Task has been picked up by a worker and is in queue. RUNNING indicates that the Task is active and being processed by a worker. SUCCEEDED indicates that the Task has completed successfully. FAILED indicates that the Task failed.
		OperationStatus OperationStatus `json:"OperationStatus"`
		Severity        *string         `json:"Severity,omitempty"`
		TraceId         *string         `json:"TraceId,omitempty"`
	} `json:"Detail"`
	DetailType string `json:"DetailType"`
}

// NetworkingCreateHubPeering defines model for networking.CreateHubPeering.
type NetworkingCreateHubPeering struct {
	// DestinationAwsAccountId The AWS Account Id that contains the Destination TGW.
	DestinationAwsAccountId *string `json:"DestinationAwsAccountId"`

	// DestinationAwsRegion AWS Region
	DestinationAwsRegion *NullableAwsRegion `json:"DestinationAwsRegion"`

	// DestinationAwsTgwId The AWS Id of the Destination TGW.
	DestinationAwsTgwId        *string         `json:"DestinationAwsTgwId"`
	DestinationNetworkingHubId *NullableUuidv4 `json:"DestinationNetworkingHubId"`

	// HubPeeringTarget The target type to determine the actions against the destination.
	HubPeeringTarget *NetworkingCreateHubPeeringHubPeeringTarget `json:"HubPeeringTarget,omitempty"`

	// Name The Name of the Hub Peering.
	Name string          `json:"Name"`
	Tags *NetworkingTags `json:"Tags"`
}

// NetworkingCreateHubPeeringHubPeeringTarget The target type to determine the actions against the destination.
type NetworkingCreateHubPeeringHubPeeringTarget string

// NetworkingCreateHubPeeringEvent defines model for networking.CreateHubPeeringEvent.
type NetworkingCreateHubPeeringEvent struct {
	Detail struct {
		HubPeering struct {
			Id *RoUuidv4 `json:"Id,omitempty"`
		} `json:"HubPeering"`
		Message   *MessageEventDetail `json:"Message,omitempty"`
		Operation Operation           `json:"Operation"`

		// OperationStatus The status of an operation within Stax. This status is returned as part of the response for an asynchronous request and as the status of a Task. STARTED indicates that a request/Task has been received by Stax and is awaiting a worker. PENDING indicates that the Task has been picked up by a worker and is in queue. RUNNING indicates that the Task is active and being processed by a worker. SUCCEEDED indicates that the Task has completed successfully. FAILED indicates that the Task failed.
		OperationStatus OperationStatus `json:"OperationStatus"`
		Severity        *string         `json:"Severity,omitempty"`
		TraceId         *string         `json:"TraceId,omitempty"`
	} `json:"Detail"`
	DetailType string `json:"DetailType"`
}

// NetworkingCreateHubPrefixList defines model for networking.CreateHubPrefixList.
type NetworkingCreateHubPrefixList struct {
	// Entries The CIDR Ranges to include in the Prefix List.
	Entries []string `json:"Entries"`

	// MaxEntries The maximum number of CIDR entries that can exist in the Prefix List.
	MaxEntries int `json:"MaxEntries"`

	// Name Name of the Stax Prefix List.
	Name string `json:"Name"`

	// RouteTableTypes The TGW Route Table types to associate a HUB Prefix List with.
	RouteTableTypes *[]NetworkingCreateHubPrefixListRouteTableTypes `json:"RouteTableTypes,omitempty"`
	Tags            *NetworkingTags                                 `json:"Tags"`

	// TargetId The Stax Id of either a VPN, VPC or Direct Connect Gateway which will be the target of the HUB Prefix List.
	TargetId *string `json:"TargetId,omitempty"`

	// TargetType The type of the target for the HUB Prefix List associations.
	TargetType NetworkingCreateHubPrefixListTargetType `json:"TargetType"`

	// Zones The VPC Zones to associate a HUB Prefix List with.
	Zones *[]string `json:"Zones,omitempty"`
}

// NetworkingCreateHubPrefixListRouteTableTypes defines model for NetworkingCreateHubPrefixList.RouteTableTypes.
type NetworkingCreateHubPrefixListRouteTableTypes string

// NetworkingCreateHubPrefixListTargetType The type of the target for the HUB Prefix List associations.
type NetworkingCreateHubPrefixListTargetType string

// NetworkingCreatePrefixListEvent defines model for networking.CreatePrefixListEvent.
type NetworkingCreatePrefixListEvent struct {
	Detail struct {
		Message   *MessageEventDetail `json:"Message,omitempty"`
		Operation Operation           `json:"Operation"`

		// OperationStatus The status of an operation within Stax. This status is returned as part of the response for an asynchronous request and as the status of a Task. STARTED indicates that a request/Task has been received by Stax and is awaiting a worker. PENDING indicates that the Task has been picked up by a worker and is in queue. RUNNING indicates that the Task is active and being processed by a worker. SUCCEEDED indicates that the Task has completed successfully. FAILED indicates that the Task failed.
		OperationStatus OperationStatus `json:"OperationStatus"`
		PrefixList      struct {
			Id *RoUuidv4 `json:"Id,omitempty"`
		} `json:"PrefixList"`
		Severity *string `json:"Severity,omitempty"`
		TraceId  *string `json:"TraceId,omitempty"`
	} `json:"Detail"`
	DetailType string `json:"DetailType"`
}

// NetworkingCreateVpc defines model for networking.CreateVpc.
type NetworkingCreateVpc struct {
	AccountId   Uuidv4 `json:"AccountId"`
	CidrRangeId Uuidv4 `json:"CidrRangeId"`

	// CreateCloudwatchVpcFlowlogs Boolean value declaring to utilise a Cloudwatch log group for VPC Flow logs
	CreateCloudwatchVpcFlowlogs *bool `json:"CreateCloudwatchVpcFlowlogs,omitempty"`

	// CreateInternetGateway Boolean value declaring to create an Internet Gateway
	CreateInternetGateway bool `json:"CreateInternetGateway"`

	// CreateVirtualPrivateGateway Boolean value declaring to create a Virtual Private Gateway
	CreateVirtualPrivateGateway *bool `json:"CreateVirtualPrivateGateway,omitempty"`

	// Description Longer description of what the Stax VPC is used for.
	Description      *string            `json:"Description,omitempty"`
	GatewayEndpoints *[]GatewayEndpoint `json:"GatewayEndpoints,omitempty"`

	// Name Name of Stax VPC
	Name string `json:"Name"`

	// PhzPrefix The unique prefix to combine with the PhzSuffix to create a Route53 Private Hosted Zone for the VPC, cannot be modified once set
	PhzPrefix *string `json:"PhzPrefix,omitempty"`

	// Region AWS Region
	Region AwsRegion `json:"Region"`

	// Size Size of the VPC.
	Size NetworkingCreateVpcSize `json:"Size"`
	Tags *NetworkingTags         `json:"Tags"`

	// Type Type of VPC. The Type determines what Route Tables are attached to the VPC
	Type NetworkingCreateVpcType `json:"Type"`

	// VirtualPrivateGatewayAsn ASN to assign to the Virtual Private Gateway
	VirtualPrivateGatewayAsn *int `json:"VirtualPrivateGatewayAsn,omitempty"`

	// Zone All 'Flat' VPCs in the same Zone can communicate to each other.
	Zone *string `json:"Zone"`
}

// NetworkingCreateVpcSize Size of the VPC.
type NetworkingCreateVpcSize string

// NetworkingCreateVpcType Type of VPC. The Type determines what Route Tables are attached to the VPC
type NetworkingCreateVpcType string

// NetworkingCreateVpcEvent defines model for networking.CreateVpcEvent.
type NetworkingCreateVpcEvent struct {
	Detail struct {
		Message   *MessageEventDetail `json:"Message,omitempty"`
		Operation Operation           `json:"Operation"`

		// OperationStatus The status of an operation within Stax. This status is returned as part of the response for an asynchronous request and as the status of a Task. STARTED indicates that a request/Task has been received by Stax and is awaiting a worker. PENDING indicates that the Task has been picked up by a worker and is in queue. RUNNING indicates that the Task is active and being processed by a worker. SUCCEEDED indicates that the Task has completed successfully. FAILED indicates that the Task failed.
		OperationStatus OperationStatus `json:"OperationStatus"`
		Severity        *string         `json:"Severity,omitempty"`
		TraceId         *string         `json:"TraceId,omitempty"`
		VPC             struct {
			Id *RoUuidv4 `json:"Id,omitempty"`
		} `json:"VPC"`
	} `json:"Detail"`
	DetailType string `json:"DetailType"`
}

// NetworkingCreateVpcPrefixList defines model for networking.CreateVpcPrefixList.
type NetworkingCreateVpcPrefixList struct {
	// Entries The CIDR Ranges to include in the Prefix List.
	Entries []string `json:"Entries"`

	// MaxEntries The maximum number of CIDR entries that can exist in the Prefix List.
	MaxEntries int `json:"MaxEntries"`

	// Name Name of the Stax Prefix List.
	Name string `json:"Name"`

	// SubnetTypes The subnet types to associate a VPC Prefix List with.
	SubnetTypes *[]NetworkingCreateVpcPrefixListSubnetTypes `json:"SubnetTypes,omitempty"`
	Tags        *NetworkingTags                             `json:"Tags"`

	// VpcIds The list of Stax VPC Ids to associate a VPC Prefix List with.
	VpcIds *[]Uuidv4 `json:"VpcIds,omitempty"`

	// VpcTypes The VPC types to associate a VPC Prefix List with.
	VpcTypes *[]NetworkingCreateVpcPrefixListVpcTypes `json:"VpcTypes,omitempty"`

	// Zones The VPC Zones to associate a VPC Prefix List with.
	Zones *[]string `json:"Zones,omitempty"`
}

// NetworkingCreateVpcPrefixListSubnetTypes defines model for NetworkingCreateVpcPrefixList.SubnetTypes.
type NetworkingCreateVpcPrefixListSubnetTypes string

// NetworkingCreateVpcPrefixListVpcTypes defines model for NetworkingCreateVpcPrefixList.VpcTypes.
type NetworkingCreateVpcPrefixListVpcTypes string

// NetworkingCreateVpnConnection defines model for networking.CreateVpnConnection.
type NetworkingCreateVpnConnection struct {
	union json.RawMessage
}

// NetworkingCreateVpnConnectionEvent defines model for networking.CreateVpnConnectionEvent.
type NetworkingCreateVpnConnectionEvent struct {
	Detail struct {
		Message   *MessageEventDetail `json:"Message,omitempty"`
		Operation Operation           `json:"Operation"`

		// OperationStatus The status of an operation within Stax. This status is returned as part of the response for an asynchronous request and as the status of a Task. STARTED indicates that a request/Task has been received by Stax and is awaiting a worker. PENDING indicates that the Task has been picked up by a worker and is in queue. RUNNING indicates that the Task is active and being processed by a worker. SUCCEEDED indicates that the Task has completed successfully. FAILED indicates that the Task failed.
		OperationStatus OperationStatus `json:"OperationStatus"`
		Severity        *string         `json:"Severity,omitempty"`
		TraceId         *string         `json:"TraceId,omitempty"`
		VpnConnection   struct {
			Id *RoUuidv4 `json:"Id,omitempty"`
		} `json:"VpnConnection"`
	} `json:"Detail"`
	DetailType string `json:"DetailType"`
}

// NetworkingCreateVpnCustomerGateway defines model for networking.CreateVpnCustomerGateway.
type NetworkingCreateVpnCustomerGateway struct {
	AccountId Uuidv4 `json:"AccountId"`

	// Asn ASN to assign to the VPN Customer Gateway.
	Asn int `json:"Asn"`

	// IpAddress The Internet-routable IP address for the customer gateway's outside interface. The address must be static.
	IpAddress string `json:"IpAddress"`

	// Name Name of Stax VPN Customer Gateway.
	Name string `json:"Name"`

	// Region AWS Region
	Region AwsRegion       `json:"Region"`
	Tags   *NetworkingTags `json:"Tags"`
}

// NetworkingCreateVpnCustomerGatewayEvent defines model for networking.CreateVpnCustomerGatewayEvent.
type NetworkingCreateVpnCustomerGatewayEvent struct {
	Detail struct {
		Message   *MessageEventDetail `json:"Message,omitempty"`
		Operation Operation           `json:"Operation"`

		// OperationStatus The status of an operation within Stax. This status is returned as part of the response for an asynchronous request and as the status of a Task. STARTED indicates that a request/Task has been received by Stax and is awaiting a worker. PENDING indicates that the Task has been picked up by a worker and is in queue. RUNNING indicates that the Task is active and being processed by a worker. SUCCEEDED indicates that the Task has completed successfully. FAILED indicates that the Task failed.
		OperationStatus    OperationStatus `json:"OperationStatus"`
		Severity           *string         `json:"Severity,omitempty"`
		TraceId            *string         `json:"TraceId,omitempty"`
		VpnCustomerGateway struct {
			Id *RoUuidv4 `json:"Id,omitempty"`
		} `json:"VpnCustomerGateway"`
	} `json:"Detail"`
	DetailType string `json:"DetailType"`
}

// NetworkingDeleteDnsResolverEvent defines model for networking.DeleteDnsResolverEvent.
type NetworkingDeleteDnsResolverEvent struct {
	Detail struct {
		Message   *MessageEventDetail `json:"Message,omitempty"`
		Operation Operation           `json:"Operation"`

		// OperationStatus The status of an operation within Stax. This status is returned as part of the response for an asynchronous request and as the status of a Task. STARTED indicates that a request/Task has been received by Stax and is awaiting a worker. PENDING indicates that the Task has been picked up by a worker and is in queue. RUNNING indicates that the Task is active and being processed by a worker. SUCCEEDED indicates that the Task has completed successfully. FAILED indicates that the Task failed.
		OperationStatus OperationStatus `json:"OperationStatus"`
		Severity        *string         `json:"Severity,omitempty"`
		TraceId         *string         `json:"TraceId,omitempty"`
	} `json:"Detail"`
	DetailType string `json:"DetailType"`
}

// NetworkingDeleteDnsRuleEvent defines model for networking.DeleteDnsRuleEvent.
type NetworkingDeleteDnsRuleEvent struct {
	Detail struct {
		Message   *MessageEventDetail `json:"Message,omitempty"`
		Operation Operation           `json:"Operation"`

		// OperationStatus The status of an operation within Stax. This status is returned as part of the response for an asynchronous request and as the status of a Task. STARTED indicates that a request/Task has been received by Stax and is awaiting a worker. PENDING indicates that the Task has been picked up by a worker and is in queue. RUNNING indicates that the Task is active and being processed by a worker. SUCCEEDED indicates that the Task has completed successfully. FAILED indicates that the Task failed.
		OperationStatus OperationStatus `json:"OperationStatus"`
		Severity        *string         `json:"Severity,omitempty"`
		TraceId         *string         `json:"TraceId,omitempty"`
	} `json:"Detail"`
	DetailType string `json:"DetailType"`
}

// NetworkingDeleteDxAssociationEvent defines model for networking.DeleteDxAssociationEvent.
type NetworkingDeleteDxAssociationEvent struct {
	Detail struct {
		Message   *MessageEventDetail `json:"Message,omitempty"`
		Operation Operation           `json:"Operation"`

		// OperationStatus The status of an operation within Stax. This status is returned as part of the response for an asynchronous request and as the status of a Task. STARTED indicates that a request/Task has been received by Stax and is awaiting a worker. PENDING indicates that the Task has been picked up by a worker and is in queue. RUNNING indicates that the Task is active and being processed by a worker. SUCCEEDED indicates that the Task has completed successfully. FAILED indicates that the Task failed.
		OperationStatus OperationStatus `json:"OperationStatus"`
		Severity        *string         `json:"Severity,omitempty"`
		TraceId         *string         `json:"TraceId,omitempty"`
	} `json:"Detail"`
	DetailType string `json:"DetailType"`
}

// NetworkingDeleteDxGatewayEvent defines model for networking.DeleteDxGatewayEvent.
type NetworkingDeleteDxGatewayEvent struct {
	Detail struct {
		Message   *MessageEventDetail `json:"Message,omitempty"`
		Operation Operation           `json:"Operation"`

		// OperationStatus The status of an operation within Stax. This status is returned as part of the response for an asynchronous request and as the status of a Task. STARTED indicates that a request/Task has been received by Stax and is awaiting a worker. PENDING indicates that the Task has been picked up by a worker and is in queue. RUNNING indicates that the Task is active and being processed by a worker. SUCCEEDED indicates that the Task has completed successfully. FAILED indicates that the Task failed.
		OperationStatus OperationStatus `json:"OperationStatus"`
		Severity        *string         `json:"Severity,omitempty"`
		TraceId         *string         `json:"TraceId,omitempty"`
	} `json:"Detail"`
	DetailType string `json:"DetailType"`
}

// NetworkingDeleteDxVifEvent defines model for networking.DeleteDxVifEvent.
type NetworkingDeleteDxVifEvent struct {
	Detail struct {
		Message   *MessageEventDetail `json:"Message,omitempty"`
		Operation Operation           `json:"Operation"`

		// OperationStatus The status of an operation within Stax. This status is returned as part of the response for an asynchronous request and as the status of a Task. STARTED indicates that a request/Task has been received by Stax and is awaiting a worker. PENDING indicates that the Task has been picked up by a worker and is in queue. RUNNING indicates that the Task is active and being processed by a worker. SUCCEEDED indicates that the Task has completed successfully. FAILED indicates that the Task failed.
		OperationStatus OperationStatus `json:"OperationStatus"`
		Severity        *string         `json:"Severity,omitempty"`
		TraceId         *string         `json:"TraceId,omitempty"`
	} `json:"Detail"`
	DetailType string `json:"DetailType"`
}

// NetworkingDeleteHubEvent defines model for networking.DeleteHubEvent.
type NetworkingDeleteHubEvent struct {
	Detail struct {
		Message   *MessageEventDetail `json:"Message,omitempty"`
		Operation Operation           `json:"Operation"`

		// OperationStatus The status of an operation within Stax. This status is returned as part of the response for an asynchronous request and as the status of a Task. STARTED indicates that a request/Task has been received by Stax and is awaiting a worker. PENDING indicates that the Task has been picked up by a worker and is in queue. RUNNING indicates that the Task is active and being processed by a worker. SUCCEEDED indicates that the Task has completed successfully. FAILED indicates that the Task failed.
		OperationStatus OperationStatus `json:"OperationStatus"`
		Severity        *string         `json:"Severity,omitempty"`
		TraceId         *string         `json:"TraceId,omitempty"`
	} `json:"Detail"`
	DetailType string `json:"DetailType"`
}

// NetworkingDeleteHubPeeringEvent defines model for networking.DeleteHubPeeringEvent.
type NetworkingDeleteHubPeeringEvent struct {
	Detail struct {
		Message   *MessageEventDetail `json:"Message,omitempty"`
		Operation Operation           `json:"Operation"`

		// OperationStatus The status of an operation within Stax. This status is returned as part of the response for an asynchronous request and as the status of a Task. STARTED indicates that a request/Task has been received by Stax and is awaiting a worker. PENDING indicates that the Task has been picked up by a worker and is in queue. RUNNING indicates that the Task is active and being processed by a worker. SUCCEEDED indicates that the Task has completed successfully. FAILED indicates that the Task failed.
		OperationStatus OperationStatus `json:"OperationStatus"`
		Severity        *string         `json:"Severity,omitempty"`
		TraceId         *string         `json:"TraceId,omitempty"`
	} `json:"Detail"`
	DetailType string `json:"DetailType"`
}

// NetworkingDeletePrefixListEvent defines model for networking.DeletePrefixListEvent.
type NetworkingDeletePrefixListEvent struct {
	Detail struct {
		Message   *MessageEventDetail `json:"Message,omitempty"`
		Operation Operation           `json:"Operation"`

		// OperationStatus The status of an operation within Stax. This status is returned as part of the response for an asynchronous request and as the status of a Task. STARTED indicates that a request/Task has been received by Stax and is awaiting a worker. PENDING indicates that the Task has been picked up by a worker and is in queue. RUNNING indicates that the Task is active and being processed by a worker. SUCCEEDED indicates that the Task has completed successfully. FAILED indicates that the Task failed.
		OperationStatus OperationStatus `json:"OperationStatus"`
		Severity        *string         `json:"Severity,omitempty"`
		TraceId         *string         `json:"TraceId,omitempty"`
	} `json:"Detail"`
	DetailType string `json:"DetailType"`
}

// NetworkingDeleteVpcEvent defines model for networking.DeleteVpcEvent.
type NetworkingDeleteVpcEvent struct {
	Detail struct {
		Message   *MessageEventDetail `json:"Message,omitempty"`
		Operation Operation           `json:"Operation"`

		// OperationStatus The status of an operation within Stax. This status is returned as part of the response for an asynchronous request and as the status of a Task. STARTED indicates that a request/Task has been received by Stax and is awaiting a worker. PENDING indicates that the Task has been picked up by a worker and is in queue. RUNNING indicates that the Task is active and being processed by a worker. SUCCEEDED indicates that the Task has completed successfully. FAILED indicates that the Task failed.
		OperationStatus OperationStatus `json:"OperationStatus"`
		Severity        *string         `json:"Severity,omitempty"`
		TraceId         *string         `json:"TraceId,omitempty"`
	} `json:"Detail"`
	DetailType string `json:"DetailType"`
}

// NetworkingDeleteVpnConnectionEvent defines model for networking.DeleteVpnConnectionEvent.
type NetworkingDeleteVpnConnectionEvent struct {
	Detail struct {
		Message   *MessageEventDetail `json:"Message,omitempty"`
		Operation Operation           `json:"Operation"`

		// OperationStatus The status of an operation within Stax. This status is returned as part of the response for an asynchronous request and as the status of a Task. STARTED indicates that a request/Task has been received by Stax and is awaiting a worker. PENDING indicates that the Task has been picked up by a worker and is in queue. RUNNING indicates that the Task is active and being processed by a worker. SUCCEEDED indicates that the Task has completed successfully. FAILED indicates that the Task failed.
		OperationStatus OperationStatus `json:"OperationStatus"`
		Severity        *string         `json:"Severity,omitempty"`
		TraceId         *string         `json:"TraceId,omitempty"`
	} `json:"Detail"`
	DetailType string `json:"DetailType"`
}

// NetworkingDeleteVpnCustomerGatewayEvent defines model for networking.DeleteVpnCustomerGatewayEvent.
type NetworkingDeleteVpnCustomerGatewayEvent struct {
	Detail struct {
		Message   *MessageEventDetail `json:"Message,omitempty"`
		Operation Operation           `json:"Operation"`

		// OperationStatus The status of an operation within Stax. This status is returned as part of the response for an asynchronous request and as the status of a Task. STARTED indicates that a request/Task has been received by Stax and is awaiting a worker. PENDING indicates that the Task has been picked up by a worker and is in queue. RUNNING indicates that the Task is active and being processed by a worker. SUCCEEDED indicates that the Task has completed successfully. FAILED indicates that the Task failed.
		OperationStatus OperationStatus `json:"OperationStatus"`
		Severity        *string         `json:"Severity,omitempty"`
		TraceId         *string         `json:"TraceId,omitempty"`
	} `json:"Detail"`
	DetailType string `json:"DetailType"`
}

// NetworkingReadCidrExclusions defines model for networking.ReadCidrExclusions.
type NetworkingReadCidrExclusions struct {
	Exclusions []CidrExclusion `json:"Exclusions"`
}

// NetworkingReadCidrRanges defines model for networking.ReadCidrRanges.
type NetworkingReadCidrRanges struct {
	Ranges []CidrRange `json:"Ranges"`
}

// NetworkingReadDnsResolvers defines model for networking.ReadDnsResolvers.
type NetworkingReadDnsResolvers struct {
	DnsResolvers []DNSResolver `json:"DnsResolvers"`
}

// NetworkingReadDnsRules defines model for networking.ReadDnsRules.
type NetworkingReadDnsRules struct {
	DnsRules []DNSRule `json:"DnsRules"`
}

// NetworkingReadDxAssociations defines model for networking.ReadDxAssociations.
type NetworkingReadDxAssociations struct {
	DxAssociations []DxAssociation `json:"DxAssociations"`
}

// NetworkingReadDxConnections defines model for networking.ReadDxConnections.
type NetworkingReadDxConnections struct {
	DxConnections []DxConnection `json:"DxConnections"`
}

// NetworkingReadDxGateways defines model for networking.ReadDxGateways.
type NetworkingReadDxGateways struct {
	DxGateways []DxGateway `json:"DxGateways"`
}

// NetworkingReadDxVifStatus defines model for networking.ReadDxVifStatus.
type NetworkingReadDxVifStatus struct {
	VifStatus *VifStatus `json:"DxVifStatus,omitempty"`
}

// NetworkingReadDxVifs defines model for networking.ReadDxVifs.
type NetworkingReadDxVifs struct {
	DxVifs []DxVif `json:"DxVifs"`
}

// NetworkingReadHubPeerings defines model for networking.ReadHubPeerings.
type NetworkingReadHubPeerings struct {
	HubPeerings []HubPeering `json:"HubPeerings"`
}

// NetworkingReadHubs defines model for networking.ReadHubs.
type NetworkingReadHubs struct {
	Hubs []NetworkingHub `json:"Hubs"`
}

// NetworkingReadPrefixLists defines model for networking.ReadPrefixLists.
type NetworkingReadPrefixLists struct {
	PrefixLists []PrefixList `json:"PrefixLists"`
}

// NetworkingReadVpcs defines model for networking.ReadVpcs.
type NetworkingReadVpcs struct {
	Vpcs []VPC `json:"Vpcs"`
}

// NetworkingReadVpnConnectionStatus defines model for networking.ReadVpnConnectionStatus.
type NetworkingReadVpnConnectionStatus struct {
	ConnectionStatus *ConnectionStatus `json:"VpnConnectionStatus,omitempty"`
}

// NetworkingReadVpnConnections defines model for networking.ReadVpnConnections.
type NetworkingReadVpnConnections struct {
	VpnConnections []VpnConnection `json:"VpnConnections"`
}

// NetworkingReadVpnCustomerGateways defines model for networking.ReadVpnCustomerGateways.
type NetworkingReadVpnCustomerGateways struct {
	VpnCustomerGateways []VpnCustomerGateway `json:"VpnCustomerGateways"`
}

// NetworkingUpdateCidrExclusion defines model for networking.UpdateCidrExclusion.
type NetworkingUpdateCidrExclusion struct {
	// Description Longer description of what the CIDR Exclusion is used for.
	Description *string `json:"Description,omitempty"`

	// Name Name of the CIDR Exclusion.
	Name *string         `json:"Name,omitempty"`
	Tags *NetworkingTags `json:"Tags"`
}

// NetworkingUpdateCidrRange defines model for networking.UpdateCidrRange.
type NetworkingUpdateCidrRange struct {
	// Description Longer description of what the CIDR Range is used for.
	Description *string `json:"Description,omitempty"`

	// Name Name of the CIDR Range.
	Name *string         `json:"Name,omitempty"`
	Tags *NetworkingTags `json:"Tags"`
}

// NetworkingUpdateDnsResolver defines model for networking.UpdateDnsResolver.
type NetworkingUpdateDnsResolver struct {
	// Name Name of Stax DNS Resolver.
	Name *string `json:"Name,omitempty"`

	// NumberOfInterfaces The number of ENIs to attach to the DNS Resolvers.
	NumberOfInterfaces *int            `json:"NumberOfInterfaces,omitempty"`
	Tags               *NetworkingTags `json:"Tags"`
}

// NetworkingUpdateDnsResolverEvent defines model for networking.UpdateDnsResolverEvent.
type NetworkingUpdateDnsResolverEvent struct {
	Detail struct {
		Message   *MessageEventDetail `json:"Message,omitempty"`
		Operation Operation           `json:"Operation"`

		// OperationStatus The status of an operation within Stax. This status is returned as part of the response for an asynchronous request and as the status of a Task. STARTED indicates that a request/Task has been received by Stax and is awaiting a worker. PENDING indicates that the Task has been picked up by a worker and is in queue. RUNNING indicates that the Task is active and being processed by a worker. SUCCEEDED indicates that the Task has completed successfully. FAILED indicates that the Task failed.
		OperationStatus OperationStatus `json:"OperationStatus"`
		Severity        *string         `json:"Severity,omitempty"`
		TraceId         *string         `json:"TraceId,omitempty"`
	} `json:"Detail"`
	DetailType string `json:"DetailType"`
}

// NetworkingUpdateDnsRule defines model for networking.UpdateDnsRule.
type NetworkingUpdateDnsRule struct {
	// ForwarderIpAddresses The IP Addresses to forward DNS queries to.
	ForwarderIpAddresses *[]string `json:"ForwarderIpAddresses,omitempty"`

	// Name Name of Stax DNS Rule.
	Name *string         `json:"Name,omitempty"`
	Tags *NetworkingTags `json:"Tags"`
}

// NetworkingUpdateDnsRuleEvent defines model for networking.UpdateDnsRuleEvent.
type NetworkingUpdateDnsRuleEvent struct {
	Detail struct {
		Message   *MessageEventDetail `json:"Message,omitempty"`
		Operation Operation           `json:"Operation"`

		// OperationStatus The status of an operation within Stax. This status is returned as part of the response for an asynchronous request and as the status of a Task. STARTED indicates that a request/Task has been received by Stax and is awaiting a worker. PENDING indicates that the Task has been picked up by a worker and is in queue. RUNNING indicates that the Task is active and being processed by a worker. SUCCEEDED indicates that the Task has completed successfully. FAILED indicates that the Task failed.
		OperationStatus OperationStatus `json:"OperationStatus"`
		Severity        *string         `json:"Severity,omitempty"`
		TraceId         *string         `json:"TraceId,omitempty"`
	} `json:"Detail"`
	DetailType string `json:"DetailType"`
}

// NetworkingUpdateDxAssociation defines model for networking.UpdateDxAssociation.
type NetworkingUpdateDxAssociation struct {
	// Prefixes The CIDR Ranges to advertise to on-premises.
	Prefixes *[]string `json:"Prefixes,omitempty"`
}

// NetworkingUpdateDxAssociationEvent defines model for networking.UpdateDxAssociationEvent.
type NetworkingUpdateDxAssociationEvent struct {
	Detail struct {
		Message   *MessageEventDetail `json:"Message,omitempty"`
		Operation Operation           `json:"Operation"`

		// OperationStatus The status of an operation within Stax. This status is returned as part of the response for an asynchronous request and as the status of a Task. STARTED indicates that a request/Task has been received by Stax and is awaiting a worker. PENDING indicates that the Task has been picked up by a worker and is in queue. RUNNING indicates that the Task is active and being processed by a worker. SUCCEEDED indicates that the Task has completed successfully. FAILED indicates that the Task failed.
		OperationStatus OperationStatus `json:"OperationStatus"`
		Severity        *string         `json:"Severity,omitempty"`
		TraceId         *string         `json:"TraceId,omitempty"`
	} `json:"Detail"`
	DetailType string `json:"DetailType"`
}

// NetworkingUpdateDxVif defines model for networking.UpdateDxVif.
type NetworkingUpdateDxVif struct {
	// JumboMtu Boolean value to enable Jumbo Frames.
	JumboMtu *bool           `json:"JumboMtu,omitempty"`
	Tags     *NetworkingTags `json:"Tags"`
}

// NetworkingUpdateDxVifEvent defines model for networking.UpdateDxVifEvent.
type NetworkingUpdateDxVifEvent struct {
	Detail struct {
		Message   *MessageEventDetail `json:"Message,omitempty"`
		Operation Operation           `json:"Operation"`

		// OperationStatus The status of an operation within Stax. This status is returned as part of the response for an asynchronous request and as the status of a Task. STARTED indicates that a request/Task has been received by Stax and is awaiting a worker. PENDING indicates that the Task has been picked up by a worker and is in queue. RUNNING indicates that the Task is active and being processed by a worker. SUCCEEDED indicates that the Task has completed successfully. FAILED indicates that the Task failed.
		OperationStatus OperationStatus `json:"OperationStatus"`
		Severity        *string         `json:"Severity,omitempty"`
		TraceId         *string         `json:"TraceId,omitempty"`
	} `json:"Detail"`
	DetailType string `json:"DetailType"`
}

// NetworkingUpdateHub defines model for networking.UpdateHub.
type NetworkingUpdateHub struct {
	// CreateCloudwatchVpcFlowlogs Boolean value declaring to utilise a Cloudwatch log group for VPC Flow logs
	CreateCloudwatchVpcFlowlogs *bool `json:"CreateCloudwatchVpcFlowlogs,omitempty"`

	// CreateInternetGateway Boolean value declaring to create an Internet Gateway
	CreateInternetGateway *bool `json:"CreateInternetGateway,omitempty"`

	// CreateNatGateway Boolean value declaring to create a NAT Gateway
	CreateNatGateway *bool `json:"CreateNatGateway,omitempty"`

	// CreateVirtualPrivateGateway Boolean value declaring to create a Virtual Private Gateway
	CreateVirtualPrivateGateway *bool `json:"CreateVirtualPrivateGateway,omitempty"`

	// Description Longer description of what the Stax Networking Hub is used for.
	Description        *string              `json:"Description,omitempty"`
	GatewayEndpoints   *[]GatewayEndpoint   `json:"GatewayEndpoints,omitempty"`
	InterfaceEndpoints *[]InterfaceEndpoint `json:"InterfaceEndpoints,omitempty"`

	// Name Name of Stax Networking Hub
	Name *string `json:"Name,omitempty"`

	// PhzSuffix The suffix used to create Route53 Private Hosted Zones names within the Networking Hub, cannot be modified once set
	PhzSuffix *string `json:"PhzSuffix,omitempty"`

	// RedundantEndpoints Boolean value declaring if redundant Interface VPC Endpoints will be created
	RedundantEndpoints *bool `json:"RedundantEndpoints,omitempty"`

	// RedundantNat Boolean value declaring to create redundant NAT Gateways
	RedundantNat *bool           `json:"RedundantNat,omitempty"`
	Tags         *NetworkingTags `json:"Tags"`

	// VirtualPrivateGatewayAsn ASN to assign to the Virtual Private Gateway
	VirtualPrivateGatewayAsn *int `json:"VirtualPrivateGatewayAsn,omitempty"`
}

// NetworkingUpdateHubEvent defines model for networking.UpdateHubEvent.
type NetworkingUpdateHubEvent struct {
	Detail struct {
		Message   *MessageEventDetail `json:"Message,omitempty"`
		Operation Operation           `json:"Operation"`

		// OperationStatus The status of an operation within Stax. This status is returned as part of the response for an asynchronous request and as the status of a Task. STARTED indicates that a request/Task has been received by Stax and is awaiting a worker. PENDING indicates that the Task has been picked up by a worker and is in queue. RUNNING indicates that the Task is active and being processed by a worker. SUCCEEDED indicates that the Task has completed successfully. FAILED indicates that the Task failed.
		OperationStatus OperationStatus `json:"OperationStatus"`
		Severity        *string         `json:"Severity,omitempty"`
		TraceId         *string         `json:"TraceId,omitempty"`
	} `json:"Detail"`
	DetailType string `json:"DetailType"`
}

// NetworkingUpdateHubPeering defines model for networking.UpdateHubPeering.
type NetworkingUpdateHubPeering struct {
	// Name The Name of the Hub Peering.
	Name *string         `json:"Name,omitempty"`
	Tags *NetworkingTags `json:"Tags"`
}

// NetworkingUpdateHubPeeringEvent defines model for networking.UpdateHubPeeringEvent.
type NetworkingUpdateHubPeeringEvent struct {
	Detail struct {
		Message   *MessageEventDetail `json:"Message,omitempty"`
		Operation Operation           `json:"Operation"`

		// OperationStatus The status of an operation within Stax. This status is returned as part of the response for an asynchronous request and as the status of a Task. STARTED indicates that a request/Task has been received by Stax and is awaiting a worker. PENDING indicates that the Task has been picked up by a worker and is in queue. RUNNING indicates that the Task is active and being processed by a worker. SUCCEEDED indicates that the Task has completed successfully. FAILED indicates that the Task failed.
		OperationStatus OperationStatus `json:"OperationStatus"`
		Severity        *string         `json:"Severity,omitempty"`
		TraceId         *string         `json:"TraceId,omitempty"`
	} `json:"Detail"`
	DetailType string `json:"DetailType"`
}

// NetworkingUpdateHubPrefixListAssociation defines model for networking.UpdateHubPrefixListAssociation.
type NetworkingUpdateHubPrefixListAssociation struct {
	// RouteTableTypes The TGW Route Table types to associate a HUB Prefix List with.
	RouteTableTypes *[]NetworkingUpdateHubPrefixListAssociationRouteTableTypes `json:"RouteTableTypes,omitempty"`

	// Zones The VPC Zones to associate a HUB Prefix List with.
	Zones *[]string `json:"Zones,omitempty"`
}

// NetworkingUpdateHubPrefixListAssociationRouteTableTypes defines model for NetworkingUpdateHubPrefixListAssociation.RouteTableTypes.
type NetworkingUpdateHubPrefixListAssociationRouteTableTypes string

// NetworkingUpdatePrefixList defines model for networking.UpdatePrefixList.
type NetworkingUpdatePrefixList struct {
	// Entries The CIDR Ranges to include in the Prefix List.
	Entries *[]string `json:"Entries,omitempty"`

	// MaxEntries The maximum number of CIDR entries that can exist in the Prefix List.
	MaxEntries *int `json:"MaxEntries,omitempty"`

	// Name Name of the Stax Prefix List.
	Name *string         `json:"Name,omitempty"`
	Tags *NetworkingTags `json:"Tags"`

	// TargetId The Stax Id of either a VPN, VPC or Direct Connect Gateway which will be the target of the HUB Prefix List.
	TargetId *string `json:"TargetId,omitempty"`

	// TargetType The type of the target for the HUB Prefix List associations.
	TargetType *NetworkingUpdatePrefixListTargetType `json:"TargetType,omitempty"`
}

// NetworkingUpdatePrefixListTargetType The type of the target for the HUB Prefix List associations.
type NetworkingUpdatePrefixListTargetType string

// NetworkingUpdatePrefixListAssociationEvent defines model for networking.UpdatePrefixListAssociationEvent.
type NetworkingUpdatePrefixListAssociationEvent struct {
	Detail struct {
		Message   *MessageEventDetail `json:"Message,omitempty"`
		Operation Operation           `json:"Operation"`

		// OperationStatus The status of an operation within Stax. This status is returned as part of the response for an asynchronous request and as the status of a Task. STARTED indicates that a request/Task has been received by Stax and is awaiting a worker. PENDING indicates that the Task has been picked up by a worker and is in queue. RUNNING indicates that the Task is active and being processed by a worker. SUCCEEDED indicates that the Task has completed successfully. FAILED indicates that the Task failed.
		OperationStatus OperationStatus `json:"OperationStatus"`
		Severity        *string         `json:"Severity,omitempty"`
		TraceId         *string         `json:"TraceId,omitempty"`
	} `json:"Detail"`
	DetailType string `json:"DetailType"`
}

// NetworkingUpdatePrefixListEvent defines model for networking.UpdatePrefixListEvent.
type NetworkingUpdatePrefixListEvent struct {
	Detail struct {
		Message   *MessageEventDetail `json:"Message,omitempty"`
		Operation Operation           `json:"Operation"`

		// OperationStatus The status of an operation within Stax. This status is returned as part of the response for an asynchronous request and as the status of a Task. STARTED indicates that a request/Task has been received by Stax and is awaiting a worker. PENDING indicates that the Task has been picked up by a worker and is in queue. RUNNING indicates that the Task is active and being processed by a worker. SUCCEEDED indicates that the Task has completed successfully. FAILED indicates that the Task failed.
		OperationStatus OperationStatus `json:"OperationStatus"`
		Severity        *string         `json:"Severity,omitempty"`
		TraceId         *string         `json:"TraceId,omitempty"`
	} `json:"Detail"`
	DetailType string `json:"DetailType"`
}

// NetworkingUpdateVpc defines model for networking.UpdateVpc.
type NetworkingUpdateVpc struct {
	// CreateCloudwatchVpcFlowlogs Boolean value declaring to utilise a Cloudwatch log group for VPC Flow logs
	CreateCloudwatchVpcFlowlogs *bool `json:"CreateCloudwatchVpcFlowlogs,omitempty"`

	// CreateInternetGateway Boolean value declaring to create an Internet Gateway
	CreateInternetGateway *bool `json:"CreateInternetGateway,omitempty"`

	// CreateVirtualPrivateGateway Boolean value declaring to create a Virtual Private Gateway
	CreateVirtualPrivateGateway *bool `json:"CreateVirtualPrivateGateway,omitempty"`

	// Description Longer description of what this VPC is used for.
	Description      *string            `json:"Description,omitempty"`
	GatewayEndpoints *[]GatewayEndpoint `json:"GatewayEndpoints,omitempty"`

	// Name Name of the Stax VPC
	Name *string `json:"Name,omitempty"`

	// PhzPrefix The unique prefix to combine with the PhzSuffix to create a Route53 Private Hosted Zone for the VPC, cannot be modified once set
	PhzPrefix *string         `json:"PhzPrefix,omitempty"`
	Tags      *NetworkingTags `json:"Tags"`

	// VirtualPrivateGatewayAsn ASN to assign to the Virtual Private Gateway
	VirtualPrivateGatewayAsn *int `json:"VirtualPrivateGatewayAsn,omitempty"`
}

// NetworkingUpdateVpcEvent defines model for networking.UpdateVpcEvent.
type NetworkingUpdateVpcEvent struct {
	Detail struct {
		Message   *MessageEventDetail `json:"Message,omitempty"`
		Operation Operation           `json:"Operation"`

		// OperationStatus The status of an operation within Stax. This status is returned as part of the response for an asynchronous request and as the status of a Task. STARTED indicates that a request/Task has been received by Stax and is awaiting a worker. PENDING indicates that the Task has been picked up by a worker and is in queue. RUNNING indicates that the Task is active and being processed by a worker. SUCCEEDED indicates that the Task has completed successfully. FAILED indicates that the Task failed.
		OperationStatus OperationStatus `json:"OperationStatus"`
		Severity        *string         `json:"Severity,omitempty"`
		TraceId         *string         `json:"TraceId,omitempty"`
	} `json:"Detail"`
	DetailType string `json:"DetailType"`
}

// NetworkingUpdateVpcPrefixListAssociation defines model for networking.UpdateVpcPrefixListAssociation.
type NetworkingUpdateVpcPrefixListAssociation struct {
	// SubnetTypes The subnet types to associate a VPC Prefix List with.
	SubnetTypes *[]NetworkingUpdateVpcPrefixListAssociationSubnetTypes `json:"SubnetTypes,omitempty"`

	// VpcIds The list of Stax VPC Ids to associate a VPC Prefix List with.
	VpcIds *[]Uuidv4 `json:"VpcIds,omitempty"`

	// VpcTypes The VPC types to associate a VPC Prefix List with.
	VpcTypes *[]NetworkingUpdateVpcPrefixListAssociationVpcTypes `json:"VpcTypes,omitempty"`

	// Zones The VPC Zones to associate a VPC Prefix List with.
	Zones *[]string `json:"Zones,omitempty"`
}

// NetworkingUpdateVpcPrefixListAssociationSubnetTypes defines model for NetworkingUpdateVpcPrefixListAssociation.SubnetTypes.
type NetworkingUpdateVpcPrefixListAssociationSubnetTypes string

// NetworkingUpdateVpcPrefixListAssociationVpcTypes defines model for NetworkingUpdateVpcPrefixListAssociation.VpcTypes.
type NetworkingUpdateVpcPrefixListAssociationVpcTypes string

// NetworkingUpdateVpnConnection defines model for networking.UpdateVpnConnection.
type NetworkingUpdateVpnConnection struct {
	// Name Name of Stax VPN Connection.
	Name *string         `json:"Name,omitempty"`
	Tags *NetworkingTags `json:"Tags"`
}

// NetworkingUpdateVpnConnectionEvent defines model for networking.UpdateVpnConnectionEvent.
type NetworkingUpdateVpnConnectionEvent struct {
	Detail struct {
		Message   *MessageEventDetail `json:"Message,omitempty"`
		Operation Operation           `json:"Operation"`

		// OperationStatus The status of an operation within Stax. This status is returned as part of the response for an asynchronous request and as the status of a Task. STARTED indicates that a request/Task has been received by Stax and is awaiting a worker. PENDING indicates that the Task has been picked up by a worker and is in queue. RUNNING indicates that the Task is active and being processed by a worker. SUCCEEDED indicates that the Task has completed successfully. FAILED indicates that the Task failed.
		OperationStatus OperationStatus `json:"OperationStatus"`
		Severity        *string         `json:"Severity,omitempty"`
		TraceId         *string         `json:"TraceId,omitempty"`
	} `json:"Detail"`
	DetailType string `json:"DetailType"`
}

// NetworkingUpdateVpnCustomerGateway defines model for networking.UpdateVpnCustomerGateway.
type NetworkingUpdateVpnCustomerGateway struct {
	// Name Name of Stax VPN Customer Gateway.
	Name *string         `json:"Name,omitempty"`
	Tags *NetworkingTags `json:"Tags"`
}

// NetworkingUpdateVpnCustomerGatewayEvent defines model for networking.UpdateVpnCustomerGatewayEvent.
type NetworkingUpdateVpnCustomerGatewayEvent struct {
	Detail struct {
		Message   *MessageEventDetail `json:"Message,omitempty"`
		Operation Operation           `json:"Operation"`

		// OperationStatus The status of an operation within Stax. This status is returned as part of the response for an asynchronous request and as the status of a Task. STARTED indicates that a request/Task has been received by Stax and is awaiting a worker. PENDING indicates that the Task has been picked up by a worker and is in queue. RUNNING indicates that the Task is active and being processed by a worker. SUCCEEDED indicates that the Task has completed successfully. FAILED indicates that the Task failed.
		OperationStatus OperationStatus `json:"OperationStatus"`
		Severity        *string         `json:"Severity,omitempty"`
		TraceId         *string         `json:"TraceId,omitempty"`
	} `json:"Detail"`
	DetailType string `json:"DetailType"`
}

// NullableAwsRegion AWS Region
type NullableAwsRegion string

// NullableUuidv4 defines model for nullable-uuidv4.
type NullableUuidv4 = string

// OrganisationsAttachPolicy defines model for organisations.AttachPolicy.
type OrganisationsAttachPolicy struct {
	OrganisationId *Uuidv4 `json:"OrganisationId,omitempty"`
}

// OrganisationsAttachPolicyEvent defines model for organisations.AttachPolicyEvent.
type OrganisationsAttachPolicyEvent struct {
	Detail struct {
		Message   *string   `json:"Message,omitempty"`
		Operation Operation `json:"Operation"`

		// OperationStatus The status of an operation within Stax. This status is returned as part of the response for an asynchronous request and as the status of a Task. STARTED indicates that a request/Task has been received by Stax and is awaiting a worker. PENDING indicates that the Task has been picked up by a worker and is in queue. RUNNING indicates that the Task is active and being processed by a worker. SUCCEEDED indicates that the Task has completed successfully. FAILED indicates that the Task failed.
		OperationStatus OperationStatus `json:"OperationStatus"`
		Severity        *string         `json:"Severity,omitempty"`
		TaskId          *RoUuidv4       `json:"TaskId,omitempty"`
	} `json:"Detail"`
	DetailType string `json:"DetailType"`
}

// OrganisationsCreatePolicy defines model for organisations.CreatePolicy.
type OrganisationsCreatePolicy struct {
	// Description Description of the Policy.
	Description string `json:"Description"`

	// Name Name of the Policy.
	Name   string `json:"Name"`
	Policy string `json:"Policy"`
}

// OrganisationsCreatePolicyEvent defines model for organisations.CreatePolicyEvent.
type OrganisationsCreatePolicyEvent struct {
	Detail struct {
		Message   *string   `json:"Message,omitempty"`
		Operation Operation `json:"Operation"`

		// OperationStatus The status of an operation within Stax. This status is returned as part of the response for an asynchronous request and as the status of a Task. STARTED indicates that a request/Task has been received by Stax and is awaiting a worker. PENDING indicates that the Task has been picked up by a worker and is in queue. RUNNING indicates that the Task is active and being processed by a worker. SUCCEEDED indicates that the Task has completed successfully. FAILED indicates that the Task failed.
		OperationStatus OperationStatus `json:"OperationStatus"`
		Policy          struct {
			CreatedBy  *RoUuidv4 `json:"CreatedBy,omitempty"`
			CustomerId *RoUuidv4 `json:"CustomerId,omitempty"`

			// Description Description of the Policy.
			Description *string `json:"Description,omitempty"`
			Mandatory   *bool   `json:"Mandatory,omitempty"`

			// Name Name of the Policy.
			Name           *string    `json:"Name,omitempty"`
			Operation      *Operation `json:"Operation,omitempty"`
			OrgId          *RoUuidv4  `json:"OrgId,omitempty"`
			OrganisationId *RoUuidv4  `json:"OrganisationId,omitempty"`
			Policy         *string    `json:"Policy,omitempty"`
			PolicyId       *RoUuidv4  `json:"PolicyId,omitempty"`
			Public         *bool      `json:"Public,omitempty"`
			TaskId         *RoUuidv4  `json:"TaskId,omitempty"`
			TraceId        *string    `json:"TraceId,omitempty"`
		} `json:"Policy"`
		Severity *string   `json:"Severity,omitempty"`
		TaskId   *RoUuidv4 `json:"TaskId,omitempty"`
	} `json:"Detail"`
	DetailType string `json:"DetailType"`
}

// OrganisationsDeletePolicyEvent defines model for organisations.DeletePolicyEvent.
type OrganisationsDeletePolicyEvent struct {
	Detail struct {
		Message   *string   `json:"Message,omitempty"`
		Operation Operation `json:"Operation"`

		// OperationStatus The status of an operation within Stax. This status is returned as part of the response for an asynchronous request and as the status of a Task. STARTED indicates that a request/Task has been received by Stax and is awaiting a worker. PENDING indicates that the Task has been picked up by a worker and is in queue. RUNNING indicates that the Task is active and being processed by a worker. SUCCEEDED indicates that the Task has completed successfully. FAILED indicates that the Task failed.
		OperationStatus OperationStatus `json:"OperationStatus"`
		Policy          struct {
			CreatedBy      *RoUuidv4  `json:"CreatedBy,omitempty"`
			CustomerId     *RoUuidv4  `json:"CustomerId,omitempty"`
			Operation      *Operation `json:"Operation,omitempty"`
			OrgId          *RoUuidv4  `json:"OrgId,omitempty"`
			OrganisationId *RoUuidv4  `json:"OrganisationId,omitempty"`
			PolicyId       *RoUuidv4  `json:"PolicyId,omitempty"`
			TaskId         *RoUuidv4  `json:"TaskId,omitempty"`
			TraceId        *string    `json:"TraceId,omitempty"`
		} `json:"Policy"`
		Severity *string   `json:"Severity,omitempty"`
		TaskId   *RoUuidv4 `json:"TaskId,omitempty"`
	} `json:"Detail"`
	DetailType string `json:"DetailType"`
}

// OrganisationsDetachPolicyEvent defines model for organisations.DetachPolicyEvent.
type OrganisationsDetachPolicyEvent struct {
	Detail struct {
		Message   *string   `json:"Message,omitempty"`
		Operation Operation `json:"Operation"`

		// OperationStatus The status of an operation within Stax. This status is returned as part of the response for an asynchronous request and as the status of a Task. STARTED indicates that a request/Task has been received by Stax and is awaiting a worker. PENDING indicates that the Task has been picked up by a worker and is in queue. RUNNING indicates that the Task is active and being processed by a worker. SUCCEEDED indicates that the Task has completed successfully. FAILED indicates that the Task failed.
		OperationStatus OperationStatus `json:"OperationStatus"`
		Severity        *string         `json:"Severity,omitempty"`
		TaskId          *RoUuidv4       `json:"TaskId,omitempty"`
	} `json:"Detail"`
	DetailType string `json:"DetailType"`
}

// OrganisationsReadOrganisationalUnits defines model for organisations.ReadOrganisationalUnits.
type OrganisationsReadOrganisationalUnits struct {
	OrganisationalUnits []OrganisationalUnit `json:"OrganisationalUnits"`
}

// OrganisationsReadOrganisations defines model for organisations.ReadOrganisations.
type OrganisationsReadOrganisations struct {
	Organisations *[]Organisation `json:"Organisations,omitempty"`
}

// OrganisationsReadPolicies defines model for organisations.ReadPolicies.
type OrganisationsReadPolicies struct {
	Policies []Policy `json:"Policies"`
}

// OrganisationsUpdatePolicy defines model for organisations.UpdatePolicy.
type OrganisationsUpdatePolicy struct {
	// Description Description of the Policy.
	Description *string `json:"Description,omitempty"`

	// Name Name of the Policy.
	Name   *string `json:"Name,omitempty"`
	Policy *string `json:"Policy,omitempty"`
}

// OrganisationsUpdatePolicyEvent defines model for organisations.UpdatePolicyEvent.
type OrganisationsUpdatePolicyEvent struct {
	Detail struct {
		Message   *string   `json:"Message,omitempty"`
		Operation Operation `json:"Operation"`

		// OperationStatus The status of an operation within Stax. This status is returned as part of the response for an asynchronous request and as the status of a Task. STARTED indicates that a request/Task has been received by Stax and is awaiting a worker. PENDING indicates that the Task has been picked up by a worker and is in queue. RUNNING indicates that the Task is active and being processed by a worker. SUCCEEDED indicates that the Task has completed successfully. FAILED indicates that the Task failed.
		OperationStatus OperationStatus `json:"OperationStatus"`
		Policy          struct {
			CreatedBy      *RoUuidv4  `json:"CreatedBy,omitempty"`
			CustomerId     *RoUuidv4  `json:"CustomerId,omitempty"`
			Description    *string    `json:"Description,omitempty"`
			Mandatory      *bool      `json:"Mandatory,omitempty"`
			Name           *string    `json:"Name,omitempty"`
			Operation      *Operation `json:"Operation,omitempty"`
			OrgId          *RoUuidv4  `json:"OrgId,omitempty"`
			OrganisationId *RoUuidv4  `json:"OrganisationId,omitempty"`
			Policy         *string    `json:"Policy,omitempty"`
			PolicyId       *RoUuidv4  `json:"PolicyId,omitempty"`
			Public         *bool      `json:"Public,omitempty"`
			TaskId         *RoUuidv4  `json:"TaskId,omitempty"`
			TraceId        *string    `json:"TraceId,omitempty"`
		} `json:"Policy"`
		Severity *string   `json:"Severity,omitempty"`
		TaskId   *RoUuidv4 `json:"TaskId,omitempty"`
	} `json:"Detail"`
	DetailType string `json:"DetailType"`
}

// PublicCheckAlias defines model for public.CheckAlias.
type PublicCheckAlias struct {
	Alias struct {
		Status PublicCheckAliasAliasStatus `json:"Status"`
	} `json:"Alias"`
}

// PublicCheckAliasAliasStatus defines model for PublicCheckAlias.Alias.Status.
type PublicCheckAliasAliasStatus string

// PublicReadConfig defines model for public.ReadConfig.
type PublicReadConfig struct {
	API struct {
		Endpoints []struct {
			Endpoint string `json:"endpoint"`
			Name     string `json:"name"`

			// Region AWS Region
			Region AwsRegion `json:"region"`
		} `json:"endpoints"`
	} `json:"API"`
	Analytics struct {
		Disable bool `json:"disable"`
	} `json:"Analytics"`
	ApiAuth struct {
		IdentityPoolId  string `json:"identityPoolId"`
		MandatorySignIn bool   `json:"mandatorySignIn"`

		// Region AWS Region
		Region              AwsRegion `json:"region"`
		UserPoolId          string    `json:"userPoolId"`
		UserPoolWebClientId string    `json:"userPoolWebClientId"`
	} `json:"ApiAuth"`
	AppSync struct {
		Analytics struct {
			Endpoint string `json:"endpoint"`

			// Region AWS Region
			Region AwsRegion `json:"region"`
		} `json:"analytics"`
		Core struct {
			Endpoint string `json:"endpoint"`

			// Region AWS Region
			Region AwsRegion `json:"region"`
		} `json:"core"`
		GraphqlEndpoint string `json:"graphqlEndpoint"`

		// Region AWS Region
		Region AwsRegion `json:"region"`
	} `json:"AppSync"`
	Auth struct {
		IdentityPoolId  string `json:"identityPoolId"`
		MandatorySignIn bool   `json:"mandatorySignIn"`

		// Region AWS Region
		Region              AwsRegion `json:"region"`
		UserPoolId          *string   `json:"userPoolId,omitempty"`
		UserPoolWebClientId *string   `json:"userPoolWebClientId,omitempty"`
	} `json:"Auth"`
	Features []string `json:"Features"`
	Juma     struct {
		// ControlplaneRegion AWS Region
		ControlplaneRegion AwsRegion `json:"controlplaneRegion"`
		DomainName         string    `json:"domainName"`
		FullDomainName     string    `json:"fullDomainName"`
		MasterAccountId    int       `json:"masterAccountId"`
		Stage              string    `json:"stage"`
	} `json:"Juma"`
	JumaAuth struct {
		IdentityPoolId  string `json:"identityPoolId"`
		MandatorySignIn bool   `json:"mandatorySignIn"`

		// Region AWS Region
		Region              AwsRegion `json:"region"`
		UserPoolId          string    `json:"userPoolId"`
		UserPoolWebClientId string    `json:"userPoolWebClientId"`
	} `json:"JumaAuth"`
	Segment struct {
		Key string `json:"key"`
	} `json:"Segment"`
	Sentry struct {
		Dsn         string `json:"dsn"`
		ProjectName string `json:"projectName"`
	} `json:"Sentry"`
}

// RoUuidv4 defines model for ro-uuidv4.
type RoUuidv4 = string

// ServicesConfigureSecurityHub defines model for services.ConfigureSecurityHub.
type ServicesConfigureSecurityHub struct {
	Configuration SecurityHubConfiguration `json:"Configuration"`

	// Enabled Boolean to indicate whether to enable/disable securityhub service.
	Enabled bool `json:"Enabled"`
}

// ServicesConfigureSecurityHubEvent defines model for services.ConfigureSecurityHubEvent.
type ServicesConfigureSecurityHubEvent struct {
	Detail struct {
		Message   string    `json:"Message"`
		Operation Operation `json:"Operation"`

		// OperationStatus The status of an operation within Stax. This status is returned as part of the response for an asynchronous request and as the status of a Task. STARTED indicates that a request/Task has been received by Stax and is awaiting a worker. PENDING indicates that the Task has been picked up by a worker and is in queue. RUNNING indicates that the Task is active and being processed by a worker. SUCCEEDED indicates that the Task has completed successfully. FAILED indicates that the Task failed.
		OperationStatus OperationStatus `json:"OperationStatus"`
		Severity        string          `json:"Severity"`
	} `json:"Detail"`
	DetailType string    `json:"DetailType"`
	TaskId     *RoUuidv4 `json:"TaskId,omitempty"`
	TraceId    string    `json:"TraceId"`
}

// ServicesReadConfigurations defines model for services.ReadConfigurations.
type ServicesReadConfigurations struct {
	ServiceConfigurations []ServiceConfiguration `json:"ServiceConfigurations"`
}

// ServicesReadSecurityHubConfiguration defines model for services.ReadSecurityHubConfiguration.
type ServicesReadSecurityHubConfiguration = ServiceConfiguration

// TasksReadTask defines model for tasks.ReadTask.
type TasksReadTask struct {
	Accounts *[]RoUuidv4 `json:"Accounts,omitempty"`
	Logs     []string    `json:"Logs"`

	// Status The status of an operation within Stax. This status is returned as part of the response for an asynchronous request and as the status of a Task. STARTED indicates that a request/Task has been received by Stax and is awaiting a worker. PENDING indicates that the Task has been picked up by a worker and is in queue. RUNNING indicates that the Task is active and being processed by a worker. SUCCEEDED indicates that the Task has completed successfully. FAILED indicates that the Task failed.
	Status    OperationStatus `json:"Status"`
	Users     *[]RoUuidv4     `json:"Users,omitempty"`
	Workloads *[]RoUuidv4     `json:"Workloads,omitempty"`
}

// TeamsCreateApiToken defines model for teams.CreateApiToken.
type TeamsCreateApiToken struct {
	// Description Longer description of what this Token is used for.
	Description *string `json:"Description,omitempty"`

	// Name Name of API Token
	Name string `json:"Name"`

	// Role Stax role assigned to an API Token.
	Role ApiRole `json:"Role"`

	// StoreToken Store the Access and Secret key in SSM, in your security account.
	StoreToken *bool `json:"StoreToken,omitempty"`
	Tags       *Tags `json:"Tags"`

	// TokenKeyId If you choose to store your keys in SSM, encrypt them with this KMS Key
	TokenKeyId *string `json:"TokenKeyId,omitempty"`
}

// TeamsCreateApiTokenResponse defines model for teams.CreateApiTokenResponse.
type TeamsCreateApiTokenResponse struct {
	ApiTokens []struct {
		AccessKey *RoUuidv4       `json:"AccessKey,omitempty"`
		CreatedBy *NullableUuidv4 `json:"CreatedBy"`

		// CreatedTS Created timestamp.
		CreatedTS *time.Time `json:"CreatedTS,omitempty"`

		// Description Longer description of what this Token is used for.
		Description *string `json:"Description,omitempty"`

		// ModifiedTS Created timestamp.
		ModifiedTS *time.Time `json:"ModifiedTS,omitempty"`

		// Name Name of API Token
		Name *string `json:"Name,omitempty"`

		// Role Stax role assigned to an API Token.
		Role      *ApiRole `json:"Role,omitempty"`
		SecretKey *string  `json:"SecretKey,omitempty"`

		// Status Status of the User.
		Status *TeamsCreateApiTokenResponseApiTokensStatus `json:"Status,omitempty"`
		Tags   *Tags                                       `json:"Tags"`
	} `json:"ApiTokens"`
}

// TeamsCreateApiTokenResponseApiTokensStatus Status of the User.
type TeamsCreateApiTokenResponseApiTokensStatus string

// TeamsCreateGroup defines model for teams.CreateGroup.
type TeamsCreateGroup struct {
	// Name Name of User Group
	Name string `json:"Name"`
}

// TeamsCreateGroupEvent defines model for teams.CreateGroupEvent.
type TeamsCreateGroupEvent struct {
	Detail struct {
		Message   *string   `json:"Message,omitempty"`
		Operation Operation `json:"Operation"`

		// OperationStatus The status of an operation within Stax. This status is returned as part of the response for an asynchronous request and as the status of a Task. STARTED indicates that a request/Task has been received by Stax and is awaiting a worker. PENDING indicates that the Task has been picked up by a worker and is in queue. RUNNING indicates that the Task is active and being processed by a worker. SUCCEEDED indicates that the Task has completed successfully. FAILED indicates that the Task failed.
		OperationStatus OperationStatus `json:"OperationStatus"`
		Severity        *string         `json:"Severity,omitempty"`
		TaskId          *RoUuidv4       `json:"TaskId,omitempty"`
	} `json:"Detail"`
	DetailType string    `json:"DetailType"`
	GroupId    *RoUuidv4 `json:"GroupId,omitempty"`
}

// TeamsCreateUser defines model for teams.CreateUser.
type TeamsCreateUser struct {
	// Email Email address of User.
	Email openapi_types.Email `json:"Email"`

	// FirstName Given Name of the User.
	FirstName string `json:"FirstName"`

	// LastName Family Name of the User.
	LastName string `json:"LastName"`

	// Role Stax role assigned to an IDAM user.
	Role *IdamUserRole `json:"Role,omitempty"`
}

// TeamsCreateUserEvent defines model for teams.CreateUserEvent.
type TeamsCreateUserEvent struct {
	CustomerId *RoUuidv4 `json:"CustomerId,omitempty"`
	Detail     struct {
		Message   *string   `json:"Message,omitempty"`
		Operation Operation `json:"Operation"`

		// OperationStatus The status of an operation within Stax. This status is returned as part of the response for an asynchronous request and as the status of a Task. STARTED indicates that a request/Task has been received by Stax and is awaiting a worker. PENDING indicates that the Task has been picked up by a worker and is in queue. RUNNING indicates that the Task is active and being processed by a worker. SUCCEEDED indicates that the Task has completed successfully. FAILED indicates that the Task failed.
		OperationStatus OperationStatus `json:"OperationStatus"`
		Severity        *string         `json:"Severity,omitempty"`
		TraceId         *string         `json:"TraceId,omitempty"`
	} `json:"Detail"`
	DetailType string    `json:"DetailType"`
	TaskId     *RoUuidv4 `json:"TaskId,omitempty"`
	TraceId    *string   `json:"TraceId,omitempty"`
}

// TeamsDeleteApiTokenResponse defines model for teams.DeleteApiTokenResponse.
type TeamsDeleteApiTokenResponse struct {
	ApiTokens []struct {
		AccessKey *RoUuidv4       `json:"AccessKey,omitempty"`
		CreatedBy *NullableUuidv4 `json:"CreatedBy"`

		// CreatedTS Created timestamp.
		CreatedTS *time.Time `json:"CreatedTS,omitempty"`

		// Description Longer description of what this Token is used for.
		Description *string `json:"Description,omitempty"`

		// ModifiedTS Modified timestamp.
		ModifiedTS *time.Time `json:"ModifiedTS,omitempty"`

		// Name Name of API Token
		Name *string `json:"Name,omitempty"`

		// Role Stax role assigned to an API Token.
		Role *ApiRole `json:"Role,omitempty"`

		// Status Status of the Token.
		Status *TeamsDeleteApiTokenResponseApiTokensStatus `json:"Status,omitempty"`
		Tags   *Tags                                       `json:"Tags"`
	} `json:"ApiTokens"`
}

// TeamsDeleteApiTokenResponseApiTokensStatus Status of the Token.
type TeamsDeleteApiTokenResponseApiTokensStatus string

// TeamsDeleteGroupEvent defines model for teams.DeleteGroupEvent.
type TeamsDeleteGroupEvent struct {
	Detail struct {
		Message   *string   `json:"Message,omitempty"`
		Operation Operation `json:"Operation"`

		// OperationStatus The status of an operation within Stax. This status is returned as part of the response for an asynchronous request and as the status of a Task. STARTED indicates that a request/Task has been received by Stax and is awaiting a worker. PENDING indicates that the Task has been picked up by a worker and is in queue. RUNNING indicates that the Task is active and being processed by a worker. SUCCEEDED indicates that the Task has completed successfully. FAILED indicates that the Task failed.
		OperationStatus OperationStatus `json:"OperationStatus"`
		Severity        *string         `json:"Severity,omitempty"`
		TaskId          *RoUuidv4       `json:"TaskId,omitempty"`
	} `json:"Detail"`
	DetailType string `json:"DetailType"`
}

// TeamsDeleteUserResponse defines model for teams.DeleteUserResponse.
type TeamsDeleteUserResponse struct {
	Users []User `json:"Users"`
}

// TeamsReadApiTokens defines model for teams.ReadApiTokens.
type TeamsReadApiTokens struct {
	ApiTokens []struct {
		AccessKey *RoUuidv4       `json:"AccessKey,omitempty"`
		CreatedBy *NullableUuidv4 `json:"CreatedBy"`

		// CreatedTS Created timestamp.
		CreatedTS *time.Time `json:"CreatedTS,omitempty"`

		// Description Longer description of what this Token is used for.
		Description string `json:"Description"`

		// ModifiedTS Modified timestamp.
		ModifiedTS *time.Time `json:"ModifiedTS,omitempty"`

		// Name Name of API Token
		Name string `json:"Name"`

		// Role Stax role assigned to an API Token.
		Role ApiRole `json:"Role"`

		// Status Status of the Token.
		Status TeamsReadApiTokensApiTokensStatus `json:"Status"`
		Tags   *Tags                             `json:"Tags"`
	} `json:"ApiTokens"`
}

// TeamsReadApiTokensApiTokensStatus Status of the Token.
type TeamsReadApiTokensApiTokensStatus string

// TeamsReadGroupsResponse defines model for teams.ReadGroupsResponse.
type TeamsReadGroupsResponse struct {
	Groups []Group `json:"Groups"`
}

// TeamsReadIdamUsers defines model for teams.ReadIdamUsers.
type TeamsReadIdamUsers struct {
	Users []IdamUser `json:"Users"`
}

// TeamsReadUsers defines model for teams.ReadUsers.
type TeamsReadUsers struct {
	Users []User `json:"Users"`
}

// TeamsUpdateApiToken defines model for teams.UpdateApiToken.
type TeamsUpdateApiToken struct {
	// Description Longer description of what this Token is used for.
	Description *string `json:"Description,omitempty"`

	// Role Stax role assigned to an API Token.
	Role *ApiRole `json:"Role,omitempty"`
	Tags *Tags    `json:"Tags"`
}

// TeamsUpdateApiTokenResponse defines model for teams.UpdateApiTokenResponse.
type TeamsUpdateApiTokenResponse struct {
	ApiTokens []struct {
		AccessKey *RoUuidv4       `json:"AccessKey,omitempty"`
		CreatedBy *NullableUuidv4 `json:"CreatedBy"`

		// CreatedTS Created timestamp.
		CreatedTS *time.Time `json:"CreatedTS,omitempty"`

		// Description Longer description of what this Token is used for.
		Description *string `json:"Description,omitempty"`

		// ModifiedTS Modified timestamp.
		ModifiedTS *time.Time `json:"ModifiedTS,omitempty"`

		// Name Name of API Token
		Name *string `json:"Name,omitempty"`

		// Role Stax role assigned to an API Token.
		Role *ApiRole `json:"Role,omitempty"`

		// Status Status of the Token.
		Status *TeamsUpdateApiTokenResponseApiTokensStatus `json:"Status,omitempty"`
		Tags   *Tags                                       `json:"Tags"`
	} `json:"ApiTokens"`
}

// TeamsUpdateApiTokenResponseApiTokensStatus Status of the Token.
type TeamsUpdateApiTokenResponseApiTokensStatus string

// TeamsUpdateGroup defines model for teams.UpdateGroup.
type TeamsUpdateGroup struct {
	// Name Name of User Group
	Name string `json:"Name"`
}

// TeamsUpdateGroupEvent defines model for teams.UpdateGroupEvent.
type TeamsUpdateGroupEvent struct {
	Detail struct {
		Message   *string   `json:"Message,omitempty"`
		Operation Operation `json:"Operation"`

		// OperationStatus The status of an operation within Stax. This status is returned as part of the response for an asynchronous request and as the status of a Task. STARTED indicates that a request/Task has been received by Stax and is awaiting a worker. PENDING indicates that the Task has been picked up by a worker and is in queue. RUNNING indicates that the Task is active and being processed by a worker. SUCCEEDED indicates that the Task has completed successfully. FAILED indicates that the Task failed.
		OperationStatus OperationStatus `json:"OperationStatus"`
		Severity        *string         `json:"Severity,omitempty"`
		TaskId          *RoUuidv4       `json:"TaskId,omitempty"`
	} `json:"Detail"`
	DetailType string `json:"DetailType"`
}

// TeamsUpdateGroupMembers defines model for teams.UpdateGroupMembers.
type TeamsUpdateGroupMembers struct {
	AddMembers    *[]UserGroupMemberMap `json:"AddMembers,omitempty"`
	RemoveMembers *[]UserGroupMemberMap `json:"RemoveMembers,omitempty"`
}

// TeamsUpdateGroupMembersEvent defines model for teams.UpdateGroupMembersEvent.
type TeamsUpdateGroupMembersEvent struct {
	Detail struct {
		Message   *string   `json:"Message,omitempty"`
		Operation Operation `json:"Operation"`

		// OperationStatus The status of an operation within Stax. This status is returned as part of the response for an asynchronous request and as the status of a Task. STARTED indicates that a request/Task has been received by Stax and is awaiting a worker. PENDING indicates that the Task has been picked up by a worker and is in queue. RUNNING indicates that the Task is active and being processed by a worker. SUCCEEDED indicates that the Task has completed successfully. FAILED indicates that the Task failed.
		OperationStatus OperationStatus `json:"OperationStatus"`
		Severity        *string         `json:"Severity,omitempty"`
		TaskId          *RoUuidv4       `json:"TaskId,omitempty"`
	} `json:"Detail"`
	DetailType string `json:"DetailType"`
}

// TeamsUpdateUser defines model for teams.UpdateUser.
type TeamsUpdateUser struct {
	// Email Email address of User.
	Email *openapi_types.Email `json:"Email,omitempty"`

	// FirstName Given Name of the User.
	FirstName *string `json:"FirstName,omitempty"`

	// LastName Family Name of the User.
	LastName *string `json:"LastName,omitempty"`

	// Role Stax role assigned to an IDAM user.
	Role *IdamUserRole `json:"Role,omitempty"`

	// Status Status of User.
	Status *TeamsUpdateUserStatus `json:"Status,omitempty"`
}

// TeamsUpdateUserStatus Status of User.
type TeamsUpdateUserStatus string

// TeamsUpdateUserEvent defines model for teams.UpdateUserEvent.
type TeamsUpdateUserEvent struct {
	CustomerId *RoUuidv4 `json:"CustomerId,omitempty"`
	Detail     struct {
		Message   *string   `json:"Message,omitempty"`
		Operation Operation `json:"Operation"`

		// OperationStatus The status of an operation within Stax. This status is returned as part of the response for an asynchronous request and as the status of a Task. STARTED indicates that a request/Task has been received by Stax and is awaiting a worker. PENDING indicates that the Task has been picked up by a worker and is in queue. RUNNING indicates that the Task is active and being processed by a worker. SUCCEEDED indicates that the Task has completed successfully. FAILED indicates that the Task failed.
		OperationStatus OperationStatus `json:"OperationStatus"`
		Severity        *string         `json:"Severity,omitempty"`
		TraceId         *string         `json:"TraceId,omitempty"`
	} `json:"Detail"`
	DetailType string    `json:"DetailType"`
	TaskId     *RoUuidv4 `json:"TaskId,omitempty"`
	TraceId    *string   `json:"TraceId,omitempty"`
}

// TeamsUpdateUserInviteEvent defines model for teams.UpdateUserInviteEvent.
type TeamsUpdateUserInviteEvent struct {
	Detail struct {
		Message   string    `json:"Message"`
		Operation Operation `json:"Operation"`

		// OperationStatus The status of an operation within Stax. This status is returned as part of the response for an asynchronous request and as the status of a Task. STARTED indicates that a request/Task has been received by Stax and is awaiting a worker. PENDING indicates that the Task has been picked up by a worker and is in queue. RUNNING indicates that the Task is active and being processed by a worker. SUCCEEDED indicates that the Task has completed successfully. FAILED indicates that the Task failed.
		OperationStatus OperationStatus `json:"OperationStatus"`
		Severity        *string         `json:"Severity,omitempty"`
		TraceId         *string         `json:"TraceId,omitempty"`
	} `json:"Detail"`
	DetailType string `json:"DetailType"`
}

// TeamsUpdateUserPasswordEvent defines model for teams.UpdateUserPasswordEvent.
type TeamsUpdateUserPasswordEvent struct {
	Detail struct {
		Message   string    `json:"Message"`
		Operation Operation `json:"Operation"`

		// OperationStatus The status of an operation within Stax. This status is returned as part of the response for an asynchronous request and as the status of a Task. STARTED indicates that a request/Task has been received by Stax and is awaiting a worker. PENDING indicates that the Task has been picked up by a worker and is in queue. RUNNING indicates that the Task is active and being processed by a worker. SUCCEEDED indicates that the Task has completed successfully. FAILED indicates that the Task failed.
		OperationStatus OperationStatus `json:"OperationStatus"`
		Severity        *string         `json:"Severity,omitempty"`
		TraceId         *string         `json:"TraceId,omitempty"`
	} `json:"Detail"`
	DetailType string `json:"DetailType"`
}

// Uuidv4 defines model for uuidv4.
type Uuidv4 = string

// WorkloadsCatalogue defines model for workloads.Catalogue.
type WorkloadsCatalogue struct {
	OrganisationId Uuidv4 `json:"OrganisationId"`

	// Paging Pagination metadata. Present when limit and offset parameters are supplied.
	Paging                 *Pagination         `json:"Paging,omitempty"`
	WorkloadCatalogueItems []WorkloadCatalogue `json:"WorkloadCatalogueItems"`
}

// WorkloadsCreateCatalogueItem defines model for workloads.CreateCatalogueItem.
type WorkloadsCreateCatalogueItem struct {
	// Description Description of the Workload.
	Description string `json:"Description"`

	// ManifestBody Raw text of a Manifest. Either this or ManifestURL must be provided.
	ManifestBody *string `json:"ManifestBody,omitempty"`

	// ManifestURL HTTPS/S3 URL of the manifest. Either this or ManifestBody must be provided.
	ManifestURL *string `json:"ManifestURL,omitempty"`

	// Name Name of the Workload Catalogue Item to create.
	Name       string     `json:"Name"`
	Parameters *Parameter `json:"Parameters"`
	Tags       *Tags      `json:"Tags"`

	// Version Version of the Workload Catalogue Item to create.
	Version string `json:"Version"`
}

// WorkloadsCreateCatalogueVersion defines model for workloads.CreateCatalogueVersion.
type WorkloadsCreateCatalogueVersion struct {
	// Description Description of the Workload Item Version
	Description string `json:"Description"`

	// ManifestBody Raw text of a Manifest. Either this or ManifestURL must be provided.
	ManifestBody *string `json:"ManifestBody,omitempty"`

	// ManifestURL HTTPS/S3 URL of the manifest. Either this or ManifestBody must be provided.
	ManifestURL *string    `json:"ManifestURL,omitempty"`
	Parameters  *Parameter `json:"Parameters"`
	Tags        *Tags      `json:"Tags"`

	// Version Version of the Workload Catalogue Item to create.
	Version string `json:"Version"`
}

// WorkloadsCreateWorkload defines model for workloads.CreateWorkload.
type WorkloadsCreateWorkload struct {
	AccountId          Uuidv4    `json:"AccountId"`
	CatalogueId        Uuidv4    `json:"CatalogueId"`
	CatalogueVersionId *Uuidv4   `json:"CatalogueVersionId,omitempty"`
	Id                 *RoUuidv4 `json:"Id,omitempty"`

	// Name The Workload name.
	Name       string                      `json:"Name"`
	Parameters *[]KeyValueRequestParameter `json:"Parameters,omitempty"`

	// Region AWS Region
	Region AwsRegion `json:"Region"`
	Tags   *Tags     `json:"Tags"`
}

// WorkloadsReadCatalogueItems defines model for workloads.ReadCatalogueItems.
type WorkloadsReadCatalogueItems struct {
	WorkloadCatalogues []WorkloadsCatalogue `json:"WorkloadCatalogues"`
}

// WorkloadsReadCatalogueManifest defines model for workloads.ReadCatalogueManifest.
type WorkloadsReadCatalogueManifest struct {
	Url string `json:"url"`
}

// WorkloadsReadCatalogueTemplate defines model for workloads.ReadCatalogueTemplate.
type WorkloadsReadCatalogueTemplate struct {
	Url string `json:"url"`
}

// WorkloadsReadCatalogueVersion defines model for workloads.ReadCatalogueVersion.
type WorkloadsReadCatalogueVersion struct {
	Versions []WorkloadCatalogueVersion `json:"Versions"`
}

// WorkloadsReadWorkloadsResponse defines model for workloads.ReadWorkloadsResponse.
type WorkloadsReadWorkloadsResponse struct {
	// Paging Pagination metadata. Present when limit and offset parameters are supplied.
	Paging    *Pagination `json:"Paging,omitempty"`
	Workloads []Workload  `json:"Workloads"`
}

// WorkloadsUpdateAll defines model for workloads.UpdateAll.
type WorkloadsUpdateAll struct {
	CatalogueId        Uuidv4  `json:"CatalogueId"`
	CatalogueVersionId *Uuidv4 `json:"CatalogueVersionId,omitempty"`
}

// WorkloadsUpdateWorkload defines model for workloads.UpdateWorkload.
type WorkloadsUpdateWorkload struct {
	CatalogueId        *Uuidv4                     `json:"CatalogueId,omitempty"`
	CatalogueVersionId *Uuidv4                     `json:"CatalogueVersionId,omitempty"`
	Parameters         *[]KeyValueRequestParameter `json:"Parameters,omitempty"`
	Protection         *bool                       `json:"Protection,omitempty"`
	Tags               *Tags                       `json:"Tags"`
}

// AccountsReadAccountsParams defines parameters for AccountsReadAccounts.
type AccountsReadAccountsParams struct {
	// AccountNames The list of Account Names you want returned, comma delimited.
	AccountNames *string `form:"account_names,omitempty" json:"account_names,omitempty"`

	// Filter The Account statuses to return, comma delimited.
	//
	// Filter options available: INITIALIZING, ACTIVE, SUSPENDED, MAINTENANCE, AWSERROR, CLOSED, OFFBOARDED, DISCOVERED, ERROR.
	Filter *string `form:"filter,omitempty" json:"filter,omitempty"`

	// IdFilter List of Account IDs you want returned, comma delimited.
	IdFilter *string `form:"id_filter,omitempty" json:"id_filter,omitempty"`

	// AwsAccountIdFilter List of AWS Account IDs you want returned, comma delimited.
	AwsAccountIdFilter *string `form:"aws_account_id_filter,omitempty" json:"aws_account_id_filter,omitempty"`

	// AccountTypeFilter The Account Type IDs to return, comma delimited.
	AccountTypeFilter *string `form:"account_type_filter,omitempty" json:"account_type_filter,omitempty"`

	// Offset Pagination - The page number to return.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Pagination - The number of items per page to return.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Sort The field to sort on.
	Sort *string `form:"sort,omitempty" json:"sort,omitempty"`

	// SortOrder The sort order - up or down?
	SortOrder *AccountsReadAccountsParamsSortOrder `form:"sort_order,omitempty" json:"sort_order,omitempty"`

	// IncludeTags Do you want all the Tags?
	IncludeTags *bool `form:"include_tags,omitempty" json:"include_tags,omitempty"`
}

// AccountsReadAccountsParamsSortOrder defines parameters for AccountsReadAccounts.
type AccountsReadAccountsParamsSortOrder string

// AccountsReadAccountTypesParams defines parameters for AccountsReadAccountTypes.
type AccountsReadAccountTypesParams struct {
	// IdFilter List of AccountType IDs you want returned, comma delimited.
	IdFilter *string `form:"id_filter,omitempty" json:"id_filter,omitempty"`
}

// AccountsReadAccountTypeParams defines parameters for AccountsReadAccountType.
type AccountsReadAccountTypeParams struct {
	// IdFilter List of AccountType IDs you want returned, comma delimited.
	IdFilter *string `form:"id_filter,omitempty" json:"id_filter,omitempty"`
}

// AccountsReadAccountParams defines parameters for AccountsReadAccount.
type AccountsReadAccountParams struct {
	// AccountNames The list of Account Names you want returned, comma delimited.
	AccountNames *string `form:"account_names,omitempty" json:"account_names,omitempty"`

	// Filter The Account statuses to return, comma delimited.
	//
	// Filter options available: INITIALIZING, ACTIVE, SUSPENDED, MAINTENANCE, AWSERROR, CLOSED, OFFBOARDED, DISCOVERED, ERROR.
	Filter *string `form:"filter,omitempty" json:"filter,omitempty"`

	// IdFilter List of Account IDs you want returned, comma delimited.
	IdFilter *string `form:"id_filter,omitempty" json:"id_filter,omitempty"`

	// AwsAccountIdFilter List of AWS Account IDs you want returned, comma delimited.
	AwsAccountIdFilter *string `form:"aws_account_id_filter,omitempty" json:"aws_account_id_filter,omitempty"`

	// AccountTypeFilter The Account Type IDs to return, comma delimited.
	AccountTypeFilter *string `form:"account_type_filter,omitempty" json:"account_type_filter,omitempty"`

	// Offset Pagination - The page number to return.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Pagination - The number of items per page to return.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Sort The field to sort on.
	Sort *string `form:"sort,omitempty" json:"sort,omitempty"`

	// SortOrder The sort order - up or down?
	SortOrder *AccountsReadAccountParamsSortOrder `form:"sort_order,omitempty" json:"sort_order,omitempty"`

	// IncludeTags Do you want all the Tags?
	IncludeTags *bool `form:"include_tags,omitempty" json:"include_tags,omitempty"`
}

// AccountsReadAccountParamsSortOrder defines parameters for AccountsReadAccount.
type AccountsReadAccountParamsSortOrder string

// TeamsReadApiTokensParams defines parameters for TeamsReadApiTokens.
type TeamsReadApiTokensParams struct {
	// IdFilter List of Access Keys you want returned, comma delimited.
	IdFilter *string `form:"id_filter,omitempty" json:"id_filter,omitempty"`

	// Status List of API Token statuses you want returned, comma delimited.
	//
	// Filter Options available: ACTIVE, DELETED
	Status *string `form:"status,omitempty" json:"status,omitempty"`
}

// TeamsReadApiTokenParams defines parameters for TeamsReadApiToken.
type TeamsReadApiTokenParams struct {
	// IdFilter List of Access Keys you want returned, comma delimited.
	IdFilter *string `form:"id_filter,omitempty" json:"id_filter,omitempty"`

	// Status List of API Token statuses you want returned, comma delimited.
	//
	// Filter Options available: ACTIVE, DELETED
	Status *string `form:"status,omitempty" json:"status,omitempty"`
}

// TeamsReadGroupsParams defines parameters for TeamsReadGroups.
type TeamsReadGroupsParams struct {
	// IdFilter List of Group IDs you want returned, comma delimited.
	IdFilter *string `form:"id_filter,omitempty" json:"id_filter,omitempty"`
}

// NetworkingReadDnsResolversParams defines parameters for NetworkingReadDnsResolvers.
type NetworkingReadDnsResolversParams struct {
	// Status The Stax DNS Resolver statuses to return, comma delimited.
	//
	// Filter options available: ACTIVE, CREATE_IN_PROGRESS, CREATE_FAILED, DELETE_IN_PROGRESS, DELETED, DELETE_FAILED
	Status *string `form:"status,omitempty" json:"status,omitempty"`
}

// NetworkingReadDnsResolverParams defines parameters for NetworkingReadDnsResolver.
type NetworkingReadDnsResolverParams struct {
	// Status The Stax DNS Resolver statuses to return, comma delimited.
	//
	// Filter options available: ACTIVE, CREATE_IN_PROGRESS, CREATE_FAILED, DELETE_IN_PROGRESS, DELETED, DELETE_FAILED
	Status *string `form:"status,omitempty" json:"status,omitempty"`
}

// NetworkingReadResolverDnsRulesParams defines parameters for NetworkingReadResolverDnsRules.
type NetworkingReadResolverDnsRulesParams struct {
	// Status The Stax DNS Rule statuses to return, comma delimited.
	//
	// Filter options available: ACTIVE, CREATE_IN_PROGRESS, CREATE_FAILED, DELETE_IN_PROGRESS, DELETED, DELETE_FAILED
	Status *string `form:"status,omitempty" json:"status,omitempty"`
}

// NetworkingReadDnsRulesParams defines parameters for NetworkingReadDnsRules.
type NetworkingReadDnsRulesParams struct {
	// Status The Stax DNS Rule statuses to return, comma delimited.
	//
	// Filter options available: ACTIVE, CREATE_IN_PROGRESS, CREATE_FAILED, DELETE_IN_PROGRESS, DELETED, DELETE_FAILED
	Status *string `form:"status,omitempty" json:"status,omitempty"`
}

// NetworkingReadDnsRuleParams defines parameters for NetworkingReadDnsRule.
type NetworkingReadDnsRuleParams struct {
	// Status The Stax DNS Rule statuses to return, comma delimited.
	//
	// Filter options available: ACTIVE, CREATE_IN_PROGRESS, CREATE_FAILED, DELETE_IN_PROGRESS, DELETED, DELETE_FAILED
	Status *string `form:"status,omitempty" json:"status,omitempty"`
}

// NetworkingReadDxAssociationsParams defines parameters for NetworkingReadDxAssociations.
type NetworkingReadDxAssociationsParams struct {
	// Status The Stax DX Association statuses to return, comma delimited.
	//
	// Filter options available: ACTIVE, CREATE_IN_PROGRESS, CREATE_FAILED, DELETE_IN_PROGRESS, DELETED, DELETE_FAILED
	Status *string `form:"status,omitempty" json:"status,omitempty"`
}

// NetworkingReadDxAssociationParams defines parameters for NetworkingReadDxAssociation.
type NetworkingReadDxAssociationParams struct {
	// Status The Stax DX Association statuses to return, comma delimited.
	//
	// Filter options available: ACTIVE, CREATE_IN_PROGRESS, CREATE_FAILED, DELETE_IN_PROGRESS, DELETED, DELETE_FAILED
	Status string `form:"status" json:"status"`
}

// NetworkingReadDxGatewaysParams defines parameters for NetworkingReadDxGateways.
type NetworkingReadDxGatewaysParams struct {
	// Status The Stax DX Gateway statuses to return, comma delimited.
	//
	// Filter options available: ACTIVE, CREATE_IN_PROGRESS, CREATE_FAILED, DELETE_IN_PROGRESS, DELETED, DELETE_FAILED
	Status *string `form:"status,omitempty" json:"status,omitempty"`
}

// NetworkingReadDxGatewayParams defines parameters for NetworkingReadDxGateway.
type NetworkingReadDxGatewayParams struct {
	// Status The Stax DX Gateway statuses to return, comma delimited.
	//
	// Filter options available: ACTIVE, CREATE_IN_PROGRESS, CREATE_FAILED, DELETE_IN_PROGRESS, DELETED, DELETE_FAILED
	Status *string `form:"status,omitempty" json:"status,omitempty"`
}

// NetworkingReadGatewayDxAssociationsParams defines parameters for NetworkingReadGatewayDxAssociations.
type NetworkingReadGatewayDxAssociationsParams struct {
	// Status The Stax DX Association statuses to return, comma delimited.
	//
	// Filter options available: ACTIVE, CREATE_IN_PROGRESS, CREATE_FAILED, DELETE_IN_PROGRESS, DELETED, DELETE_FAILED
	Status *string `form:"status,omitempty" json:"status,omitempty"`
}

// NetworkingReadGatewayDxVifsParams defines parameters for NetworkingReadGatewayDxVifs.
type NetworkingReadGatewayDxVifsParams struct {
	// Status The Stax DX Gateway statuses to return, comma delimited.
	//
	// Filter options available: ACTIVE, CREATE_IN_PROGRESS, CREATE_FAILED, DELETE_IN_PROGRESS, DELETED, DELETE_FAILED
	Status *string `form:"status,omitempty" json:"status,omitempty"`
}

// NetworkingReadDxVifsParams defines parameters for NetworkingReadDxVifs.
type NetworkingReadDxVifsParams struct {
	// Status The Stax DX Gateway statuses to return, comma delimited.
	//
	// Filter options available: ACTIVE, CREATE_IN_PROGRESS, CREATE_FAILED, DELETE_IN_PROGRESS, DELETED, DELETE_FAILED
	Status *string `form:"status,omitempty" json:"status,omitempty"`
}

// NetworkingReadDxVifParams defines parameters for NetworkingReadDxVif.
type NetworkingReadDxVifParams struct {
	// Status The Stax DX Gateway statuses to return, comma delimited.
	//
	// Filter options available: ACTIVE, CREATE_IN_PROGRESS, CREATE_FAILED, DELETE_IN_PROGRESS, DELETED, DELETE_FAILED
	Status *string `form:"status,omitempty" json:"status,omitempty"`
}

// NetworkingReadCidrExclusionsParams defines parameters for NetworkingReadCidrExclusions.
type NetworkingReadCidrExclusionsParams struct {
	// Status The Hub statuses to return, comma delimited.
	//
	// Filter options available: ACTIVE, DELETED
	Status *string `form:"status,omitempty" json:"status,omitempty"`
}

// NetworkingReadCidrExclusionParams defines parameters for NetworkingReadCidrExclusion.
type NetworkingReadCidrExclusionParams struct {
	// Status The Hub statuses to return, comma delimited.
	//
	// Filter options available: ACTIVE, DELETED
	Status *string `form:"status,omitempty" json:"status,omitempty"`
}

// NetworkingReadHubPeeringsParams defines parameters for NetworkingReadHubPeerings.
type NetworkingReadHubPeeringsParams struct {
	// Status The Stax Hub Peering statuses to return, comma delimited.
	//
	// Filter options available: ACTIVE, CREATE_IN_PROGRESS, CREATE_FAILED, PENDING_ACCEPT, DELETE_IN_PROGRESS, DELETED, DELETE_FAILED, UPDATE_IN_PROGRESS
	Status *string `form:"status,omitempty" json:"status,omitempty"`
}

// NetworkingReadHubPeeringParams defines parameters for NetworkingReadHubPeering.
type NetworkingReadHubPeeringParams struct {
	// Status The Stax Hub Peering statuses to return, comma delimited.
	//
	// Filter options available: ACTIVE, CREATE_IN_PROGRESS, CREATE_FAILED, PENDING_ACCEPT, DELETE_IN_PROGRESS, DELETED, DELETE_FAILED, UPDATE_IN_PROGRESS
	Status *string `form:"status,omitempty" json:"status,omitempty"`
}

// NetworkingReadHubsParams defines parameters for NetworkingReadHubs.
type NetworkingReadHubsParams struct {
	// Status The Hub statuses to return, comma delimited.
	//
	// Filter options available: ACTIVE, CREATE_IN_PROGRESS, CREATE_FAILED, UPDATE_IN_PROGRESS, DELETE_IN_PROGRESS, DELETED, DELETE_FAILED
	Status *string `form:"status,omitempty" json:"status,omitempty"`
}

// NetworkingReadHubParams defines parameters for NetworkingReadHub.
type NetworkingReadHubParams struct {
	// Status The Hub statuses to return, comma delimited.
	//
	// Filter options available: ACTIVE, CREATE_IN_PROGRESS, CREATE_FAILED, UPDATE_IN_PROGRESS, DELETE_IN_PROGRESS, DELETED, DELETE_FAILED
	Status *string `form:"status,omitempty" json:"status,omitempty"`
}

// NetworkingReadHubDnsResolversParams defines parameters for NetworkingReadHubDnsResolvers.
type NetworkingReadHubDnsResolversParams struct {
	// Status The Stax DNS Resolver statuses to return, comma delimited.
	//
	// Filter options available: ACTIVE, CREATE_IN_PROGRESS, CREATE_FAILED, DELETE_IN_PROGRESS, DELETED, DELETE_FAILED
	Status *string `form:"status,omitempty" json:"status,omitempty"`
}

// NetworkingReadHubDxAssociationsParams defines parameters for NetworkingReadHubDxAssociations.
type NetworkingReadHubDxAssociationsParams struct {
	// Status The Stax DX Association statuses to return, comma delimited.
	//
	// Filter options available: ACTIVE, CREATE_IN_PROGRESS, CREATE_FAILED, DELETE_IN_PROGRESS, DELETED, DELETE_FAILED
	Status *string `form:"status,omitempty" json:"status,omitempty"`
}

// NetworkingReadHubDxGatewaysParams defines parameters for NetworkingReadHubDxGateways.
type NetworkingReadHubDxGatewaysParams struct {
	// Status The Stax DX Gateway statuses to return, comma delimited.
	//
	// Filter options available: ACTIVE, CREATE_IN_PROGRESS, CREATE_FAILED, DELETE_IN_PROGRESS, DELETED, DELETE_FAILED
	Status *string `form:"status,omitempty" json:"status,omitempty"`
}

// NetworkingReadHubCidrExclusionsParams defines parameters for NetworkingReadHubCidrExclusions.
type NetworkingReadHubCidrExclusionsParams struct {
	// Status The Hub statuses to return, comma delimited.
	//
	// Filter options available: ACTIVE, DELETED
	Status *string `form:"status,omitempty" json:"status,omitempty"`
}

// NetworkingReadHubPrefixListsParams defines parameters for NetworkingReadHubPrefixLists.
type NetworkingReadHubPrefixListsParams struct {
	// Status The Stax Prefix List statuses to return, comma delimited.
	//
	// Filter options available: ACTIVE, CREATE_IN_PROGRESS, CREATE_FAILED, DELETE_IN_PROGRESS, DELETED, DELETE_FAILED, UPDATE_IN_PROGRESS
	Status *string `form:"status,omitempty" json:"status,omitempty"`
}

// NetworkingReadHubCidrRangesParams defines parameters for NetworkingReadHubCidrRanges.
type NetworkingReadHubCidrRangesParams struct {
	// Status The Hub statuses to return, comma delimited.
	//
	// Filter options available: ACTIVE, DELETED
	Status *string `form:"status,omitempty" json:"status,omitempty"`

	// IdFilter List of range ids to fetch, comma delimited.
	IdFilter *string `form:"id_filter,omitempty" json:"id_filter,omitempty"`
}

// NetworkingReadHubVpcsParams defines parameters for NetworkingReadHubVpcs.
type NetworkingReadHubVpcsParams struct {
	// Status The VPC statuses to return, comma delimited.
	//
	// Filter options available: ACTIVE, CREATE_IN_PROGRESS, CREATE_FAILED, DELETE_IN_PROGRESS, DELETED, DELETE_FAILED
	Status *string `form:"status,omitempty" json:"status,omitempty"`

	// Type The VPC type to return, comma delimited.
	//
	// Filter options available: FLAT, ISOLATED, TRANSIT, SHAREDSERVICES
	Type *string `form:"type,omitempty" json:"type,omitempty"`
}

// NetworkingReadHubVpnConnectionsParams defines parameters for NetworkingReadHubVpnConnections.
type NetworkingReadHubVpnConnectionsParams struct {
	// Status The Stax VPN Connections statuses to return, comma delimited.
	//
	// Filter options available: ACTIVE, CREATE_IN_PROGRESS, CREATE_FAILED, DELETE_IN_PROGRESS, DELETED, DELETE_FAILED
	Status *string `form:"status,omitempty" json:"status,omitempty"`
}

// NetworkingReadHubVpnCustomerGatewaysParams defines parameters for NetworkingReadHubVpnCustomerGateways.
type NetworkingReadHubVpnCustomerGatewaysParams struct {
	// Status The Stax VPN Customer Gateways statuses to return, comma delimited.
	//
	// Filter options available: ACTIVE, CREATE_IN_PROGRESS, CREATE_FAILED, DELETE_IN_PROGRESS, DELETED, DELETE_FAILED
	Status *string `form:"status,omitempty" json:"status,omitempty"`
}

// NetworkingReadHubHubPeeringsParams defines parameters for NetworkingReadHubHubPeerings.
type NetworkingReadHubHubPeeringsParams struct {
	// Status The Stax Hub Peering statuses to return, comma delimited.
	//
	// Filter options available: ACTIVE, CREATE_IN_PROGRESS, CREATE_FAILED, PENDING_ACCEPT, DELETE_IN_PROGRESS, DELETED, DELETE_FAILED, UPDATE_IN_PROGRESS
	Status *string `form:"status,omitempty" json:"status,omitempty"`
}

// NetworkingReadPrefixListsParams defines parameters for NetworkingReadPrefixLists.
type NetworkingReadPrefixListsParams struct {
	// Status The Stax Prefix List statuses to return, comma delimited.
	//
	// Filter options available: ACTIVE, CREATE_IN_PROGRESS, CREATE_FAILED, DELETE_IN_PROGRESS, DELETED, DELETE_FAILED, UPDATE_IN_PROGRESS
	Status *string `form:"status,omitempty" json:"status,omitempty"`
}

// NetworkingReadPrefixListParams defines parameters for NetworkingReadPrefixList.
type NetworkingReadPrefixListParams struct {
	// Status The Stax Prefix List statuses to return, comma delimited.
	//
	// Filter options available: ACTIVE, CREATE_IN_PROGRESS, CREATE_FAILED, DELETE_IN_PROGRESS, DELETED, DELETE_FAILED, UPDATE_IN_PROGRESS
	Status *string `form:"status,omitempty" json:"status,omitempty"`
}

// NetworkingReadCidrRangesParams defines parameters for NetworkingReadCidrRanges.
type NetworkingReadCidrRangesParams struct {
	// Status The Hub statuses to return, comma delimited.
	//
	// Filter options available: ACTIVE, DELETED
	Status *string `form:"status,omitempty" json:"status,omitempty"`

	// IdFilter List of range ids to fetch, comma delimited.
	IdFilter *string `form:"id_filter,omitempty" json:"id_filter,omitempty"`
}

// NetworkingReadCidrRangeParams defines parameters for NetworkingReadCidrRange.
type NetworkingReadCidrRangeParams struct {
	// Status The Hub statuses to return, comma delimited.
	//
	// Filter options available: ACTIVE, DELETED
	Status *string `form:"status,omitempty" json:"status,omitempty"`

	// IdFilter List of range ids to fetch, comma delimited.
	IdFilter *string `form:"id_filter,omitempty" json:"id_filter,omitempty"`
}

// NetworkingReadVpcsParams defines parameters for NetworkingReadVpcs.
type NetworkingReadVpcsParams struct {
	// Status The VPC statuses to return, comma delimited.
	//
	// Filter options available: ACTIVE, CREATE_IN_PROGRESS, CREATE_FAILED, DELETE_IN_PROGRESS, DELETED, DELETE_FAILED
	Status *string `form:"status,omitempty" json:"status,omitempty"`

	// Type The VPC type to return, comma delimited.
	//
	// Filter options available: FLAT, ISOLATED, TRANSIT, SHAREDSERVICES
	Type *string `form:"type,omitempty" json:"type,omitempty"`
}

// NetworkingReadVpcParams defines parameters for NetworkingReadVpc.
type NetworkingReadVpcParams struct {
	// Status The VPC statuses to return, comma delimited.
	//
	// Filter options available: ACTIVE, CREATE_IN_PROGRESS, CREATE_FAILED, DELETE_IN_PROGRESS, DELETED, DELETE_FAILED
	Status *string `form:"status,omitempty" json:"status,omitempty"`

	// Type The VPC type to return, comma delimited.
	//
	// Filter options available: FLAT, ISOLATED, TRANSIT, SHAREDSERVICES
	Type *string `form:"type,omitempty" json:"type,omitempty"`
}

// NetworkingReadVpnConnectionsParams defines parameters for NetworkingReadVpnConnections.
type NetworkingReadVpnConnectionsParams struct {
	// Status The Stax VPN Connections statuses to return, comma delimited.
	//
	// Filter options available: ACTIVE, CREATE_IN_PROGRESS, CREATE_FAILED, DELETE_IN_PROGRESS, DELETED, DELETE_FAILED
	Status *string `form:"status,omitempty" json:"status,omitempty"`
}

// NetworkingReadVpnConnectionParams defines parameters for NetworkingReadVpnConnection.
type NetworkingReadVpnConnectionParams struct {
	// Status The Stax VPN Connections statuses to return, comma delimited.
	//
	// Filter options available: ACTIVE, CREATE_IN_PROGRESS, CREATE_FAILED, DELETE_IN_PROGRESS, DELETED, DELETE_FAILED
	Status *string `form:"status,omitempty" json:"status,omitempty"`
}

// NetworkingReadVpnCustomerGatewaysParams defines parameters for NetworkingReadVpnCustomerGateways.
type NetworkingReadVpnCustomerGatewaysParams struct {
	// Status The Stax VPN Customer Gateways statuses to return, comma delimited.
	//
	// Filter options available: ACTIVE, CREATE_IN_PROGRESS, CREATE_FAILED, DELETE_IN_PROGRESS, DELETED, DELETE_FAILED
	Status *string `form:"status,omitempty" json:"status,omitempty"`
}

// NetworkingReadVpnCustomerGatewayParams defines parameters for NetworkingReadVpnCustomerGateway.
type NetworkingReadVpnCustomerGatewayParams struct {
	// Status The Stax VPN Customer Gateways statuses to return, comma delimited.
	//
	// Filter options available: ACTIVE, CREATE_IN_PROGRESS, CREATE_FAILED, DELETE_IN_PROGRESS, DELETED, DELETE_FAILED
	Status *string `form:"status,omitempty" json:"status,omitempty"`
}

// NetworkingReadGatewayVpnConnectionsParams defines parameters for NetworkingReadGatewayVpnConnections.
type NetworkingReadGatewayVpnConnectionsParams struct {
	// Status The Stax VPN Connections statuses to return, comma delimited.
	//
	// Filter options available: ACTIVE, CREATE_IN_PROGRESS, CREATE_FAILED, DELETE_IN_PROGRESS, DELETED, DELETE_FAILED
	Status *string `form:"status,omitempty" json:"status,omitempty"`
}

// NetworkingReadDxConnectionsParams defines parameters for NetworkingReadDxConnections.
type NetworkingReadDxConnectionsParams struct {
	// State The Direct Connect Connection states to return, comma delimited.
	//
	// Filter options available: ordering,requested,pending,available,down,deleting,deleted,rejected,unknown
	State *string `form:"state,omitempty" json:"state,omitempty"`
}

// OrganisationsReadOrganisationalUnitsParams defines parameters for OrganisationsReadOrganisationalUnits.
type OrganisationsReadOrganisationalUnitsParams struct {
	// Status The Stax Organisational Unit statuses to return, comma delimited.
	// Filter options available: ACTIVE, CREATE_IN_PROGRESS, CREATE_FAILED, UPDATE_IN_PROGRESS, DELETE_IN_PROGRESS, DELETE_FAILED, DELETED
	Status *string `form:"status,omitempty" json:"status,omitempty"`
}

// OrganisationsReadPoliciesParams defines parameters for OrganisationsReadPolicies.
type OrganisationsReadPoliciesParams struct {
	// Status The Stax Policy statuses to return, comma delimited.
	//
	// Filter options available: ACTIVE, DELETED
	Status *string `form:"status,omitempty" json:"status,omitempty"`
}

// TeamsReadUsersParams defines parameters for TeamsReadUsers.
type TeamsReadUsersParams struct {
	// Filter List of Users filtered by auth origin, comma delimited.
	//
	// Filter Options available: Team, Federated
	Filter *string `form:"filter,omitempty" json:"filter,omitempty"`

	// IdFilter List of User IDs you want returned, comma delimited.
	IdFilter *string `form:"id_filter,omitempty" json:"id_filter,omitempty"`

	// StatusFilter List of Users filtered by Status, comma delimited.
	//
	// Filter Options available: ACTIVE, NEW, INVITED, DISABLED, DELETED
	//
	// Defaults to: ACTIVE,NEW,INVITED,DISABLED
	StatusFilter *string `form:"status_filter,omitempty" json:"status_filter,omitempty"`
}

// WorkloadsReadCatalogueItemsParams defines parameters for WorkloadsReadCatalogueItems.
type WorkloadsReadCatalogueItemsParams struct {
	// Name The Name of the Workload Catalogue Items to return.
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// Filter List of Workload Catalogue Item statuses you want returned, comma delimited.
	//
	// Filter options available: STARTED, RUNNING, SUCCEEDED, FAILED, TIMED_OUT, ABORTED.
	Filter *string `form:"filter,omitempty" json:"filter,omitempty"`

	// IdFilter List of Workload Catalogue Item IDs you want returned, comma delimited.
	IdFilter *string `form:"id_filter,omitempty" json:"id_filter,omitempty"`

	// Offset Pagination - The page number to return.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Pagination - The number of items per page to return.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Sort The field to sort on.
	Sort *WorkloadsReadCatalogueItemsParamsSort `form:"sort,omitempty" json:"sort,omitempty"`

	// SortOrder The sort order - up or down.
	SortOrder *WorkloadsReadCatalogueItemsParamsSortOrder `form:"sort_order,omitempty" json:"sort_order,omitempty"`

	// IncludeVersions Do you want all Versions?
	IncludeVersions *bool `form:"include_versions,omitempty" json:"include_versions,omitempty"`

	// IncludeParameters Do you want the Parameter dictionary?
	IncludeParameters *bool `form:"include_parameters,omitempty" json:"include_parameters,omitempty"`

	// IncludeTags Do you want all the Tags?
	IncludeTags *bool `form:"include_tags,omitempty" json:"include_tags,omitempty"`
}

// WorkloadsReadCatalogueItemsParamsSort defines parameters for WorkloadsReadCatalogueItems.
type WorkloadsReadCatalogueItemsParamsSort string

// WorkloadsReadCatalogueItemsParamsSortOrder defines parameters for WorkloadsReadCatalogueItems.
type WorkloadsReadCatalogueItemsParamsSortOrder string

// WorkloadsReadCatalogueItemParams defines parameters for WorkloadsReadCatalogueItem.
type WorkloadsReadCatalogueItemParams struct {
	// Name The Name of the Workload Catalogue Items to return.
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// Filter List of Workload Catalogue Item statuses you want returned, comma delimited.
	//
	// Filter options available: STARTED, RUNNING, SUCCEEDED, FAILED, TIMED_OUT, ABORTED.
	Filter *string `form:"filter,omitempty" json:"filter,omitempty"`

	// IdFilter List of Workload Catalogue Item IDs you want returned, comma delimited.
	IdFilter *string `form:"id_filter,omitempty" json:"id_filter,omitempty"`

	// Offset Pagination - The page number to return.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Pagination - The number of items per page to return.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Sort The field to sort on.
	Sort *WorkloadsReadCatalogueItemParamsSort `form:"sort,omitempty" json:"sort,omitempty"`

	// SortOrder The sort order - up or down.
	SortOrder *WorkloadsReadCatalogueItemParamsSortOrder `form:"sort_order,omitempty" json:"sort_order,omitempty"`

	// IncludeVersions Do you want all Versions?
	IncludeVersions *bool `form:"include_versions,omitempty" json:"include_versions,omitempty"`

	// IncludeParameters Do you want the Parameter dictionary?
	IncludeParameters *bool `form:"include_parameters,omitempty" json:"include_parameters,omitempty"`

	// IncludeTags Do you want all the Tags?
	IncludeTags *bool `form:"include_tags,omitempty" json:"include_tags,omitempty"`
}

// WorkloadsReadCatalogueItemParamsSort defines parameters for WorkloadsReadCatalogueItem.
type WorkloadsReadCatalogueItemParamsSort string

// WorkloadsReadCatalogueItemParamsSortOrder defines parameters for WorkloadsReadCatalogueItem.
type WorkloadsReadCatalogueItemParamsSortOrder string

// WorkloadsReadCatalogueVersionParams defines parameters for WorkloadsReadCatalogueVersion.
type WorkloadsReadCatalogueVersionParams struct {
	// IncludeParameters Do you want the Parameter dictionary?
	IncludeParameters *bool `form:"include_parameters,omitempty" json:"include_parameters,omitempty"`
}

// WorkloadsReadWorkloadsParams defines parameters for WorkloadsReadWorkloads.
type WorkloadsReadWorkloadsParams struct {
	// Name The Name of the Workloads to return.
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// Filter Comma delimited list of Stax Workload statuses. Returns all Workloads with this status.
	// Filter Options available: NEW, INITIALIZING, ACTIVE, CREATE_FAILED, DELETE_IN_PROGRESS, DELETED, DELETE_FAILED, UPDATE_IN_PROGRESS, UPDATE_FAILED, UPDATE_COMPLETE.
	Filter *string `form:"filter,omitempty" json:"filter,omitempty"`

	// AccountNames Comma delimited list of Stax Account Names. Returns all Workloads deployed to these Accounts Names.
	AccountNames *string `form:"account_names,omitempty" json:"account_names,omitempty"`

	// AccountTypes Comma delimited list of Stax Account Types. Returns all Workloads deployed to these Account Types.
	AccountTypes *string `form:"account_types,omitempty" json:"account_types,omitempty"`

	// AccountIds Comma delimited list of Stax Account IDs. Returns all Workloads deployed to these Account IDs.
	AccountIds *string `form:"account_ids,omitempty" json:"account_ids,omitempty"`

	// IdFilter Comma delimited list of Stax Workload IDs. Returns all Workloads with these Workload IDs.
	IdFilter *string `form:"id_filter,omitempty" json:"id_filter,omitempty"`

	// CatalogueNames Comma delimited list of Stax Workload Catalogue Names. Returns all Workloads deployed with these Workload Catalogue Names.
	CatalogueNames *string `form:"catalogue_names,omitempty" json:"catalogue_names,omitempty"`

	// CatalogueIds Comma delimited list of Stax Workload Catalogue IDs. Returns all Workloads deployed with these Catalogue IDs.
	CatalogueIds *string `form:"catalogue_ids,omitempty" json:"catalogue_ids,omitempty"`

	// CatalogueVersion Only return Workloads launched from this Stax Workload Catalogue Version (eg. 1.0.0). Requires catalogue_ids
	CatalogueVersion *string `form:"catalogue_version,omitempty" json:"catalogue_version,omitempty"`

	// CatalogueVersionId Only return Workloads launched from this Stax Workload Catalogue Version ID.
	CatalogueVersionId *string `form:"catalogue_version_id,omitempty" json:"catalogue_version_id,omitempty"`

	// Offset Pagination - The page number to return. Must be used with limit
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Pagination - The number of items per page to return. Must be used with offset
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Sort The field to sort on.
	Sort *WorkloadsReadWorkloadsParamsSort `form:"sort,omitempty" json:"sort,omitempty"`

	// SortOrder The sort order - up or down.
	SortOrder *WorkloadsReadWorkloadsParamsSortOrder `form:"sort_order,omitempty" json:"sort_order,omitempty"`
}

// WorkloadsReadWorkloadsParamsSort defines parameters for WorkloadsReadWorkloads.
type WorkloadsReadWorkloadsParamsSort string

// WorkloadsReadWorkloadsParamsSortOrder defines parameters for WorkloadsReadWorkloads.
type WorkloadsReadWorkloadsParamsSortOrder string

// WorkloadsReadWorkloadParams defines parameters for WorkloadsReadWorkload.
type WorkloadsReadWorkloadParams struct {
	// Name The Name of the Workloads to return.
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// Filter Comma delimited list of Stax Workload statuses. Returns all Workloads with this status.
	//
	// Filter Options available: NEW, INITIALIZING, ACTIVE, CREATE_FAILED, DELETE_IN_PROGRESS, DELETED, DELETE_FAILED, UPDATE_IN_PROGRESS, UPDATE_FAILED, UPDATE_COMPLETE.
	Filter *string `form:"filter,omitempty" json:"filter,omitempty"`

	// AccountNames Comma delimited list of Stax Account Names. Returns all Workloads deployed to these Accounts Names.
	AccountNames *string `form:"account_names,omitempty" json:"account_names,omitempty"`

	// AccountTypes Comma delimited list of Stax Account Types. Returns all Workloads deployed to these Account Types.
	AccountTypes *string `form:"account_types,omitempty" json:"account_types,omitempty"`

	// AccountIds Comma delimited list of Stax Account IDs. Returns all Workloads deployed to these Account IDs.
	AccountIds *string `form:"account_ids,omitempty" json:"account_ids,omitempty"`

	// IdFilter Comma delimited list of Stax Workload IDs. Returns all Workloads with these Workload IDs.
	IdFilter *string `form:"id_filter,omitempty" json:"id_filter,omitempty"`

	// CatalogueNames Comma delimited list of Stax Workload Catalogue Names. Returns all Workloads deployed with these Workload Catalogue Names.
	CatalogueNames *string `form:"catalogue_names,omitempty" json:"catalogue_names,omitempty"`

	// CatalogueIds Comma delimited list of Stax Workload Catalogue IDs. Returns all Workloads deployed with these Catalogue IDs.
	CatalogueIds *string `form:"catalogue_ids,omitempty" json:"catalogue_ids,omitempty"`

	// CatalogueVersion Only return Workloads launched from this Stax Workload Catalogue Version (eg. 1.0.0). Requires catalogue_ids
	CatalogueVersion *string `form:"catalogue_version,omitempty" json:"catalogue_version,omitempty"`

	// CatalogueVersionId Only return Workloads launched from this Stax Workload Catalogue Version ID.
	CatalogueVersionId *string `form:"catalogue_version_id,omitempty" json:"catalogue_version_id,omitempty"`

	// Offset Pagination - The page number to return. Must be used with limit
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Pagination - The number of items per page to return. Must be used with offset
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Sort The field to sort on.
	Sort *WorkloadsReadWorkloadParamsSort `form:"sort,omitempty" json:"sort,omitempty"`

	// SortOrder The sort order - up or down.
	SortOrder *WorkloadsReadWorkloadParamsSortOrder `form:"sort_order,omitempty" json:"sort_order,omitempty"`

	// IncludeTags Do you want all the Tags?
	IncludeTags *bool `form:"include_tags,omitempty" json:"include_tags,omitempty"`
}

// WorkloadsReadWorkloadParamsSort defines parameters for WorkloadsReadWorkload.
type WorkloadsReadWorkloadParamsSort string

// WorkloadsReadWorkloadParamsSortOrder defines parameters for WorkloadsReadWorkload.
type WorkloadsReadWorkloadParamsSortOrder string

// AccountsUpdateAccountTypeMembersJSONRequestBody defines body for AccountsUpdateAccountTypeMembers for application/json ContentType.
type AccountsUpdateAccountTypeMembersJSONRequestBody = AccountsUpdateAccountTypeMembers

// AccountsUpdateAccountTypePoliciesJSONRequestBody defines body for AccountsUpdateAccountTypePolicies for application/json ContentType.
type AccountsUpdateAccountTypePoliciesJSONRequestBody = AccountsUpdateAccountTypePolicies

// AccountsCreateAccountJSONRequestBody defines body for AccountsCreateAccount for application/json ContentType.
type AccountsCreateAccountJSONRequestBody = AccountsCreateAccount

// AccountsCloseAccountJSONRequestBody defines body for AccountsCloseAccount for application/json ContentType.
type AccountsCloseAccountJSONRequestBody = AccountsCloseAccount

// AccountsOnboardAccountJSONRequestBody defines body for AccountsOnboardAccount for application/json ContentType.
type AccountsOnboardAccountJSONRequestBody = AccountsOnboardAccount

// AccountsCreateAccountTypeJSONRequestBody defines body for AccountsCreateAccountType for application/json ContentType.
type AccountsCreateAccountTypeJSONRequestBody = AccountsCreateAccountType

// AccountsUpdateAccountTypeAccessJSONRequestBody defines body for AccountsUpdateAccountTypeAccess for application/json ContentType.
type AccountsUpdateAccountTypeAccessJSONRequestBody = AccountsUpdateAccountTypeAccess

// AccountsUpdateAccountTypeJSONRequestBody defines body for AccountsUpdateAccountType for application/json ContentType.
type AccountsUpdateAccountTypeJSONRequestBody = AccountsUpdateAccountType

// AccountsUpdateAccountJSONRequestBody defines body for AccountsUpdateAccount for application/json ContentType.
type AccountsUpdateAccountJSONRequestBody = AccountsUpdateAccount

// TeamsCreateApiTokenJSONRequestBody defines body for TeamsCreateApiToken for application/json ContentType.
type TeamsCreateApiTokenJSONRequestBody = TeamsCreateApiToken

// TeamsUpdateApiTokenJSONRequestBody defines body for TeamsUpdateApiToken for application/json ContentType.
type TeamsUpdateApiTokenJSONRequestBody = TeamsUpdateApiToken

// TeamsCreateGroupJSONRequestBody defines body for TeamsCreateGroup for application/json ContentType.
type TeamsCreateGroupJSONRequestBody = TeamsCreateGroup

// TeamsUpdateGroupMembersJSONRequestBody defines body for TeamsUpdateGroupMembers for application/json ContentType.
type TeamsUpdateGroupMembersJSONRequestBody = TeamsUpdateGroupMembers

// TeamsUpdateGroupJSONRequestBody defines body for TeamsUpdateGroup for application/json ContentType.
type TeamsUpdateGroupJSONRequestBody = TeamsUpdateGroup

// TeamsCreateUserJSONRequestBody defines body for TeamsCreateUser for application/json ContentType.
type TeamsCreateUserJSONRequestBody = TeamsCreateUser

// TeamsUpdateUserJSONRequestBody defines body for TeamsUpdateUser for application/json ContentType.
type TeamsUpdateUserJSONRequestBody = TeamsUpdateUser

// NetworkingUpdateDnsResolverJSONRequestBody defines body for NetworkingUpdateDnsResolver for application/json ContentType.
type NetworkingUpdateDnsResolverJSONRequestBody = NetworkingUpdateDnsResolver

// NetworkingCreateDnsRuleJSONRequestBody defines body for NetworkingCreateDnsRule for application/json ContentType.
type NetworkingCreateDnsRuleJSONRequestBody = NetworkingCreateDnsRule

// NetworkingUpdateDnsRuleJSONRequestBody defines body for NetworkingUpdateDnsRule for application/json ContentType.
type NetworkingUpdateDnsRuleJSONRequestBody = NetworkingUpdateDnsRule

// NetworkingUpdateDxAssociationJSONRequestBody defines body for NetworkingUpdateDxAssociation for application/json ContentType.
type NetworkingUpdateDxAssociationJSONRequestBody = NetworkingUpdateDxAssociation

// NetworkingCreateDxAssociationJSONRequestBody defines body for NetworkingCreateDxAssociation for application/json ContentType.
type NetworkingCreateDxAssociationJSONRequestBody = NetworkingCreateDxAssociation

// NetworkingCreateDxResourceJSONRequestBody defines body for NetworkingCreateDxResource for application/json ContentType.
type NetworkingCreateDxResourceJSONRequestBody = NetworkingCreateDxResource

// NetworkingUpdateDxVifJSONRequestBody defines body for NetworkingUpdateDxVif for application/json ContentType.
type NetworkingUpdateDxVifJSONRequestBody = NetworkingUpdateDxVif

// NetworkingUpdateCidrExclusionJSONRequestBody defines body for NetworkingUpdateCidrExclusion for application/json ContentType.
type NetworkingUpdateCidrExclusionJSONRequestBody = NetworkingUpdateCidrExclusion

// NetworkingUpdateHubPeeringJSONRequestBody defines body for NetworkingUpdateHubPeering for application/json ContentType.
type NetworkingUpdateHubPeeringJSONRequestBody = NetworkingUpdateHubPeering

// NetworkingCreateHubJSONRequestBody defines body for NetworkingCreateHub for application/json ContentType.
type NetworkingCreateHubJSONRequestBody = NetworkingCreateHub

// NetworkingUpdateHubJSONRequestBody defines body for NetworkingUpdateHub for application/json ContentType.
type NetworkingUpdateHubJSONRequestBody = NetworkingUpdateHub

// NetworkingCreateDnsResolverJSONRequestBody defines body for NetworkingCreateDnsResolver for application/json ContentType.
type NetworkingCreateDnsResolverJSONRequestBody = NetworkingCreateDnsResolver

// NetworkingCreateCidrExclusionJSONRequestBody defines body for NetworkingCreateCidrExclusion for application/json ContentType.
type NetworkingCreateCidrExclusionJSONRequestBody = NetworkingCreateCidrExclusion

// NetworkingCreateHubPrefixListJSONRequestBody defines body for NetworkingCreateHubPrefixList for application/json ContentType.
type NetworkingCreateHubPrefixListJSONRequestBody = NetworkingCreateHubPrefixList

// NetworkingCreateVpcPrefixListJSONRequestBody defines body for NetworkingCreateVpcPrefixList for application/json ContentType.
type NetworkingCreateVpcPrefixListJSONRequestBody = NetworkingCreateVpcPrefixList

// NetworkingCreateCidrRangeJSONRequestBody defines body for NetworkingCreateCidrRange for application/json ContentType.
type NetworkingCreateCidrRangeJSONRequestBody = NetworkingCreateCidrRange

// NetworkingCreateVpcJSONRequestBody defines body for NetworkingCreateVpc for application/json ContentType.
type NetworkingCreateVpcJSONRequestBody = NetworkingCreateVpc

// NetworkingCreateHubPeeringJSONRequestBody defines body for NetworkingCreateHubPeering for application/json ContentType.
type NetworkingCreateHubPeeringJSONRequestBody = NetworkingCreateHubPeering

// NetworkingUpdateHubPrefixListAssociationJSONRequestBody defines body for NetworkingUpdateHubPrefixListAssociation for application/json ContentType.
type NetworkingUpdateHubPrefixListAssociationJSONRequestBody = NetworkingUpdateHubPrefixListAssociation

// NetworkingUpdateVpcPrefixListAssociationJSONRequestBody defines body for NetworkingUpdateVpcPrefixListAssociation for application/json ContentType.
type NetworkingUpdateVpcPrefixListAssociationJSONRequestBody = NetworkingUpdateVpcPrefixListAssociation

// NetworkingUpdatePrefixListJSONRequestBody defines body for NetworkingUpdatePrefixList for application/json ContentType.
type NetworkingUpdatePrefixListJSONRequestBody = NetworkingUpdatePrefixList

// NetworkingUpdateCidrRangeJSONRequestBody defines body for NetworkingUpdateCidrRange for application/json ContentType.
type NetworkingUpdateCidrRangeJSONRequestBody = NetworkingUpdateCidrRange

// NetworkingUpdateVpcJSONRequestBody defines body for NetworkingUpdateVpc for application/json ContentType.
type NetworkingUpdateVpcJSONRequestBody = NetworkingUpdateVpc

// NetworkingUpdateVpnConnectionJSONRequestBody defines body for NetworkingUpdateVpnConnection for application/json ContentType.
type NetworkingUpdateVpnConnectionJSONRequestBody = NetworkingUpdateVpnConnection

// NetworkingCreateVpnCustomerGatewayJSONRequestBody defines body for NetworkingCreateVpnCustomerGateway for application/json ContentType.
type NetworkingCreateVpnCustomerGatewayJSONRequestBody = NetworkingCreateVpnCustomerGateway

// NetworkingUpdateVpnCustomerGatewayJSONRequestBody defines body for NetworkingUpdateVpnCustomerGateway for application/json ContentType.
type NetworkingUpdateVpnCustomerGatewayJSONRequestBody = NetworkingUpdateVpnCustomerGateway

// NetworkingCreateVpnConnectionJSONRequestBody defines body for NetworkingCreateVpnConnection for application/json ContentType.
type NetworkingCreateVpnConnectionJSONRequestBody = NetworkingCreateVpnConnection

// OrganisationsCreatePolicyJSONRequestBody defines body for OrganisationsCreatePolicy for application/json ContentType.
type OrganisationsCreatePolicyJSONRequestBody = OrganisationsCreatePolicy

// OrganisationsAttachPolicyJSONRequestBody defines body for OrganisationsAttachPolicy for application/json ContentType.
type OrganisationsAttachPolicyJSONRequestBody = OrganisationsAttachPolicy

// OrganisationsUpdatePolicyJSONRequestBody defines body for OrganisationsUpdatePolicy for application/json ContentType.
type OrganisationsUpdatePolicyJSONRequestBody = OrganisationsUpdatePolicy

// ServicesConfigureSecurityHubJSONRequestBody defines body for ServicesConfigureSecurityHub for application/json ContentType.
type ServicesConfigureSecurityHubJSONRequestBody = ServicesConfigureSecurityHub

// WorkloadsCreateCatalogueItemJSONRequestBody defines body for WorkloadsCreateCatalogueItem for application/json ContentType.
type WorkloadsCreateCatalogueItemJSONRequestBody = WorkloadsCreateCatalogueItem

// WorkloadsCreateCatalogueVersionJSONRequestBody defines body for WorkloadsCreateCatalogueVersion for application/json ContentType.
type WorkloadsCreateCatalogueVersionJSONRequestBody = WorkloadsCreateCatalogueVersion

// WorkloadsUpdateAllJSONRequestBody defines body for WorkloadsUpdateAll for application/json ContentType.
type WorkloadsUpdateAllJSONRequestBody = WorkloadsUpdateAll

// WorkloadsCreateWorkloadJSONRequestBody defines body for WorkloadsCreateWorkload for application/json ContentType.
type WorkloadsCreateWorkloadJSONRequestBody = WorkloadsCreateWorkload

// WorkloadsUpdateWorkloadJSONRequestBody defines body for WorkloadsUpdateWorkload for application/json ContentType.
type WorkloadsUpdateWorkloadJSONRequestBody = WorkloadsUpdateWorkload

// AsAccountTypeAccessMap0 returns the union data inside the AccountTypeAccessMap as a AccountTypeAccessMap0
func (t AccountTypeAccessMap) AsAccountTypeAccessMap0() (AccountTypeAccessMap0, error) {
	var body AccountTypeAccessMap0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAccountTypeAccessMap0 overwrites any union data inside the AccountTypeAccessMap as the provided AccountTypeAccessMap0
func (t *AccountTypeAccessMap) FromAccountTypeAccessMap0(v AccountTypeAccessMap0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAccountTypeAccessMap0 performs a merge with any union data inside the AccountTypeAccessMap, using the provided AccountTypeAccessMap0
func (t *AccountTypeAccessMap) MergeAccountTypeAccessMap0(v AccountTypeAccessMap0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsAccountTypeAccessMap1 returns the union data inside the AccountTypeAccessMap as a AccountTypeAccessMap1
func (t AccountTypeAccessMap) AsAccountTypeAccessMap1() (AccountTypeAccessMap1, error) {
	var body AccountTypeAccessMap1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAccountTypeAccessMap1 overwrites any union data inside the AccountTypeAccessMap as the provided AccountTypeAccessMap1
func (t *AccountTypeAccessMap) FromAccountTypeAccessMap1(v AccountTypeAccessMap1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAccountTypeAccessMap1 performs a merge with any union data inside the AccountTypeAccessMap, using the provided AccountTypeAccessMap1
func (t *AccountTypeAccessMap) MergeAccountTypeAccessMap1(v AccountTypeAccessMap1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsAccountTypeAccessMap2 returns the union data inside the AccountTypeAccessMap as a AccountTypeAccessMap2
func (t AccountTypeAccessMap) AsAccountTypeAccessMap2() (AccountTypeAccessMap2, error) {
	var body AccountTypeAccessMap2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAccountTypeAccessMap2 overwrites any union data inside the AccountTypeAccessMap as the provided AccountTypeAccessMap2
func (t *AccountTypeAccessMap) FromAccountTypeAccessMap2(v AccountTypeAccessMap2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAccountTypeAccessMap2 performs a merge with any union data inside the AccountTypeAccessMap, using the provided AccountTypeAccessMap2
func (t *AccountTypeAccessMap) MergeAccountTypeAccessMap2(v AccountTypeAccessMap2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsAccountTypeAccessMap3 returns the union data inside the AccountTypeAccessMap as a AccountTypeAccessMap3
func (t AccountTypeAccessMap) AsAccountTypeAccessMap3() (AccountTypeAccessMap3, error) {
	var body AccountTypeAccessMap3
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAccountTypeAccessMap3 overwrites any union data inside the AccountTypeAccessMap as the provided AccountTypeAccessMap3
func (t *AccountTypeAccessMap) FromAccountTypeAccessMap3(v AccountTypeAccessMap3) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAccountTypeAccessMap3 performs a merge with any union data inside the AccountTypeAccessMap, using the provided AccountTypeAccessMap3
func (t *AccountTypeAccessMap) MergeAccountTypeAccessMap3(v AccountTypeAccessMap3) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t AccountTypeAccessMap) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	if err != nil {
		return nil, err
	}
	object := make(map[string]json.RawMessage)
	if t.union != nil {
		err = json.Unmarshal(b, &object)
		if err != nil {
			return nil, err
		}
	}

	if t.AccountTypeId != nil {
		object["AccountTypeId"], err = json.Marshal(t.AccountTypeId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'AccountTypeId': %w", err)
		}
	}

	if t.AccountTypeName != nil {
		object["AccountTypeName"], err = json.Marshal(t.AccountTypeName)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'AccountTypeName': %w", err)
		}
	}

	if t.GroupId != nil {
		object["GroupId"], err = json.Marshal(t.GroupId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'GroupId': %w", err)
		}
	}

	if t.GroupName != nil {
		object["GroupName"], err = json.Marshal(t.GroupName)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'GroupName': %w", err)
		}
	}

	if t.RoleName != nil {
		object["RoleName"], err = json.Marshal(t.RoleName)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'RoleName': %w", err)
		}
	}
	b, err = json.Marshal(object)
	return b, err
}

func (t *AccountTypeAccessMap) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	if err != nil {
		return err
	}
	object := make(map[string]json.RawMessage)
	err = json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["AccountTypeId"]; found {
		err = json.Unmarshal(raw, &t.AccountTypeId)
		if err != nil {
			return fmt.Errorf("error reading 'AccountTypeId': %w", err)
		}
	}

	if raw, found := object["AccountTypeName"]; found {
		err = json.Unmarshal(raw, &t.AccountTypeName)
		if err != nil {
			return fmt.Errorf("error reading 'AccountTypeName': %w", err)
		}
	}

	if raw, found := object["GroupId"]; found {
		err = json.Unmarshal(raw, &t.GroupId)
		if err != nil {
			return fmt.Errorf("error reading 'GroupId': %w", err)
		}
	}

	if raw, found := object["GroupName"]; found {
		err = json.Unmarshal(raw, &t.GroupName)
		if err != nil {
			return fmt.Errorf("error reading 'GroupName': %w", err)
		}
	}

	if raw, found := object["RoleName"]; found {
		err = json.Unmarshal(raw, &t.RoleName)
		if err != nil {
			return fmt.Errorf("error reading 'RoleName': %w", err)
		}
	}

	return err
}

// AsAccountTypeMemberMap0 returns the union data inside the AccountTypeMemberMap as a AccountTypeMemberMap0
func (t AccountTypeMemberMap) AsAccountTypeMemberMap0() (AccountTypeMemberMap0, error) {
	var body AccountTypeMemberMap0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAccountTypeMemberMap0 overwrites any union data inside the AccountTypeMemberMap as the provided AccountTypeMemberMap0
func (t *AccountTypeMemberMap) FromAccountTypeMemberMap0(v AccountTypeMemberMap0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAccountTypeMemberMap0 performs a merge with any union data inside the AccountTypeMemberMap, using the provided AccountTypeMemberMap0
func (t *AccountTypeMemberMap) MergeAccountTypeMemberMap0(v AccountTypeMemberMap0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsAccountTypeMemberMap1 returns the union data inside the AccountTypeMemberMap as a AccountTypeMemberMap1
func (t AccountTypeMemberMap) AsAccountTypeMemberMap1() (AccountTypeMemberMap1, error) {
	var body AccountTypeMemberMap1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAccountTypeMemberMap1 overwrites any union data inside the AccountTypeMemberMap as the provided AccountTypeMemberMap1
func (t *AccountTypeMemberMap) FromAccountTypeMemberMap1(v AccountTypeMemberMap1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAccountTypeMemberMap1 performs a merge with any union data inside the AccountTypeMemberMap, using the provided AccountTypeMemberMap1
func (t *AccountTypeMemberMap) MergeAccountTypeMemberMap1(v AccountTypeMemberMap1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t AccountTypeMemberMap) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	if err != nil {
		return nil, err
	}
	object := make(map[string]json.RawMessage)
	if t.union != nil {
		err = json.Unmarshal(b, &object)
		if err != nil {
			return nil, err
		}
	}

	if t.AccountId != nil {
		object["AccountId"], err = json.Marshal(t.AccountId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'AccountId': %w", err)
		}
	}

	if t.AccountTypeId != nil {
		object["AccountTypeId"], err = json.Marshal(t.AccountTypeId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'AccountTypeId': %w", err)
		}
	}

	if t.AccountTypeName != nil {
		object["AccountTypeName"], err = json.Marshal(t.AccountTypeName)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'AccountTypeName': %w", err)
		}
	}
	b, err = json.Marshal(object)
	return b, err
}

func (t *AccountTypeMemberMap) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	if err != nil {
		return err
	}
	object := make(map[string]json.RawMessage)
	err = json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["AccountId"]; found {
		err = json.Unmarshal(raw, &t.AccountId)
		if err != nil {
			return fmt.Errorf("error reading 'AccountId': %w", err)
		}
	}

	if raw, found := object["AccountTypeId"]; found {
		err = json.Unmarshal(raw, &t.AccountTypeId)
		if err != nil {
			return fmt.Errorf("error reading 'AccountTypeId': %w", err)
		}
	}

	if raw, found := object["AccountTypeName"]; found {
		err = json.Unmarshal(raw, &t.AccountTypeName)
		if err != nil {
			return fmt.Errorf("error reading 'AccountTypeName': %w", err)
		}
	}

	return err
}

// AsAccountTypePolicyMap0 returns the union data inside the AccountTypePolicyMap as a AccountTypePolicyMap0
func (t AccountTypePolicyMap) AsAccountTypePolicyMap0() (AccountTypePolicyMap0, error) {
	var body AccountTypePolicyMap0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAccountTypePolicyMap0 overwrites any union data inside the AccountTypePolicyMap as the provided AccountTypePolicyMap0
func (t *AccountTypePolicyMap) FromAccountTypePolicyMap0(v AccountTypePolicyMap0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAccountTypePolicyMap0 performs a merge with any union data inside the AccountTypePolicyMap, using the provided AccountTypePolicyMap0
func (t *AccountTypePolicyMap) MergeAccountTypePolicyMap0(v AccountTypePolicyMap0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsAccountTypePolicyMap1 returns the union data inside the AccountTypePolicyMap as a AccountTypePolicyMap1
func (t AccountTypePolicyMap) AsAccountTypePolicyMap1() (AccountTypePolicyMap1, error) {
	var body AccountTypePolicyMap1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAccountTypePolicyMap1 overwrites any union data inside the AccountTypePolicyMap as the provided AccountTypePolicyMap1
func (t *AccountTypePolicyMap) FromAccountTypePolicyMap1(v AccountTypePolicyMap1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAccountTypePolicyMap1 performs a merge with any union data inside the AccountTypePolicyMap, using the provided AccountTypePolicyMap1
func (t *AccountTypePolicyMap) MergeAccountTypePolicyMap1(v AccountTypePolicyMap1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t AccountTypePolicyMap) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	if err != nil {
		return nil, err
	}
	object := make(map[string]json.RawMessage)
	if t.union != nil {
		err = json.Unmarshal(b, &object)
		if err != nil {
			return nil, err
		}
	}

	if t.AccountTypeId != nil {
		object["AccountTypeId"], err = json.Marshal(t.AccountTypeId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'AccountTypeId': %w", err)
		}
	}

	if t.AccountTypeName != nil {
		object["AccountTypeName"], err = json.Marshal(t.AccountTypeName)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'AccountTypeName': %w", err)
		}
	}

	if t.PolicyId != nil {
		object["PolicyId"], err = json.Marshal(t.PolicyId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'PolicyId': %w", err)
		}
	}
	b, err = json.Marshal(object)
	return b, err
}

func (t *AccountTypePolicyMap) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	if err != nil {
		return err
	}
	object := make(map[string]json.RawMessage)
	err = json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["AccountTypeId"]; found {
		err = json.Unmarshal(raw, &t.AccountTypeId)
		if err != nil {
			return fmt.Errorf("error reading 'AccountTypeId': %w", err)
		}
	}

	if raw, found := object["AccountTypeName"]; found {
		err = json.Unmarshal(raw, &t.AccountTypeName)
		if err != nil {
			return fmt.Errorf("error reading 'AccountTypeName': %w", err)
		}
	}

	if raw, found := object["PolicyId"]; found {
		err = json.Unmarshal(raw, &t.PolicyId)
		if err != nil {
			return fmt.Errorf("error reading 'PolicyId': %w", err)
		}
	}

	return err
}

// AsGuardDutyConfigurationFeaturesEBSMALWAREPROTECTIONScanResourceCriteria0 returns the union data inside the GuardDutyConfiguration_Features_EBSMALWAREPROTECTION_ScanResourceCriteria as a GuardDutyConfigurationFeaturesEBSMALWAREPROTECTIONScanResourceCriteria0
func (t GuardDutyConfiguration_Features_EBSMALWAREPROTECTION_ScanResourceCriteria) AsGuardDutyConfigurationFeaturesEBSMALWAREPROTECTIONScanResourceCriteria0() (GuardDutyConfigurationFeaturesEBSMALWAREPROTECTIONScanResourceCriteria0, error) {
	var body GuardDutyConfigurationFeaturesEBSMALWAREPROTECTIONScanResourceCriteria0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGuardDutyConfigurationFeaturesEBSMALWAREPROTECTIONScanResourceCriteria0 overwrites any union data inside the GuardDutyConfiguration_Features_EBSMALWAREPROTECTION_ScanResourceCriteria as the provided GuardDutyConfigurationFeaturesEBSMALWAREPROTECTIONScanResourceCriteria0
func (t *GuardDutyConfiguration_Features_EBSMALWAREPROTECTION_ScanResourceCriteria) FromGuardDutyConfigurationFeaturesEBSMALWAREPROTECTIONScanResourceCriteria0(v GuardDutyConfigurationFeaturesEBSMALWAREPROTECTIONScanResourceCriteria0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGuardDutyConfigurationFeaturesEBSMALWAREPROTECTIONScanResourceCriteria0 performs a merge with any union data inside the GuardDutyConfiguration_Features_EBSMALWAREPROTECTION_ScanResourceCriteria, using the provided GuardDutyConfigurationFeaturesEBSMALWAREPROTECTIONScanResourceCriteria0
func (t *GuardDutyConfiguration_Features_EBSMALWAREPROTECTION_ScanResourceCriteria) MergeGuardDutyConfigurationFeaturesEBSMALWAREPROTECTIONScanResourceCriteria0(v GuardDutyConfigurationFeaturesEBSMALWAREPROTECTIONScanResourceCriteria0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsGuardDutyConfigurationFeaturesEBSMALWAREPROTECTIONScanResourceCriteria1 returns the union data inside the GuardDutyConfiguration_Features_EBSMALWAREPROTECTION_ScanResourceCriteria as a GuardDutyConfigurationFeaturesEBSMALWAREPROTECTIONScanResourceCriteria1
func (t GuardDutyConfiguration_Features_EBSMALWAREPROTECTION_ScanResourceCriteria) AsGuardDutyConfigurationFeaturesEBSMALWAREPROTECTIONScanResourceCriteria1() (GuardDutyConfigurationFeaturesEBSMALWAREPROTECTIONScanResourceCriteria1, error) {
	var body GuardDutyConfigurationFeaturesEBSMALWAREPROTECTIONScanResourceCriteria1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGuardDutyConfigurationFeaturesEBSMALWAREPROTECTIONScanResourceCriteria1 overwrites any union data inside the GuardDutyConfiguration_Features_EBSMALWAREPROTECTION_ScanResourceCriteria as the provided GuardDutyConfigurationFeaturesEBSMALWAREPROTECTIONScanResourceCriteria1
func (t *GuardDutyConfiguration_Features_EBSMALWAREPROTECTION_ScanResourceCriteria) FromGuardDutyConfigurationFeaturesEBSMALWAREPROTECTIONScanResourceCriteria1(v GuardDutyConfigurationFeaturesEBSMALWAREPROTECTIONScanResourceCriteria1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGuardDutyConfigurationFeaturesEBSMALWAREPROTECTIONScanResourceCriteria1 performs a merge with any union data inside the GuardDutyConfiguration_Features_EBSMALWAREPROTECTION_ScanResourceCriteria, using the provided GuardDutyConfigurationFeaturesEBSMALWAREPROTECTIONScanResourceCriteria1
func (t *GuardDutyConfiguration_Features_EBSMALWAREPROTECTION_ScanResourceCriteria) MergeGuardDutyConfigurationFeaturesEBSMALWAREPROTECTIONScanResourceCriteria1(v GuardDutyConfigurationFeaturesEBSMALWAREPROTECTIONScanResourceCriteria1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t GuardDutyConfiguration_Features_EBSMALWAREPROTECTION_ScanResourceCriteria) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *GuardDutyConfiguration_Features_EBSMALWAREPROTECTION_ScanResourceCriteria) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMessageEventDetail0 returns the union data inside the MessageEventDetail as a MessageEventDetail0
func (t MessageEventDetail) AsMessageEventDetail0() (MessageEventDetail0, error) {
	var body MessageEventDetail0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMessageEventDetail0 overwrites any union data inside the MessageEventDetail as the provided MessageEventDetail0
func (t *MessageEventDetail) FromMessageEventDetail0(v MessageEventDetail0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMessageEventDetail0 performs a merge with any union data inside the MessageEventDetail, using the provided MessageEventDetail0
func (t *MessageEventDetail) MergeMessageEventDetail0(v MessageEventDetail0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMessageEventDetail1 returns the union data inside the MessageEventDetail as a MessageEventDetail1
func (t MessageEventDetail) AsMessageEventDetail1() (MessageEventDetail1, error) {
	var body MessageEventDetail1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMessageEventDetail1 overwrites any union data inside the MessageEventDetail as the provided MessageEventDetail1
func (t *MessageEventDetail) FromMessageEventDetail1(v MessageEventDetail1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMessageEventDetail1 performs a merge with any union data inside the MessageEventDetail, using the provided MessageEventDetail1
func (t *MessageEventDetail) MergeMessageEventDetail1(v MessageEventDetail1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MessageEventDetail) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MessageEventDetail) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsAccountsCreateAccountAccountType0 returns the union data inside the AccountsCreateAccount_AccountType as a AccountsCreateAccountAccountType0
func (t AccountsCreateAccount_AccountType) AsAccountsCreateAccountAccountType0() (AccountsCreateAccountAccountType0, error) {
	var body AccountsCreateAccountAccountType0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAccountsCreateAccountAccountType0 overwrites any union data inside the AccountsCreateAccount_AccountType as the provided AccountsCreateAccountAccountType0
func (t *AccountsCreateAccount_AccountType) FromAccountsCreateAccountAccountType0(v AccountsCreateAccountAccountType0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAccountsCreateAccountAccountType0 performs a merge with any union data inside the AccountsCreateAccount_AccountType, using the provided AccountsCreateAccountAccountType0
func (t *AccountsCreateAccount_AccountType) MergeAccountsCreateAccountAccountType0(v AccountsCreateAccountAccountType0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsRoUuidv4 returns the union data inside the AccountsCreateAccount_AccountType as a RoUuidv4
func (t AccountsCreateAccount_AccountType) AsRoUuidv4() (RoUuidv4, error) {
	var body RoUuidv4
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRoUuidv4 overwrites any union data inside the AccountsCreateAccount_AccountType as the provided RoUuidv4
func (t *AccountsCreateAccount_AccountType) FromRoUuidv4(v RoUuidv4) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRoUuidv4 performs a merge with any union data inside the AccountsCreateAccount_AccountType, using the provided RoUuidv4
func (t *AccountsCreateAccount_AccountType) MergeRoUuidv4(v RoUuidv4) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t AccountsCreateAccount_AccountType) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *AccountsCreateAccount_AccountType) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsAccountsCreateAccountResponseDetailAccountAccountType0 returns the union data inside the AccountsCreateAccountResponse_Detail_Account_AccountType as a AccountsCreateAccountResponseDetailAccountAccountType0
func (t AccountsCreateAccountResponse_Detail_Account_AccountType) AsAccountsCreateAccountResponseDetailAccountAccountType0() (AccountsCreateAccountResponseDetailAccountAccountType0, error) {
	var body AccountsCreateAccountResponseDetailAccountAccountType0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAccountsCreateAccountResponseDetailAccountAccountType0 overwrites any union data inside the AccountsCreateAccountResponse_Detail_Account_AccountType as the provided AccountsCreateAccountResponseDetailAccountAccountType0
func (t *AccountsCreateAccountResponse_Detail_Account_AccountType) FromAccountsCreateAccountResponseDetailAccountAccountType0(v AccountsCreateAccountResponseDetailAccountAccountType0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAccountsCreateAccountResponseDetailAccountAccountType0 performs a merge with any union data inside the AccountsCreateAccountResponse_Detail_Account_AccountType, using the provided AccountsCreateAccountResponseDetailAccountAccountType0
func (t *AccountsCreateAccountResponse_Detail_Account_AccountType) MergeAccountsCreateAccountResponseDetailAccountAccountType0(v AccountsCreateAccountResponseDetailAccountAccountType0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsRoUuidv4 returns the union data inside the AccountsCreateAccountResponse_Detail_Account_AccountType as a RoUuidv4
func (t AccountsCreateAccountResponse_Detail_Account_AccountType) AsRoUuidv4() (RoUuidv4, error) {
	var body RoUuidv4
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRoUuidv4 overwrites any union data inside the AccountsCreateAccountResponse_Detail_Account_AccountType as the provided RoUuidv4
func (t *AccountsCreateAccountResponse_Detail_Account_AccountType) FromRoUuidv4(v RoUuidv4) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRoUuidv4 performs a merge with any union data inside the AccountsCreateAccountResponse_Detail_Account_AccountType, using the provided RoUuidv4
func (t *AccountsCreateAccountResponse_Detail_Account_AccountType) MergeRoUuidv4(v RoUuidv4) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t AccountsCreateAccountResponse_Detail_Account_AccountType) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *AccountsCreateAccountResponse_Detail_Account_AccountType) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsAccountsOnboardAccountAccountType0 returns the union data inside the AccountsOnboardAccount_AccountType as a AccountsOnboardAccountAccountType0
func (t AccountsOnboardAccount_AccountType) AsAccountsOnboardAccountAccountType0() (AccountsOnboardAccountAccountType0, error) {
	var body AccountsOnboardAccountAccountType0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAccountsOnboardAccountAccountType0 overwrites any union data inside the AccountsOnboardAccount_AccountType as the provided AccountsOnboardAccountAccountType0
func (t *AccountsOnboardAccount_AccountType) FromAccountsOnboardAccountAccountType0(v AccountsOnboardAccountAccountType0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAccountsOnboardAccountAccountType0 performs a merge with any union data inside the AccountsOnboardAccount_AccountType, using the provided AccountsOnboardAccountAccountType0
func (t *AccountsOnboardAccount_AccountType) MergeAccountsOnboardAccountAccountType0(v AccountsOnboardAccountAccountType0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsUuidv4 returns the union data inside the AccountsOnboardAccount_AccountType as a Uuidv4
func (t AccountsOnboardAccount_AccountType) AsUuidv4() (Uuidv4, error) {
	var body Uuidv4
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUuidv4 overwrites any union data inside the AccountsOnboardAccount_AccountType as the provided Uuidv4
func (t *AccountsOnboardAccount_AccountType) FromUuidv4(v Uuidv4) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUuidv4 performs a merge with any union data inside the AccountsOnboardAccount_AccountType, using the provided Uuidv4
func (t *AccountsOnboardAccount_AccountType) MergeUuidv4(v Uuidv4) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t AccountsOnboardAccount_AccountType) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *AccountsOnboardAccount_AccountType) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsTransitAssociation returns the union data inside the NetworkingCreateDxAssociation as a TransitAssociation
func (t NetworkingCreateDxAssociation) AsTransitAssociation() (TransitAssociation, error) {
	var body TransitAssociation
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTransitAssociation overwrites any union data inside the NetworkingCreateDxAssociation as the provided TransitAssociation
func (t *NetworkingCreateDxAssociation) FromTransitAssociation(v TransitAssociation) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTransitAssociation performs a merge with any union data inside the NetworkingCreateDxAssociation, using the provided TransitAssociation
func (t *NetworkingCreateDxAssociation) MergeTransitAssociation(v TransitAssociation) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsPrivateAssociation returns the union data inside the NetworkingCreateDxAssociation as a PrivateAssociation
func (t NetworkingCreateDxAssociation) AsPrivateAssociation() (PrivateAssociation, error) {
	var body PrivateAssociation
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPrivateAssociation overwrites any union data inside the NetworkingCreateDxAssociation as the provided PrivateAssociation
func (t *NetworkingCreateDxAssociation) FromPrivateAssociation(v PrivateAssociation) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePrivateAssociation performs a merge with any union data inside the NetworkingCreateDxAssociation, using the provided PrivateAssociation
func (t *NetworkingCreateDxAssociation) MergePrivateAssociation(v PrivateAssociation) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t NetworkingCreateDxAssociation) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *NetworkingCreateDxAssociation) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsHubConnection returns the union data inside the NetworkingCreateVpnConnection as a HubConnection
func (t NetworkingCreateVpnConnection) AsHubConnection() (HubConnection, error) {
	var body HubConnection
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromHubConnection overwrites any union data inside the NetworkingCreateVpnConnection as the provided HubConnection
func (t *NetworkingCreateVpnConnection) FromHubConnection(v HubConnection) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeHubConnection performs a merge with any union data inside the NetworkingCreateVpnConnection, using the provided HubConnection
func (t *NetworkingCreateVpnConnection) MergeHubConnection(v HubConnection) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsVpcConnection returns the union data inside the NetworkingCreateVpnConnection as a VpcConnection
func (t NetworkingCreateVpnConnection) AsVpcConnection() (VpcConnection, error) {
	var body VpcConnection
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVpcConnection overwrites any union data inside the NetworkingCreateVpnConnection as the provided VpcConnection
func (t *NetworkingCreateVpnConnection) FromVpcConnection(v VpcConnection) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVpcConnection performs a merge with any union data inside the NetworkingCreateVpnConnection, using the provided VpcConnection
func (t *NetworkingCreateVpnConnection) MergeVpcConnection(v VpcConnection) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t NetworkingCreateVpnConnection) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *NetworkingCreateVpnConnection) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}
