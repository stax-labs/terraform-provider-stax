// Code generated by mockery v2.28.2. DO NOT EDIT.

package mocks

import (
	context "context"

	client "github.com/stax-labs/terraform-provider-stax/internal/api/openapi/client"

	io "io"

	mock "github.com/stretchr/testify/mock"

	models "github.com/stax-labs/terraform-provider-stax/internal/api/openapi/models"
)

// ClientWithResponsesInterface is an autogenerated mock type for the ClientWithResponsesInterface type
type ClientWithResponsesInterface struct {
	mock.Mock
}

// AccountsCloseAccountWithBodyWithResponse provides a mock function with given fields: ctx, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) AccountsCloseAccountWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*client.AccountsCloseAccountResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.AccountsCloseAccountResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...client.RequestEditorFn) (*client.AccountsCloseAccountResp, error)); ok {
		return rf(ctx, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...client.RequestEditorFn) *client.AccountsCloseAccountResp); ok {
		r0 = rf(ctx, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.AccountsCloseAccountResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, io.Reader, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AccountsCloseAccountWithResponse provides a mock function with given fields: ctx, body, reqEditors
func (_m *ClientWithResponsesInterface) AccountsCloseAccountWithResponse(ctx context.Context, body models.AccountsCloseAccount, reqEditors ...client.RequestEditorFn) (*client.AccountsCloseAccountResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.AccountsCloseAccountResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.AccountsCloseAccount, ...client.RequestEditorFn) (*client.AccountsCloseAccountResp, error)); ok {
		return rf(ctx, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.AccountsCloseAccount, ...client.RequestEditorFn) *client.AccountsCloseAccountResp); ok {
		r0 = rf(ctx, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.AccountsCloseAccountResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.AccountsCloseAccount, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AccountsCreateAccountTypeWithBodyWithResponse provides a mock function with given fields: ctx, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) AccountsCreateAccountTypeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*client.AccountsCreateAccountTypeResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.AccountsCreateAccountTypeResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...client.RequestEditorFn) (*client.AccountsCreateAccountTypeResp, error)); ok {
		return rf(ctx, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...client.RequestEditorFn) *client.AccountsCreateAccountTypeResp); ok {
		r0 = rf(ctx, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.AccountsCreateAccountTypeResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, io.Reader, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AccountsCreateAccountTypeWithResponse provides a mock function with given fields: ctx, body, reqEditors
func (_m *ClientWithResponsesInterface) AccountsCreateAccountTypeWithResponse(ctx context.Context, body models.AccountsCreateAccountType, reqEditors ...client.RequestEditorFn) (*client.AccountsCreateAccountTypeResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.AccountsCreateAccountTypeResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.AccountsCreateAccountType, ...client.RequestEditorFn) (*client.AccountsCreateAccountTypeResp, error)); ok {
		return rf(ctx, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.AccountsCreateAccountType, ...client.RequestEditorFn) *client.AccountsCreateAccountTypeResp); ok {
		r0 = rf(ctx, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.AccountsCreateAccountTypeResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.AccountsCreateAccountType, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AccountsCreateAccountWithBodyWithResponse provides a mock function with given fields: ctx, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) AccountsCreateAccountWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*client.AccountsCreateAccountResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.AccountsCreateAccountResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...client.RequestEditorFn) (*client.AccountsCreateAccountResp, error)); ok {
		return rf(ctx, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...client.RequestEditorFn) *client.AccountsCreateAccountResp); ok {
		r0 = rf(ctx, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.AccountsCreateAccountResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, io.Reader, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AccountsCreateAccountWithResponse provides a mock function with given fields: ctx, body, reqEditors
func (_m *ClientWithResponsesInterface) AccountsCreateAccountWithResponse(ctx context.Context, body models.AccountsCreateAccount, reqEditors ...client.RequestEditorFn) (*client.AccountsCreateAccountResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.AccountsCreateAccountResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.AccountsCreateAccount, ...client.RequestEditorFn) (*client.AccountsCreateAccountResp, error)); ok {
		return rf(ctx, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.AccountsCreateAccount, ...client.RequestEditorFn) *client.AccountsCreateAccountResp); ok {
		r0 = rf(ctx, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.AccountsCreateAccountResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.AccountsCreateAccount, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AccountsDeleteAccountTypeWithResponse provides a mock function with given fields: ctx, accountTypeId, reqEditors
func (_m *ClientWithResponsesInterface) AccountsDeleteAccountTypeWithResponse(ctx context.Context, accountTypeId string, reqEditors ...client.RequestEditorFn) (*client.AccountsDeleteAccountTypeResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, accountTypeId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.AccountsDeleteAccountTypeResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...client.RequestEditorFn) (*client.AccountsDeleteAccountTypeResp, error)); ok {
		return rf(ctx, accountTypeId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...client.RequestEditorFn) *client.AccountsDeleteAccountTypeResp); ok {
		r0 = rf(ctx, accountTypeId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.AccountsDeleteAccountTypeResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, accountTypeId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AccountsDiscoverAccountWithResponse provides a mock function with given fields: ctx, awsAccountId, reqEditors
func (_m *ClientWithResponsesInterface) AccountsDiscoverAccountWithResponse(ctx context.Context, awsAccountId string, reqEditors ...client.RequestEditorFn) (*client.AccountsDiscoverAccountResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, awsAccountId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.AccountsDiscoverAccountResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...client.RequestEditorFn) (*client.AccountsDiscoverAccountResp, error)); ok {
		return rf(ctx, awsAccountId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...client.RequestEditorFn) *client.AccountsDiscoverAccountResp); ok {
		r0 = rf(ctx, awsAccountId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.AccountsDiscoverAccountResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, awsAccountId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AccountsDiscoverAccountsWithResponse provides a mock function with given fields: ctx, reqEditors
func (_m *ClientWithResponsesInterface) AccountsDiscoverAccountsWithResponse(ctx context.Context, reqEditors ...client.RequestEditorFn) (*client.AccountsDiscoverAccountsResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.AccountsDiscoverAccountsResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...client.RequestEditorFn) (*client.AccountsDiscoverAccountsResp, error)); ok {
		return rf(ctx, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...client.RequestEditorFn) *client.AccountsDiscoverAccountsResp); ok {
		r0 = rf(ctx, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.AccountsDiscoverAccountsResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AccountsOnboardAccountWithBodyWithResponse provides a mock function with given fields: ctx, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) AccountsOnboardAccountWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*client.AccountsOnboardAccountResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.AccountsOnboardAccountResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...client.RequestEditorFn) (*client.AccountsOnboardAccountResp, error)); ok {
		return rf(ctx, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...client.RequestEditorFn) *client.AccountsOnboardAccountResp); ok {
		r0 = rf(ctx, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.AccountsOnboardAccountResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, io.Reader, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AccountsOnboardAccountWithResponse provides a mock function with given fields: ctx, body, reqEditors
func (_m *ClientWithResponsesInterface) AccountsOnboardAccountWithResponse(ctx context.Context, body models.AccountsOnboardAccount, reqEditors ...client.RequestEditorFn) (*client.AccountsOnboardAccountResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.AccountsOnboardAccountResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.AccountsOnboardAccount, ...client.RequestEditorFn) (*client.AccountsOnboardAccountResp, error)); ok {
		return rf(ctx, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.AccountsOnboardAccount, ...client.RequestEditorFn) *client.AccountsOnboardAccountResp); ok {
		r0 = rf(ctx, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.AccountsOnboardAccountResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.AccountsOnboardAccount, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AccountsReadAccountTypeWithResponse provides a mock function with given fields: ctx, accountTypeId, params, reqEditors
func (_m *ClientWithResponsesInterface) AccountsReadAccountTypeWithResponse(ctx context.Context, accountTypeId string, params *models.AccountsReadAccountTypeParams, reqEditors ...client.RequestEditorFn) (*client.AccountsReadAccountTypeResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, accountTypeId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.AccountsReadAccountTypeResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *models.AccountsReadAccountTypeParams, ...client.RequestEditorFn) (*client.AccountsReadAccountTypeResp, error)); ok {
		return rf(ctx, accountTypeId, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *models.AccountsReadAccountTypeParams, ...client.RequestEditorFn) *client.AccountsReadAccountTypeResp); ok {
		r0 = rf(ctx, accountTypeId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.AccountsReadAccountTypeResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *models.AccountsReadAccountTypeParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, accountTypeId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AccountsReadAccountTypesWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *ClientWithResponsesInterface) AccountsReadAccountTypesWithResponse(ctx context.Context, params *models.AccountsReadAccountTypesParams, reqEditors ...client.RequestEditorFn) (*client.AccountsReadAccountTypesResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.AccountsReadAccountTypesResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.AccountsReadAccountTypesParams, ...client.RequestEditorFn) (*client.AccountsReadAccountTypesResp, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.AccountsReadAccountTypesParams, ...client.RequestEditorFn) *client.AccountsReadAccountTypesResp); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.AccountsReadAccountTypesResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.AccountsReadAccountTypesParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AccountsReadAccountWithResponse provides a mock function with given fields: ctx, accountId, params, reqEditors
func (_m *ClientWithResponsesInterface) AccountsReadAccountWithResponse(ctx context.Context, accountId string, params *models.AccountsReadAccountParams, reqEditors ...client.RequestEditorFn) (*client.AccountsReadAccountResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, accountId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.AccountsReadAccountResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *models.AccountsReadAccountParams, ...client.RequestEditorFn) (*client.AccountsReadAccountResp, error)); ok {
		return rf(ctx, accountId, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *models.AccountsReadAccountParams, ...client.RequestEditorFn) *client.AccountsReadAccountResp); ok {
		r0 = rf(ctx, accountId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.AccountsReadAccountResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *models.AccountsReadAccountParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, accountId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AccountsReadAccountsWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *ClientWithResponsesInterface) AccountsReadAccountsWithResponse(ctx context.Context, params *models.AccountsReadAccountsParams, reqEditors ...client.RequestEditorFn) (*client.AccountsReadAccountsResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.AccountsReadAccountsResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.AccountsReadAccountsParams, ...client.RequestEditorFn) (*client.AccountsReadAccountsResp, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.AccountsReadAccountsParams, ...client.RequestEditorFn) *client.AccountsReadAccountsResp); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.AccountsReadAccountsResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.AccountsReadAccountsParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AccountsUpdateAccountTypeAccessWithBodyWithResponse provides a mock function with given fields: ctx, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) AccountsUpdateAccountTypeAccessWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*client.AccountsUpdateAccountTypeAccessResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.AccountsUpdateAccountTypeAccessResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...client.RequestEditorFn) (*client.AccountsUpdateAccountTypeAccessResp, error)); ok {
		return rf(ctx, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...client.RequestEditorFn) *client.AccountsUpdateAccountTypeAccessResp); ok {
		r0 = rf(ctx, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.AccountsUpdateAccountTypeAccessResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, io.Reader, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AccountsUpdateAccountTypeAccessWithResponse provides a mock function with given fields: ctx, body, reqEditors
func (_m *ClientWithResponsesInterface) AccountsUpdateAccountTypeAccessWithResponse(ctx context.Context, body models.AccountsUpdateAccountTypeAccess, reqEditors ...client.RequestEditorFn) (*client.AccountsUpdateAccountTypeAccessResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.AccountsUpdateAccountTypeAccessResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.AccountsUpdateAccountTypeAccess, ...client.RequestEditorFn) (*client.AccountsUpdateAccountTypeAccessResp, error)); ok {
		return rf(ctx, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.AccountsUpdateAccountTypeAccess, ...client.RequestEditorFn) *client.AccountsUpdateAccountTypeAccessResp); ok {
		r0 = rf(ctx, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.AccountsUpdateAccountTypeAccessResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.AccountsUpdateAccountTypeAccess, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AccountsUpdateAccountTypeMembersWithBodyWithResponse provides a mock function with given fields: ctx, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) AccountsUpdateAccountTypeMembersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*client.AccountsUpdateAccountTypeMembersResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.AccountsUpdateAccountTypeMembersResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...client.RequestEditorFn) (*client.AccountsUpdateAccountTypeMembersResp, error)); ok {
		return rf(ctx, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...client.RequestEditorFn) *client.AccountsUpdateAccountTypeMembersResp); ok {
		r0 = rf(ctx, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.AccountsUpdateAccountTypeMembersResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, io.Reader, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AccountsUpdateAccountTypeMembersWithResponse provides a mock function with given fields: ctx, body, reqEditors
func (_m *ClientWithResponsesInterface) AccountsUpdateAccountTypeMembersWithResponse(ctx context.Context, body models.AccountsUpdateAccountTypeMembers, reqEditors ...client.RequestEditorFn) (*client.AccountsUpdateAccountTypeMembersResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.AccountsUpdateAccountTypeMembersResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.AccountsUpdateAccountTypeMembers, ...client.RequestEditorFn) (*client.AccountsUpdateAccountTypeMembersResp, error)); ok {
		return rf(ctx, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.AccountsUpdateAccountTypeMembers, ...client.RequestEditorFn) *client.AccountsUpdateAccountTypeMembersResp); ok {
		r0 = rf(ctx, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.AccountsUpdateAccountTypeMembersResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.AccountsUpdateAccountTypeMembers, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AccountsUpdateAccountTypePoliciesWithBodyWithResponse provides a mock function with given fields: ctx, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) AccountsUpdateAccountTypePoliciesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*client.AccountsUpdateAccountTypePoliciesResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.AccountsUpdateAccountTypePoliciesResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...client.RequestEditorFn) (*client.AccountsUpdateAccountTypePoliciesResp, error)); ok {
		return rf(ctx, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...client.RequestEditorFn) *client.AccountsUpdateAccountTypePoliciesResp); ok {
		r0 = rf(ctx, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.AccountsUpdateAccountTypePoliciesResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, io.Reader, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AccountsUpdateAccountTypePoliciesWithResponse provides a mock function with given fields: ctx, body, reqEditors
func (_m *ClientWithResponsesInterface) AccountsUpdateAccountTypePoliciesWithResponse(ctx context.Context, body models.AccountsUpdateAccountTypePolicies, reqEditors ...client.RequestEditorFn) (*client.AccountsUpdateAccountTypePoliciesResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.AccountsUpdateAccountTypePoliciesResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.AccountsUpdateAccountTypePolicies, ...client.RequestEditorFn) (*client.AccountsUpdateAccountTypePoliciesResp, error)); ok {
		return rf(ctx, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.AccountsUpdateAccountTypePolicies, ...client.RequestEditorFn) *client.AccountsUpdateAccountTypePoliciesResp); ok {
		r0 = rf(ctx, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.AccountsUpdateAccountTypePoliciesResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.AccountsUpdateAccountTypePolicies, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AccountsUpdateAccountTypeWithBodyWithResponse provides a mock function with given fields: ctx, accountTypeId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) AccountsUpdateAccountTypeWithBodyWithResponse(ctx context.Context, accountTypeId string, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*client.AccountsUpdateAccountTypeResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, accountTypeId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.AccountsUpdateAccountTypeResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...client.RequestEditorFn) (*client.AccountsUpdateAccountTypeResp, error)); ok {
		return rf(ctx, accountTypeId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...client.RequestEditorFn) *client.AccountsUpdateAccountTypeResp); ok {
		r0 = rf(ctx, accountTypeId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.AccountsUpdateAccountTypeResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, accountTypeId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AccountsUpdateAccountTypeWithResponse provides a mock function with given fields: ctx, accountTypeId, body, reqEditors
func (_m *ClientWithResponsesInterface) AccountsUpdateAccountTypeWithResponse(ctx context.Context, accountTypeId string, body models.AccountsUpdateAccountType, reqEditors ...client.RequestEditorFn) (*client.AccountsUpdateAccountTypeResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, accountTypeId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.AccountsUpdateAccountTypeResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, models.AccountsUpdateAccountType, ...client.RequestEditorFn) (*client.AccountsUpdateAccountTypeResp, error)); ok {
		return rf(ctx, accountTypeId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, models.AccountsUpdateAccountType, ...client.RequestEditorFn) *client.AccountsUpdateAccountTypeResp); ok {
		r0 = rf(ctx, accountTypeId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.AccountsUpdateAccountTypeResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, models.AccountsUpdateAccountType, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, accountTypeId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AccountsUpdateAccountWithBodyWithResponse provides a mock function with given fields: ctx, accountId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) AccountsUpdateAccountWithBodyWithResponse(ctx context.Context, accountId string, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*client.AccountsUpdateAccountResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, accountId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.AccountsUpdateAccountResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...client.RequestEditorFn) (*client.AccountsUpdateAccountResp, error)); ok {
		return rf(ctx, accountId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...client.RequestEditorFn) *client.AccountsUpdateAccountResp); ok {
		r0 = rf(ctx, accountId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.AccountsUpdateAccountResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, accountId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AccountsUpdateAccountWithResponse provides a mock function with given fields: ctx, accountId, body, reqEditors
func (_m *ClientWithResponsesInterface) AccountsUpdateAccountWithResponse(ctx context.Context, accountId string, body models.AccountsUpdateAccount, reqEditors ...client.RequestEditorFn) (*client.AccountsUpdateAccountResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, accountId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.AccountsUpdateAccountResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, models.AccountsUpdateAccount, ...client.RequestEditorFn) (*client.AccountsUpdateAccountResp, error)); ok {
		return rf(ctx, accountId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, models.AccountsUpdateAccount, ...client.RequestEditorFn) *client.AccountsUpdateAccountResp); ok {
		r0 = rf(ctx, accountId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.AccountsUpdateAccountResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, models.AccountsUpdateAccount, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, accountId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkingCreateCidrExclusionWithBodyWithResponse provides a mock function with given fields: ctx, hubId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) NetworkingCreateCidrExclusionWithBodyWithResponse(ctx context.Context, hubId string, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*client.NetworkingCreateCidrExclusionResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, hubId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.NetworkingCreateCidrExclusionResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...client.RequestEditorFn) (*client.NetworkingCreateCidrExclusionResp, error)); ok {
		return rf(ctx, hubId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...client.RequestEditorFn) *client.NetworkingCreateCidrExclusionResp); ok {
		r0 = rf(ctx, hubId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NetworkingCreateCidrExclusionResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, hubId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkingCreateCidrExclusionWithResponse provides a mock function with given fields: ctx, hubId, body, reqEditors
func (_m *ClientWithResponsesInterface) NetworkingCreateCidrExclusionWithResponse(ctx context.Context, hubId string, body models.NetworkingCreateCidrExclusion, reqEditors ...client.RequestEditorFn) (*client.NetworkingCreateCidrExclusionResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, hubId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.NetworkingCreateCidrExclusionResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, models.NetworkingCreateCidrExclusion, ...client.RequestEditorFn) (*client.NetworkingCreateCidrExclusionResp, error)); ok {
		return rf(ctx, hubId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, models.NetworkingCreateCidrExclusion, ...client.RequestEditorFn) *client.NetworkingCreateCidrExclusionResp); ok {
		r0 = rf(ctx, hubId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NetworkingCreateCidrExclusionResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, models.NetworkingCreateCidrExclusion, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, hubId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkingCreateCidrRangeWithBodyWithResponse provides a mock function with given fields: ctx, hubId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) NetworkingCreateCidrRangeWithBodyWithResponse(ctx context.Context, hubId string, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*client.NetworkingCreateCidrRangeResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, hubId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.NetworkingCreateCidrRangeResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...client.RequestEditorFn) (*client.NetworkingCreateCidrRangeResp, error)); ok {
		return rf(ctx, hubId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...client.RequestEditorFn) *client.NetworkingCreateCidrRangeResp); ok {
		r0 = rf(ctx, hubId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NetworkingCreateCidrRangeResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, hubId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkingCreateCidrRangeWithResponse provides a mock function with given fields: ctx, hubId, body, reqEditors
func (_m *ClientWithResponsesInterface) NetworkingCreateCidrRangeWithResponse(ctx context.Context, hubId string, body models.NetworkingCreateCidrRange, reqEditors ...client.RequestEditorFn) (*client.NetworkingCreateCidrRangeResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, hubId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.NetworkingCreateCidrRangeResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, models.NetworkingCreateCidrRange, ...client.RequestEditorFn) (*client.NetworkingCreateCidrRangeResp, error)); ok {
		return rf(ctx, hubId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, models.NetworkingCreateCidrRange, ...client.RequestEditorFn) *client.NetworkingCreateCidrRangeResp); ok {
		r0 = rf(ctx, hubId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NetworkingCreateCidrRangeResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, models.NetworkingCreateCidrRange, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, hubId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkingCreateDnsResolverWithBodyWithResponse provides a mock function with given fields: ctx, hubId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) NetworkingCreateDnsResolverWithBodyWithResponse(ctx context.Context, hubId string, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*client.NetworkingCreateDnsResolverResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, hubId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.NetworkingCreateDnsResolverResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...client.RequestEditorFn) (*client.NetworkingCreateDnsResolverResp, error)); ok {
		return rf(ctx, hubId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...client.RequestEditorFn) *client.NetworkingCreateDnsResolverResp); ok {
		r0 = rf(ctx, hubId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NetworkingCreateDnsResolverResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, hubId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkingCreateDnsResolverWithResponse provides a mock function with given fields: ctx, hubId, body, reqEditors
func (_m *ClientWithResponsesInterface) NetworkingCreateDnsResolverWithResponse(ctx context.Context, hubId string, body models.NetworkingCreateDnsResolver, reqEditors ...client.RequestEditorFn) (*client.NetworkingCreateDnsResolverResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, hubId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.NetworkingCreateDnsResolverResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, models.NetworkingCreateDnsResolver, ...client.RequestEditorFn) (*client.NetworkingCreateDnsResolverResp, error)); ok {
		return rf(ctx, hubId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, models.NetworkingCreateDnsResolver, ...client.RequestEditorFn) *client.NetworkingCreateDnsResolverResp); ok {
		r0 = rf(ctx, hubId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NetworkingCreateDnsResolverResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, models.NetworkingCreateDnsResolver, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, hubId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkingCreateDnsRuleWithBodyWithResponse provides a mock function with given fields: ctx, dnsResolverId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) NetworkingCreateDnsRuleWithBodyWithResponse(ctx context.Context, dnsResolverId string, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*client.NetworkingCreateDnsRuleResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, dnsResolverId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.NetworkingCreateDnsRuleResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...client.RequestEditorFn) (*client.NetworkingCreateDnsRuleResp, error)); ok {
		return rf(ctx, dnsResolverId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...client.RequestEditorFn) *client.NetworkingCreateDnsRuleResp); ok {
		r0 = rf(ctx, dnsResolverId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NetworkingCreateDnsRuleResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, dnsResolverId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkingCreateDnsRuleWithResponse provides a mock function with given fields: ctx, dnsResolverId, body, reqEditors
func (_m *ClientWithResponsesInterface) NetworkingCreateDnsRuleWithResponse(ctx context.Context, dnsResolverId string, body models.NetworkingCreateDnsRule, reqEditors ...client.RequestEditorFn) (*client.NetworkingCreateDnsRuleResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, dnsResolverId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.NetworkingCreateDnsRuleResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, models.NetworkingCreateDnsRule, ...client.RequestEditorFn) (*client.NetworkingCreateDnsRuleResp, error)); ok {
		return rf(ctx, dnsResolverId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, models.NetworkingCreateDnsRule, ...client.RequestEditorFn) *client.NetworkingCreateDnsRuleResp); ok {
		r0 = rf(ctx, dnsResolverId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NetworkingCreateDnsRuleResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, models.NetworkingCreateDnsRule, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, dnsResolverId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkingCreateDxAssociationWithBodyWithResponse provides a mock function with given fields: ctx, dxGatewayId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) NetworkingCreateDxAssociationWithBodyWithResponse(ctx context.Context, dxGatewayId string, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*client.NetworkingCreateDxAssociationResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, dxGatewayId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.NetworkingCreateDxAssociationResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...client.RequestEditorFn) (*client.NetworkingCreateDxAssociationResp, error)); ok {
		return rf(ctx, dxGatewayId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...client.RequestEditorFn) *client.NetworkingCreateDxAssociationResp); ok {
		r0 = rf(ctx, dxGatewayId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NetworkingCreateDxAssociationResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, dxGatewayId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkingCreateDxAssociationWithResponse provides a mock function with given fields: ctx, dxGatewayId, body, reqEditors
func (_m *ClientWithResponsesInterface) NetworkingCreateDxAssociationWithResponse(ctx context.Context, dxGatewayId string, body models.NetworkingCreateDxAssociation, reqEditors ...client.RequestEditorFn) (*client.NetworkingCreateDxAssociationResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, dxGatewayId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.NetworkingCreateDxAssociationResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, models.NetworkingCreateDxAssociation, ...client.RequestEditorFn) (*client.NetworkingCreateDxAssociationResp, error)); ok {
		return rf(ctx, dxGatewayId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, models.NetworkingCreateDxAssociation, ...client.RequestEditorFn) *client.NetworkingCreateDxAssociationResp); ok {
		r0 = rf(ctx, dxGatewayId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NetworkingCreateDxAssociationResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, models.NetworkingCreateDxAssociation, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, dxGatewayId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkingCreateDxResourceWithBodyWithResponse provides a mock function with given fields: ctx, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) NetworkingCreateDxResourceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*client.NetworkingCreateDxResourceResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.NetworkingCreateDxResourceResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...client.RequestEditorFn) (*client.NetworkingCreateDxResourceResp, error)); ok {
		return rf(ctx, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...client.RequestEditorFn) *client.NetworkingCreateDxResourceResp); ok {
		r0 = rf(ctx, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NetworkingCreateDxResourceResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, io.Reader, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkingCreateDxResourceWithResponse provides a mock function with given fields: ctx, body, reqEditors
func (_m *ClientWithResponsesInterface) NetworkingCreateDxResourceWithResponse(ctx context.Context, body models.NetworkingCreateDxResource, reqEditors ...client.RequestEditorFn) (*client.NetworkingCreateDxResourceResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.NetworkingCreateDxResourceResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.NetworkingCreateDxResource, ...client.RequestEditorFn) (*client.NetworkingCreateDxResourceResp, error)); ok {
		return rf(ctx, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.NetworkingCreateDxResource, ...client.RequestEditorFn) *client.NetworkingCreateDxResourceResp); ok {
		r0 = rf(ctx, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NetworkingCreateDxResourceResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.NetworkingCreateDxResource, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkingCreateHubPeeringWithBodyWithResponse provides a mock function with given fields: ctx, networkingHubId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) NetworkingCreateHubPeeringWithBodyWithResponse(ctx context.Context, networkingHubId string, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*client.NetworkingCreateHubPeeringResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, networkingHubId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.NetworkingCreateHubPeeringResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...client.RequestEditorFn) (*client.NetworkingCreateHubPeeringResp, error)); ok {
		return rf(ctx, networkingHubId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...client.RequestEditorFn) *client.NetworkingCreateHubPeeringResp); ok {
		r0 = rf(ctx, networkingHubId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NetworkingCreateHubPeeringResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, networkingHubId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkingCreateHubPeeringWithResponse provides a mock function with given fields: ctx, networkingHubId, body, reqEditors
func (_m *ClientWithResponsesInterface) NetworkingCreateHubPeeringWithResponse(ctx context.Context, networkingHubId string, body models.NetworkingCreateHubPeering, reqEditors ...client.RequestEditorFn) (*client.NetworkingCreateHubPeeringResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, networkingHubId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.NetworkingCreateHubPeeringResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, models.NetworkingCreateHubPeering, ...client.RequestEditorFn) (*client.NetworkingCreateHubPeeringResp, error)); ok {
		return rf(ctx, networkingHubId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, models.NetworkingCreateHubPeering, ...client.RequestEditorFn) *client.NetworkingCreateHubPeeringResp); ok {
		r0 = rf(ctx, networkingHubId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NetworkingCreateHubPeeringResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, models.NetworkingCreateHubPeering, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, networkingHubId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkingCreateHubPrefixListWithBodyWithResponse provides a mock function with given fields: ctx, hubId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) NetworkingCreateHubPrefixListWithBodyWithResponse(ctx context.Context, hubId string, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*client.NetworkingCreateHubPrefixListResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, hubId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.NetworkingCreateHubPrefixListResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...client.RequestEditorFn) (*client.NetworkingCreateHubPrefixListResp, error)); ok {
		return rf(ctx, hubId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...client.RequestEditorFn) *client.NetworkingCreateHubPrefixListResp); ok {
		r0 = rf(ctx, hubId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NetworkingCreateHubPrefixListResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, hubId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkingCreateHubPrefixListWithResponse provides a mock function with given fields: ctx, hubId, body, reqEditors
func (_m *ClientWithResponsesInterface) NetworkingCreateHubPrefixListWithResponse(ctx context.Context, hubId string, body models.NetworkingCreateHubPrefixList, reqEditors ...client.RequestEditorFn) (*client.NetworkingCreateHubPrefixListResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, hubId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.NetworkingCreateHubPrefixListResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, models.NetworkingCreateHubPrefixList, ...client.RequestEditorFn) (*client.NetworkingCreateHubPrefixListResp, error)); ok {
		return rf(ctx, hubId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, models.NetworkingCreateHubPrefixList, ...client.RequestEditorFn) *client.NetworkingCreateHubPrefixListResp); ok {
		r0 = rf(ctx, hubId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NetworkingCreateHubPrefixListResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, models.NetworkingCreateHubPrefixList, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, hubId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkingCreateHubWithBodyWithResponse provides a mock function with given fields: ctx, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) NetworkingCreateHubWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*client.NetworkingCreateHubResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.NetworkingCreateHubResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...client.RequestEditorFn) (*client.NetworkingCreateHubResp, error)); ok {
		return rf(ctx, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...client.RequestEditorFn) *client.NetworkingCreateHubResp); ok {
		r0 = rf(ctx, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NetworkingCreateHubResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, io.Reader, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkingCreateHubWithResponse provides a mock function with given fields: ctx, body, reqEditors
func (_m *ClientWithResponsesInterface) NetworkingCreateHubWithResponse(ctx context.Context, body models.NetworkingCreateHub, reqEditors ...client.RequestEditorFn) (*client.NetworkingCreateHubResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.NetworkingCreateHubResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.NetworkingCreateHub, ...client.RequestEditorFn) (*client.NetworkingCreateHubResp, error)); ok {
		return rf(ctx, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.NetworkingCreateHub, ...client.RequestEditorFn) *client.NetworkingCreateHubResp); ok {
		r0 = rf(ctx, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NetworkingCreateHubResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.NetworkingCreateHub, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkingCreateVpcPrefixListWithBodyWithResponse provides a mock function with given fields: ctx, hubId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) NetworkingCreateVpcPrefixListWithBodyWithResponse(ctx context.Context, hubId string, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*client.NetworkingCreateVpcPrefixListResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, hubId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.NetworkingCreateVpcPrefixListResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...client.RequestEditorFn) (*client.NetworkingCreateVpcPrefixListResp, error)); ok {
		return rf(ctx, hubId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...client.RequestEditorFn) *client.NetworkingCreateVpcPrefixListResp); ok {
		r0 = rf(ctx, hubId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NetworkingCreateVpcPrefixListResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, hubId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkingCreateVpcPrefixListWithResponse provides a mock function with given fields: ctx, hubId, body, reqEditors
func (_m *ClientWithResponsesInterface) NetworkingCreateVpcPrefixListWithResponse(ctx context.Context, hubId string, body models.NetworkingCreateVpcPrefixList, reqEditors ...client.RequestEditorFn) (*client.NetworkingCreateVpcPrefixListResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, hubId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.NetworkingCreateVpcPrefixListResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, models.NetworkingCreateVpcPrefixList, ...client.RequestEditorFn) (*client.NetworkingCreateVpcPrefixListResp, error)); ok {
		return rf(ctx, hubId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, models.NetworkingCreateVpcPrefixList, ...client.RequestEditorFn) *client.NetworkingCreateVpcPrefixListResp); ok {
		r0 = rf(ctx, hubId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NetworkingCreateVpcPrefixListResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, models.NetworkingCreateVpcPrefixList, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, hubId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkingCreateVpcWithBodyWithResponse provides a mock function with given fields: ctx, hubId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) NetworkingCreateVpcWithBodyWithResponse(ctx context.Context, hubId string, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*client.NetworkingCreateVpcResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, hubId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.NetworkingCreateVpcResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...client.RequestEditorFn) (*client.NetworkingCreateVpcResp, error)); ok {
		return rf(ctx, hubId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...client.RequestEditorFn) *client.NetworkingCreateVpcResp); ok {
		r0 = rf(ctx, hubId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NetworkingCreateVpcResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, hubId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkingCreateVpcWithResponse provides a mock function with given fields: ctx, hubId, body, reqEditors
func (_m *ClientWithResponsesInterface) NetworkingCreateVpcWithResponse(ctx context.Context, hubId string, body models.NetworkingCreateVpc, reqEditors ...client.RequestEditorFn) (*client.NetworkingCreateVpcResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, hubId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.NetworkingCreateVpcResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, models.NetworkingCreateVpc, ...client.RequestEditorFn) (*client.NetworkingCreateVpcResp, error)); ok {
		return rf(ctx, hubId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, models.NetworkingCreateVpc, ...client.RequestEditorFn) *client.NetworkingCreateVpcResp); ok {
		r0 = rf(ctx, hubId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NetworkingCreateVpcResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, models.NetworkingCreateVpc, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, hubId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkingCreateVpnConnectionWithBodyWithResponse provides a mock function with given fields: ctx, vpnCustomerGatewayId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) NetworkingCreateVpnConnectionWithBodyWithResponse(ctx context.Context, vpnCustomerGatewayId string, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*client.NetworkingCreateVpnConnectionResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, vpnCustomerGatewayId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.NetworkingCreateVpnConnectionResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...client.RequestEditorFn) (*client.NetworkingCreateVpnConnectionResp, error)); ok {
		return rf(ctx, vpnCustomerGatewayId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...client.RequestEditorFn) *client.NetworkingCreateVpnConnectionResp); ok {
		r0 = rf(ctx, vpnCustomerGatewayId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NetworkingCreateVpnConnectionResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, vpnCustomerGatewayId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkingCreateVpnConnectionWithResponse provides a mock function with given fields: ctx, vpnCustomerGatewayId, body, reqEditors
func (_m *ClientWithResponsesInterface) NetworkingCreateVpnConnectionWithResponse(ctx context.Context, vpnCustomerGatewayId string, body models.NetworkingCreateVpnConnection, reqEditors ...client.RequestEditorFn) (*client.NetworkingCreateVpnConnectionResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, vpnCustomerGatewayId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.NetworkingCreateVpnConnectionResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, models.NetworkingCreateVpnConnection, ...client.RequestEditorFn) (*client.NetworkingCreateVpnConnectionResp, error)); ok {
		return rf(ctx, vpnCustomerGatewayId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, models.NetworkingCreateVpnConnection, ...client.RequestEditorFn) *client.NetworkingCreateVpnConnectionResp); ok {
		r0 = rf(ctx, vpnCustomerGatewayId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NetworkingCreateVpnConnectionResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, models.NetworkingCreateVpnConnection, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, vpnCustomerGatewayId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkingCreateVpnCustomerGatewayWithBodyWithResponse provides a mock function with given fields: ctx, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) NetworkingCreateVpnCustomerGatewayWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*client.NetworkingCreateVpnCustomerGatewayResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.NetworkingCreateVpnCustomerGatewayResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...client.RequestEditorFn) (*client.NetworkingCreateVpnCustomerGatewayResp, error)); ok {
		return rf(ctx, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...client.RequestEditorFn) *client.NetworkingCreateVpnCustomerGatewayResp); ok {
		r0 = rf(ctx, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NetworkingCreateVpnCustomerGatewayResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, io.Reader, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkingCreateVpnCustomerGatewayWithResponse provides a mock function with given fields: ctx, body, reqEditors
func (_m *ClientWithResponsesInterface) NetworkingCreateVpnCustomerGatewayWithResponse(ctx context.Context, body models.NetworkingCreateVpnCustomerGateway, reqEditors ...client.RequestEditorFn) (*client.NetworkingCreateVpnCustomerGatewayResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.NetworkingCreateVpnCustomerGatewayResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.NetworkingCreateVpnCustomerGateway, ...client.RequestEditorFn) (*client.NetworkingCreateVpnCustomerGatewayResp, error)); ok {
		return rf(ctx, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.NetworkingCreateVpnCustomerGateway, ...client.RequestEditorFn) *client.NetworkingCreateVpnCustomerGatewayResp); ok {
		r0 = rf(ctx, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NetworkingCreateVpnCustomerGatewayResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.NetworkingCreateVpnCustomerGateway, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkingDeleteCidrExclusionWithResponse provides a mock function with given fields: ctx, exclusionId, reqEditors
func (_m *ClientWithResponsesInterface) NetworkingDeleteCidrExclusionWithResponse(ctx context.Context, exclusionId string, reqEditors ...client.RequestEditorFn) (*client.NetworkingDeleteCidrExclusionResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, exclusionId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.NetworkingDeleteCidrExclusionResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...client.RequestEditorFn) (*client.NetworkingDeleteCidrExclusionResp, error)); ok {
		return rf(ctx, exclusionId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...client.RequestEditorFn) *client.NetworkingDeleteCidrExclusionResp); ok {
		r0 = rf(ctx, exclusionId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NetworkingDeleteCidrExclusionResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, exclusionId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkingDeleteCidrRangeWithResponse provides a mock function with given fields: ctx, rangeId, reqEditors
func (_m *ClientWithResponsesInterface) NetworkingDeleteCidrRangeWithResponse(ctx context.Context, rangeId string, reqEditors ...client.RequestEditorFn) (*client.NetworkingDeleteCidrRangeResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, rangeId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.NetworkingDeleteCidrRangeResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...client.RequestEditorFn) (*client.NetworkingDeleteCidrRangeResp, error)); ok {
		return rf(ctx, rangeId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...client.RequestEditorFn) *client.NetworkingDeleteCidrRangeResp); ok {
		r0 = rf(ctx, rangeId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NetworkingDeleteCidrRangeResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, rangeId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkingDeleteDnsResolverWithResponse provides a mock function with given fields: ctx, dnsResolverId, reqEditors
func (_m *ClientWithResponsesInterface) NetworkingDeleteDnsResolverWithResponse(ctx context.Context, dnsResolverId string, reqEditors ...client.RequestEditorFn) (*client.NetworkingDeleteDnsResolverResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, dnsResolverId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.NetworkingDeleteDnsResolverResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...client.RequestEditorFn) (*client.NetworkingDeleteDnsResolverResp, error)); ok {
		return rf(ctx, dnsResolverId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...client.RequestEditorFn) *client.NetworkingDeleteDnsResolverResp); ok {
		r0 = rf(ctx, dnsResolverId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NetworkingDeleteDnsResolverResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, dnsResolverId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkingDeleteDnsRuleWithResponse provides a mock function with given fields: ctx, dnsRuleId, reqEditors
func (_m *ClientWithResponsesInterface) NetworkingDeleteDnsRuleWithResponse(ctx context.Context, dnsRuleId string, reqEditors ...client.RequestEditorFn) (*client.NetworkingDeleteDnsRuleResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, dnsRuleId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.NetworkingDeleteDnsRuleResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...client.RequestEditorFn) (*client.NetworkingDeleteDnsRuleResp, error)); ok {
		return rf(ctx, dnsRuleId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...client.RequestEditorFn) *client.NetworkingDeleteDnsRuleResp); ok {
		r0 = rf(ctx, dnsRuleId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NetworkingDeleteDnsRuleResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, dnsRuleId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkingDeleteDxAssociationWithResponse provides a mock function with given fields: ctx, dxAssociationId, reqEditors
func (_m *ClientWithResponsesInterface) NetworkingDeleteDxAssociationWithResponse(ctx context.Context, dxAssociationId string, reqEditors ...client.RequestEditorFn) (*client.NetworkingDeleteDxAssociationResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, dxAssociationId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.NetworkingDeleteDxAssociationResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...client.RequestEditorFn) (*client.NetworkingDeleteDxAssociationResp, error)); ok {
		return rf(ctx, dxAssociationId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...client.RequestEditorFn) *client.NetworkingDeleteDxAssociationResp); ok {
		r0 = rf(ctx, dxAssociationId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NetworkingDeleteDxAssociationResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, dxAssociationId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkingDeleteDxGatewayWithResponse provides a mock function with given fields: ctx, dxGatewayId, reqEditors
func (_m *ClientWithResponsesInterface) NetworkingDeleteDxGatewayWithResponse(ctx context.Context, dxGatewayId string, reqEditors ...client.RequestEditorFn) (*client.NetworkingDeleteDxGatewayResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, dxGatewayId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.NetworkingDeleteDxGatewayResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...client.RequestEditorFn) (*client.NetworkingDeleteDxGatewayResp, error)); ok {
		return rf(ctx, dxGatewayId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...client.RequestEditorFn) *client.NetworkingDeleteDxGatewayResp); ok {
		r0 = rf(ctx, dxGatewayId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NetworkingDeleteDxGatewayResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, dxGatewayId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkingDeleteDxVifWithResponse provides a mock function with given fields: ctx, dxVifId, reqEditors
func (_m *ClientWithResponsesInterface) NetworkingDeleteDxVifWithResponse(ctx context.Context, dxVifId string, reqEditors ...client.RequestEditorFn) (*client.NetworkingDeleteDxVifResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, dxVifId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.NetworkingDeleteDxVifResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...client.RequestEditorFn) (*client.NetworkingDeleteDxVifResp, error)); ok {
		return rf(ctx, dxVifId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...client.RequestEditorFn) *client.NetworkingDeleteDxVifResp); ok {
		r0 = rf(ctx, dxVifId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NetworkingDeleteDxVifResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, dxVifId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkingDeleteHubPeeringWithResponse provides a mock function with given fields: ctx, hubPeeringId, reqEditors
func (_m *ClientWithResponsesInterface) NetworkingDeleteHubPeeringWithResponse(ctx context.Context, hubPeeringId string, reqEditors ...client.RequestEditorFn) (*client.NetworkingDeleteHubPeeringResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, hubPeeringId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.NetworkingDeleteHubPeeringResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...client.RequestEditorFn) (*client.NetworkingDeleteHubPeeringResp, error)); ok {
		return rf(ctx, hubPeeringId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...client.RequestEditorFn) *client.NetworkingDeleteHubPeeringResp); ok {
		r0 = rf(ctx, hubPeeringId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NetworkingDeleteHubPeeringResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, hubPeeringId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkingDeleteHubWithResponse provides a mock function with given fields: ctx, hubId, reqEditors
func (_m *ClientWithResponsesInterface) NetworkingDeleteHubWithResponse(ctx context.Context, hubId string, reqEditors ...client.RequestEditorFn) (*client.NetworkingDeleteHubResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, hubId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.NetworkingDeleteHubResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...client.RequestEditorFn) (*client.NetworkingDeleteHubResp, error)); ok {
		return rf(ctx, hubId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...client.RequestEditorFn) *client.NetworkingDeleteHubResp); ok {
		r0 = rf(ctx, hubId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NetworkingDeleteHubResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, hubId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkingDeletePrefixListWithResponse provides a mock function with given fields: ctx, prefixListId, reqEditors
func (_m *ClientWithResponsesInterface) NetworkingDeletePrefixListWithResponse(ctx context.Context, prefixListId string, reqEditors ...client.RequestEditorFn) (*client.NetworkingDeletePrefixListResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, prefixListId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.NetworkingDeletePrefixListResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...client.RequestEditorFn) (*client.NetworkingDeletePrefixListResp, error)); ok {
		return rf(ctx, prefixListId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...client.RequestEditorFn) *client.NetworkingDeletePrefixListResp); ok {
		r0 = rf(ctx, prefixListId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NetworkingDeletePrefixListResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, prefixListId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkingDeleteVpcWithResponse provides a mock function with given fields: ctx, vpcId, reqEditors
func (_m *ClientWithResponsesInterface) NetworkingDeleteVpcWithResponse(ctx context.Context, vpcId string, reqEditors ...client.RequestEditorFn) (*client.NetworkingDeleteVpcResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, vpcId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.NetworkingDeleteVpcResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...client.RequestEditorFn) (*client.NetworkingDeleteVpcResp, error)); ok {
		return rf(ctx, vpcId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...client.RequestEditorFn) *client.NetworkingDeleteVpcResp); ok {
		r0 = rf(ctx, vpcId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NetworkingDeleteVpcResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, vpcId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkingDeleteVpnConnectionWithResponse provides a mock function with given fields: ctx, vpnConnectionId, reqEditors
func (_m *ClientWithResponsesInterface) NetworkingDeleteVpnConnectionWithResponse(ctx context.Context, vpnConnectionId string, reqEditors ...client.RequestEditorFn) (*client.NetworkingDeleteVpnConnectionResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, vpnConnectionId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.NetworkingDeleteVpnConnectionResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...client.RequestEditorFn) (*client.NetworkingDeleteVpnConnectionResp, error)); ok {
		return rf(ctx, vpnConnectionId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...client.RequestEditorFn) *client.NetworkingDeleteVpnConnectionResp); ok {
		r0 = rf(ctx, vpnConnectionId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NetworkingDeleteVpnConnectionResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, vpnConnectionId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkingDeleteVpnCustomerGatewayWithResponse provides a mock function with given fields: ctx, vpnCustomerGatewayId, reqEditors
func (_m *ClientWithResponsesInterface) NetworkingDeleteVpnCustomerGatewayWithResponse(ctx context.Context, vpnCustomerGatewayId string, reqEditors ...client.RequestEditorFn) (*client.NetworkingDeleteVpnCustomerGatewayResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, vpnCustomerGatewayId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.NetworkingDeleteVpnCustomerGatewayResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...client.RequestEditorFn) (*client.NetworkingDeleteVpnCustomerGatewayResp, error)); ok {
		return rf(ctx, vpnCustomerGatewayId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...client.RequestEditorFn) *client.NetworkingDeleteVpnCustomerGatewayResp); ok {
		r0 = rf(ctx, vpnCustomerGatewayId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NetworkingDeleteVpnCustomerGatewayResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, vpnCustomerGatewayId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkingReadCidrExclusionWithResponse provides a mock function with given fields: ctx, exclusionId, params, reqEditors
func (_m *ClientWithResponsesInterface) NetworkingReadCidrExclusionWithResponse(ctx context.Context, exclusionId string, params *models.NetworkingReadCidrExclusionParams, reqEditors ...client.RequestEditorFn) (*client.NetworkingReadCidrExclusionResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, exclusionId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.NetworkingReadCidrExclusionResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *models.NetworkingReadCidrExclusionParams, ...client.RequestEditorFn) (*client.NetworkingReadCidrExclusionResp, error)); ok {
		return rf(ctx, exclusionId, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *models.NetworkingReadCidrExclusionParams, ...client.RequestEditorFn) *client.NetworkingReadCidrExclusionResp); ok {
		r0 = rf(ctx, exclusionId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NetworkingReadCidrExclusionResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *models.NetworkingReadCidrExclusionParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, exclusionId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkingReadCidrExclusionsWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *ClientWithResponsesInterface) NetworkingReadCidrExclusionsWithResponse(ctx context.Context, params *models.NetworkingReadCidrExclusionsParams, reqEditors ...client.RequestEditorFn) (*client.NetworkingReadCidrExclusionsResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.NetworkingReadCidrExclusionsResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.NetworkingReadCidrExclusionsParams, ...client.RequestEditorFn) (*client.NetworkingReadCidrExclusionsResp, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.NetworkingReadCidrExclusionsParams, ...client.RequestEditorFn) *client.NetworkingReadCidrExclusionsResp); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NetworkingReadCidrExclusionsResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.NetworkingReadCidrExclusionsParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkingReadCidrRangeWithResponse provides a mock function with given fields: ctx, rangeId, params, reqEditors
func (_m *ClientWithResponsesInterface) NetworkingReadCidrRangeWithResponse(ctx context.Context, rangeId string, params *models.NetworkingReadCidrRangeParams, reqEditors ...client.RequestEditorFn) (*client.NetworkingReadCidrRangeResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, rangeId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.NetworkingReadCidrRangeResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *models.NetworkingReadCidrRangeParams, ...client.RequestEditorFn) (*client.NetworkingReadCidrRangeResp, error)); ok {
		return rf(ctx, rangeId, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *models.NetworkingReadCidrRangeParams, ...client.RequestEditorFn) *client.NetworkingReadCidrRangeResp); ok {
		r0 = rf(ctx, rangeId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NetworkingReadCidrRangeResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *models.NetworkingReadCidrRangeParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, rangeId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkingReadCidrRangesWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *ClientWithResponsesInterface) NetworkingReadCidrRangesWithResponse(ctx context.Context, params *models.NetworkingReadCidrRangesParams, reqEditors ...client.RequestEditorFn) (*client.NetworkingReadCidrRangesResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.NetworkingReadCidrRangesResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.NetworkingReadCidrRangesParams, ...client.RequestEditorFn) (*client.NetworkingReadCidrRangesResp, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.NetworkingReadCidrRangesParams, ...client.RequestEditorFn) *client.NetworkingReadCidrRangesResp); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NetworkingReadCidrRangesResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.NetworkingReadCidrRangesParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkingReadDnsResolverWithResponse provides a mock function with given fields: ctx, dnsResolverId, params, reqEditors
func (_m *ClientWithResponsesInterface) NetworkingReadDnsResolverWithResponse(ctx context.Context, dnsResolverId string, params *models.NetworkingReadDnsResolverParams, reqEditors ...client.RequestEditorFn) (*client.NetworkingReadDnsResolverResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, dnsResolverId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.NetworkingReadDnsResolverResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *models.NetworkingReadDnsResolverParams, ...client.RequestEditorFn) (*client.NetworkingReadDnsResolverResp, error)); ok {
		return rf(ctx, dnsResolverId, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *models.NetworkingReadDnsResolverParams, ...client.RequestEditorFn) *client.NetworkingReadDnsResolverResp); ok {
		r0 = rf(ctx, dnsResolverId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NetworkingReadDnsResolverResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *models.NetworkingReadDnsResolverParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, dnsResolverId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkingReadDnsResolversWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *ClientWithResponsesInterface) NetworkingReadDnsResolversWithResponse(ctx context.Context, params *models.NetworkingReadDnsResolversParams, reqEditors ...client.RequestEditorFn) (*client.NetworkingReadDnsResolversResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.NetworkingReadDnsResolversResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.NetworkingReadDnsResolversParams, ...client.RequestEditorFn) (*client.NetworkingReadDnsResolversResp, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.NetworkingReadDnsResolversParams, ...client.RequestEditorFn) *client.NetworkingReadDnsResolversResp); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NetworkingReadDnsResolversResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.NetworkingReadDnsResolversParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkingReadDnsRuleWithResponse provides a mock function with given fields: ctx, dnsRuleId, params, reqEditors
func (_m *ClientWithResponsesInterface) NetworkingReadDnsRuleWithResponse(ctx context.Context, dnsRuleId string, params *models.NetworkingReadDnsRuleParams, reqEditors ...client.RequestEditorFn) (*client.NetworkingReadDnsRuleResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, dnsRuleId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.NetworkingReadDnsRuleResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *models.NetworkingReadDnsRuleParams, ...client.RequestEditorFn) (*client.NetworkingReadDnsRuleResp, error)); ok {
		return rf(ctx, dnsRuleId, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *models.NetworkingReadDnsRuleParams, ...client.RequestEditorFn) *client.NetworkingReadDnsRuleResp); ok {
		r0 = rf(ctx, dnsRuleId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NetworkingReadDnsRuleResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *models.NetworkingReadDnsRuleParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, dnsRuleId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkingReadDnsRulesWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *ClientWithResponsesInterface) NetworkingReadDnsRulesWithResponse(ctx context.Context, params *models.NetworkingReadDnsRulesParams, reqEditors ...client.RequestEditorFn) (*client.NetworkingReadDnsRulesResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.NetworkingReadDnsRulesResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.NetworkingReadDnsRulesParams, ...client.RequestEditorFn) (*client.NetworkingReadDnsRulesResp, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.NetworkingReadDnsRulesParams, ...client.RequestEditorFn) *client.NetworkingReadDnsRulesResp); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NetworkingReadDnsRulesResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.NetworkingReadDnsRulesParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkingReadDxAssociationWithResponse provides a mock function with given fields: ctx, dxAssociationId, params, reqEditors
func (_m *ClientWithResponsesInterface) NetworkingReadDxAssociationWithResponse(ctx context.Context, dxAssociationId string, params *models.NetworkingReadDxAssociationParams, reqEditors ...client.RequestEditorFn) (*client.NetworkingReadDxAssociationResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, dxAssociationId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.NetworkingReadDxAssociationResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *models.NetworkingReadDxAssociationParams, ...client.RequestEditorFn) (*client.NetworkingReadDxAssociationResp, error)); ok {
		return rf(ctx, dxAssociationId, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *models.NetworkingReadDxAssociationParams, ...client.RequestEditorFn) *client.NetworkingReadDxAssociationResp); ok {
		r0 = rf(ctx, dxAssociationId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NetworkingReadDxAssociationResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *models.NetworkingReadDxAssociationParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, dxAssociationId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkingReadDxAssociationsWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *ClientWithResponsesInterface) NetworkingReadDxAssociationsWithResponse(ctx context.Context, params *models.NetworkingReadDxAssociationsParams, reqEditors ...client.RequestEditorFn) (*client.NetworkingReadDxAssociationsResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.NetworkingReadDxAssociationsResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.NetworkingReadDxAssociationsParams, ...client.RequestEditorFn) (*client.NetworkingReadDxAssociationsResp, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.NetworkingReadDxAssociationsParams, ...client.RequestEditorFn) *client.NetworkingReadDxAssociationsResp); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NetworkingReadDxAssociationsResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.NetworkingReadDxAssociationsParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkingReadDxConnectionsWithResponse provides a mock function with given fields: ctx, accountId, params, reqEditors
func (_m *ClientWithResponsesInterface) NetworkingReadDxConnectionsWithResponse(ctx context.Context, accountId string, params *models.NetworkingReadDxConnectionsParams, reqEditors ...client.RequestEditorFn) (*client.NetworkingReadDxConnectionsResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, accountId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.NetworkingReadDxConnectionsResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *models.NetworkingReadDxConnectionsParams, ...client.RequestEditorFn) (*client.NetworkingReadDxConnectionsResp, error)); ok {
		return rf(ctx, accountId, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *models.NetworkingReadDxConnectionsParams, ...client.RequestEditorFn) *client.NetworkingReadDxConnectionsResp); ok {
		r0 = rf(ctx, accountId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NetworkingReadDxConnectionsResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *models.NetworkingReadDxConnectionsParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, accountId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkingReadDxGatewayWithResponse provides a mock function with given fields: ctx, dxGatewayId, params, reqEditors
func (_m *ClientWithResponsesInterface) NetworkingReadDxGatewayWithResponse(ctx context.Context, dxGatewayId string, params *models.NetworkingReadDxGatewayParams, reqEditors ...client.RequestEditorFn) (*client.NetworkingReadDxGatewayResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, dxGatewayId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.NetworkingReadDxGatewayResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *models.NetworkingReadDxGatewayParams, ...client.RequestEditorFn) (*client.NetworkingReadDxGatewayResp, error)); ok {
		return rf(ctx, dxGatewayId, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *models.NetworkingReadDxGatewayParams, ...client.RequestEditorFn) *client.NetworkingReadDxGatewayResp); ok {
		r0 = rf(ctx, dxGatewayId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NetworkingReadDxGatewayResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *models.NetworkingReadDxGatewayParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, dxGatewayId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkingReadDxGatewaysWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *ClientWithResponsesInterface) NetworkingReadDxGatewaysWithResponse(ctx context.Context, params *models.NetworkingReadDxGatewaysParams, reqEditors ...client.RequestEditorFn) (*client.NetworkingReadDxGatewaysResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.NetworkingReadDxGatewaysResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.NetworkingReadDxGatewaysParams, ...client.RequestEditorFn) (*client.NetworkingReadDxGatewaysResp, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.NetworkingReadDxGatewaysParams, ...client.RequestEditorFn) *client.NetworkingReadDxGatewaysResp); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NetworkingReadDxGatewaysResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.NetworkingReadDxGatewaysParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkingReadDxVifStatusWithResponse provides a mock function with given fields: ctx, dxVifId, reqEditors
func (_m *ClientWithResponsesInterface) NetworkingReadDxVifStatusWithResponse(ctx context.Context, dxVifId string, reqEditors ...client.RequestEditorFn) (*client.NetworkingReadDxVifStatusResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, dxVifId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.NetworkingReadDxVifStatusResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...client.RequestEditorFn) (*client.NetworkingReadDxVifStatusResp, error)); ok {
		return rf(ctx, dxVifId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...client.RequestEditorFn) *client.NetworkingReadDxVifStatusResp); ok {
		r0 = rf(ctx, dxVifId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NetworkingReadDxVifStatusResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, dxVifId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkingReadDxVifWithResponse provides a mock function with given fields: ctx, dxVifId, params, reqEditors
func (_m *ClientWithResponsesInterface) NetworkingReadDxVifWithResponse(ctx context.Context, dxVifId string, params *models.NetworkingReadDxVifParams, reqEditors ...client.RequestEditorFn) (*client.NetworkingReadDxVifResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, dxVifId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.NetworkingReadDxVifResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *models.NetworkingReadDxVifParams, ...client.RequestEditorFn) (*client.NetworkingReadDxVifResp, error)); ok {
		return rf(ctx, dxVifId, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *models.NetworkingReadDxVifParams, ...client.RequestEditorFn) *client.NetworkingReadDxVifResp); ok {
		r0 = rf(ctx, dxVifId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NetworkingReadDxVifResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *models.NetworkingReadDxVifParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, dxVifId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkingReadDxVifsWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *ClientWithResponsesInterface) NetworkingReadDxVifsWithResponse(ctx context.Context, params *models.NetworkingReadDxVifsParams, reqEditors ...client.RequestEditorFn) (*client.NetworkingReadDxVifsResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.NetworkingReadDxVifsResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.NetworkingReadDxVifsParams, ...client.RequestEditorFn) (*client.NetworkingReadDxVifsResp, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.NetworkingReadDxVifsParams, ...client.RequestEditorFn) *client.NetworkingReadDxVifsResp); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NetworkingReadDxVifsResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.NetworkingReadDxVifsParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkingReadGatewayDxAssociationsWithResponse provides a mock function with given fields: ctx, dxGatewayId, params, reqEditors
func (_m *ClientWithResponsesInterface) NetworkingReadGatewayDxAssociationsWithResponse(ctx context.Context, dxGatewayId string, params *models.NetworkingReadGatewayDxAssociationsParams, reqEditors ...client.RequestEditorFn) (*client.NetworkingReadGatewayDxAssociationsResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, dxGatewayId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.NetworkingReadGatewayDxAssociationsResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *models.NetworkingReadGatewayDxAssociationsParams, ...client.RequestEditorFn) (*client.NetworkingReadGatewayDxAssociationsResp, error)); ok {
		return rf(ctx, dxGatewayId, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *models.NetworkingReadGatewayDxAssociationsParams, ...client.RequestEditorFn) *client.NetworkingReadGatewayDxAssociationsResp); ok {
		r0 = rf(ctx, dxGatewayId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NetworkingReadGatewayDxAssociationsResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *models.NetworkingReadGatewayDxAssociationsParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, dxGatewayId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkingReadGatewayDxVifsWithResponse provides a mock function with given fields: ctx, dxGatewayId, params, reqEditors
func (_m *ClientWithResponsesInterface) NetworkingReadGatewayDxVifsWithResponse(ctx context.Context, dxGatewayId string, params *models.NetworkingReadGatewayDxVifsParams, reqEditors ...client.RequestEditorFn) (*client.NetworkingReadGatewayDxVifsResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, dxGatewayId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.NetworkingReadGatewayDxVifsResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *models.NetworkingReadGatewayDxVifsParams, ...client.RequestEditorFn) (*client.NetworkingReadGatewayDxVifsResp, error)); ok {
		return rf(ctx, dxGatewayId, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *models.NetworkingReadGatewayDxVifsParams, ...client.RequestEditorFn) *client.NetworkingReadGatewayDxVifsResp); ok {
		r0 = rf(ctx, dxGatewayId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NetworkingReadGatewayDxVifsResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *models.NetworkingReadGatewayDxVifsParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, dxGatewayId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkingReadGatewayVpnConnectionsWithResponse provides a mock function with given fields: ctx, vpnCustomerGatewayId, params, reqEditors
func (_m *ClientWithResponsesInterface) NetworkingReadGatewayVpnConnectionsWithResponse(ctx context.Context, vpnCustomerGatewayId string, params *models.NetworkingReadGatewayVpnConnectionsParams, reqEditors ...client.RequestEditorFn) (*client.NetworkingReadGatewayVpnConnectionsResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, vpnCustomerGatewayId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.NetworkingReadGatewayVpnConnectionsResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *models.NetworkingReadGatewayVpnConnectionsParams, ...client.RequestEditorFn) (*client.NetworkingReadGatewayVpnConnectionsResp, error)); ok {
		return rf(ctx, vpnCustomerGatewayId, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *models.NetworkingReadGatewayVpnConnectionsParams, ...client.RequestEditorFn) *client.NetworkingReadGatewayVpnConnectionsResp); ok {
		r0 = rf(ctx, vpnCustomerGatewayId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NetworkingReadGatewayVpnConnectionsResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *models.NetworkingReadGatewayVpnConnectionsParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, vpnCustomerGatewayId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkingReadHubCidrExclusionsWithResponse provides a mock function with given fields: ctx, hubId, params, reqEditors
func (_m *ClientWithResponsesInterface) NetworkingReadHubCidrExclusionsWithResponse(ctx context.Context, hubId string, params *models.NetworkingReadHubCidrExclusionsParams, reqEditors ...client.RequestEditorFn) (*client.NetworkingReadHubCidrExclusionsResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, hubId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.NetworkingReadHubCidrExclusionsResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *models.NetworkingReadHubCidrExclusionsParams, ...client.RequestEditorFn) (*client.NetworkingReadHubCidrExclusionsResp, error)); ok {
		return rf(ctx, hubId, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *models.NetworkingReadHubCidrExclusionsParams, ...client.RequestEditorFn) *client.NetworkingReadHubCidrExclusionsResp); ok {
		r0 = rf(ctx, hubId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NetworkingReadHubCidrExclusionsResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *models.NetworkingReadHubCidrExclusionsParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, hubId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkingReadHubCidrRangesWithResponse provides a mock function with given fields: ctx, hubId, params, reqEditors
func (_m *ClientWithResponsesInterface) NetworkingReadHubCidrRangesWithResponse(ctx context.Context, hubId string, params *models.NetworkingReadHubCidrRangesParams, reqEditors ...client.RequestEditorFn) (*client.NetworkingReadHubCidrRangesResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, hubId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.NetworkingReadHubCidrRangesResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *models.NetworkingReadHubCidrRangesParams, ...client.RequestEditorFn) (*client.NetworkingReadHubCidrRangesResp, error)); ok {
		return rf(ctx, hubId, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *models.NetworkingReadHubCidrRangesParams, ...client.RequestEditorFn) *client.NetworkingReadHubCidrRangesResp); ok {
		r0 = rf(ctx, hubId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NetworkingReadHubCidrRangesResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *models.NetworkingReadHubCidrRangesParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, hubId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkingReadHubDnsResolversWithResponse provides a mock function with given fields: ctx, hubId, params, reqEditors
func (_m *ClientWithResponsesInterface) NetworkingReadHubDnsResolversWithResponse(ctx context.Context, hubId string, params *models.NetworkingReadHubDnsResolversParams, reqEditors ...client.RequestEditorFn) (*client.NetworkingReadHubDnsResolversResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, hubId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.NetworkingReadHubDnsResolversResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *models.NetworkingReadHubDnsResolversParams, ...client.RequestEditorFn) (*client.NetworkingReadHubDnsResolversResp, error)); ok {
		return rf(ctx, hubId, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *models.NetworkingReadHubDnsResolversParams, ...client.RequestEditorFn) *client.NetworkingReadHubDnsResolversResp); ok {
		r0 = rf(ctx, hubId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NetworkingReadHubDnsResolversResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *models.NetworkingReadHubDnsResolversParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, hubId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkingReadHubDxAssociationsWithResponse provides a mock function with given fields: ctx, hubId, params, reqEditors
func (_m *ClientWithResponsesInterface) NetworkingReadHubDxAssociationsWithResponse(ctx context.Context, hubId string, params *models.NetworkingReadHubDxAssociationsParams, reqEditors ...client.RequestEditorFn) (*client.NetworkingReadHubDxAssociationsResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, hubId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.NetworkingReadHubDxAssociationsResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *models.NetworkingReadHubDxAssociationsParams, ...client.RequestEditorFn) (*client.NetworkingReadHubDxAssociationsResp, error)); ok {
		return rf(ctx, hubId, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *models.NetworkingReadHubDxAssociationsParams, ...client.RequestEditorFn) *client.NetworkingReadHubDxAssociationsResp); ok {
		r0 = rf(ctx, hubId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NetworkingReadHubDxAssociationsResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *models.NetworkingReadHubDxAssociationsParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, hubId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkingReadHubDxGatewaysWithResponse provides a mock function with given fields: ctx, hubId, params, reqEditors
func (_m *ClientWithResponsesInterface) NetworkingReadHubDxGatewaysWithResponse(ctx context.Context, hubId string, params *models.NetworkingReadHubDxGatewaysParams, reqEditors ...client.RequestEditorFn) (*client.NetworkingReadHubDxGatewaysResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, hubId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.NetworkingReadHubDxGatewaysResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *models.NetworkingReadHubDxGatewaysParams, ...client.RequestEditorFn) (*client.NetworkingReadHubDxGatewaysResp, error)); ok {
		return rf(ctx, hubId, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *models.NetworkingReadHubDxGatewaysParams, ...client.RequestEditorFn) *client.NetworkingReadHubDxGatewaysResp); ok {
		r0 = rf(ctx, hubId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NetworkingReadHubDxGatewaysResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *models.NetworkingReadHubDxGatewaysParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, hubId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkingReadHubHubPeeringsWithResponse provides a mock function with given fields: ctx, networkingHubId, params, reqEditors
func (_m *ClientWithResponsesInterface) NetworkingReadHubHubPeeringsWithResponse(ctx context.Context, networkingHubId string, params *models.NetworkingReadHubHubPeeringsParams, reqEditors ...client.RequestEditorFn) (*client.NetworkingReadHubHubPeeringsResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, networkingHubId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.NetworkingReadHubHubPeeringsResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *models.NetworkingReadHubHubPeeringsParams, ...client.RequestEditorFn) (*client.NetworkingReadHubHubPeeringsResp, error)); ok {
		return rf(ctx, networkingHubId, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *models.NetworkingReadHubHubPeeringsParams, ...client.RequestEditorFn) *client.NetworkingReadHubHubPeeringsResp); ok {
		r0 = rf(ctx, networkingHubId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NetworkingReadHubHubPeeringsResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *models.NetworkingReadHubHubPeeringsParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, networkingHubId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkingReadHubPeeringWithResponse provides a mock function with given fields: ctx, hubPeeringId, params, reqEditors
func (_m *ClientWithResponsesInterface) NetworkingReadHubPeeringWithResponse(ctx context.Context, hubPeeringId string, params *models.NetworkingReadHubPeeringParams, reqEditors ...client.RequestEditorFn) (*client.NetworkingReadHubPeeringResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, hubPeeringId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.NetworkingReadHubPeeringResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *models.NetworkingReadHubPeeringParams, ...client.RequestEditorFn) (*client.NetworkingReadHubPeeringResp, error)); ok {
		return rf(ctx, hubPeeringId, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *models.NetworkingReadHubPeeringParams, ...client.RequestEditorFn) *client.NetworkingReadHubPeeringResp); ok {
		r0 = rf(ctx, hubPeeringId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NetworkingReadHubPeeringResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *models.NetworkingReadHubPeeringParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, hubPeeringId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkingReadHubPeeringsWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *ClientWithResponsesInterface) NetworkingReadHubPeeringsWithResponse(ctx context.Context, params *models.NetworkingReadHubPeeringsParams, reqEditors ...client.RequestEditorFn) (*client.NetworkingReadHubPeeringsResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.NetworkingReadHubPeeringsResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.NetworkingReadHubPeeringsParams, ...client.RequestEditorFn) (*client.NetworkingReadHubPeeringsResp, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.NetworkingReadHubPeeringsParams, ...client.RequestEditorFn) *client.NetworkingReadHubPeeringsResp); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NetworkingReadHubPeeringsResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.NetworkingReadHubPeeringsParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkingReadHubPrefixListsWithResponse provides a mock function with given fields: ctx, hubId, params, reqEditors
func (_m *ClientWithResponsesInterface) NetworkingReadHubPrefixListsWithResponse(ctx context.Context, hubId string, params *models.NetworkingReadHubPrefixListsParams, reqEditors ...client.RequestEditorFn) (*client.NetworkingReadHubPrefixListsResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, hubId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.NetworkingReadHubPrefixListsResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *models.NetworkingReadHubPrefixListsParams, ...client.RequestEditorFn) (*client.NetworkingReadHubPrefixListsResp, error)); ok {
		return rf(ctx, hubId, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *models.NetworkingReadHubPrefixListsParams, ...client.RequestEditorFn) *client.NetworkingReadHubPrefixListsResp); ok {
		r0 = rf(ctx, hubId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NetworkingReadHubPrefixListsResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *models.NetworkingReadHubPrefixListsParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, hubId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkingReadHubVpcsWithResponse provides a mock function with given fields: ctx, hubId, params, reqEditors
func (_m *ClientWithResponsesInterface) NetworkingReadHubVpcsWithResponse(ctx context.Context, hubId string, params *models.NetworkingReadHubVpcsParams, reqEditors ...client.RequestEditorFn) (*client.NetworkingReadHubVpcsResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, hubId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.NetworkingReadHubVpcsResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *models.NetworkingReadHubVpcsParams, ...client.RequestEditorFn) (*client.NetworkingReadHubVpcsResp, error)); ok {
		return rf(ctx, hubId, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *models.NetworkingReadHubVpcsParams, ...client.RequestEditorFn) *client.NetworkingReadHubVpcsResp); ok {
		r0 = rf(ctx, hubId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NetworkingReadHubVpcsResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *models.NetworkingReadHubVpcsParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, hubId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkingReadHubVpnConnectionsWithResponse provides a mock function with given fields: ctx, hubId, params, reqEditors
func (_m *ClientWithResponsesInterface) NetworkingReadHubVpnConnectionsWithResponse(ctx context.Context, hubId string, params *models.NetworkingReadHubVpnConnectionsParams, reqEditors ...client.RequestEditorFn) (*client.NetworkingReadHubVpnConnectionsResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, hubId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.NetworkingReadHubVpnConnectionsResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *models.NetworkingReadHubVpnConnectionsParams, ...client.RequestEditorFn) (*client.NetworkingReadHubVpnConnectionsResp, error)); ok {
		return rf(ctx, hubId, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *models.NetworkingReadHubVpnConnectionsParams, ...client.RequestEditorFn) *client.NetworkingReadHubVpnConnectionsResp); ok {
		r0 = rf(ctx, hubId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NetworkingReadHubVpnConnectionsResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *models.NetworkingReadHubVpnConnectionsParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, hubId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkingReadHubVpnCustomerGatewaysWithResponse provides a mock function with given fields: ctx, hubId, params, reqEditors
func (_m *ClientWithResponsesInterface) NetworkingReadHubVpnCustomerGatewaysWithResponse(ctx context.Context, hubId string, params *models.NetworkingReadHubVpnCustomerGatewaysParams, reqEditors ...client.RequestEditorFn) (*client.NetworkingReadHubVpnCustomerGatewaysResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, hubId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.NetworkingReadHubVpnCustomerGatewaysResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *models.NetworkingReadHubVpnCustomerGatewaysParams, ...client.RequestEditorFn) (*client.NetworkingReadHubVpnCustomerGatewaysResp, error)); ok {
		return rf(ctx, hubId, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *models.NetworkingReadHubVpnCustomerGatewaysParams, ...client.RequestEditorFn) *client.NetworkingReadHubVpnCustomerGatewaysResp); ok {
		r0 = rf(ctx, hubId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NetworkingReadHubVpnCustomerGatewaysResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *models.NetworkingReadHubVpnCustomerGatewaysParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, hubId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkingReadHubWithResponse provides a mock function with given fields: ctx, hubId, params, reqEditors
func (_m *ClientWithResponsesInterface) NetworkingReadHubWithResponse(ctx context.Context, hubId string, params *models.NetworkingReadHubParams, reqEditors ...client.RequestEditorFn) (*client.NetworkingReadHubResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, hubId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.NetworkingReadHubResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *models.NetworkingReadHubParams, ...client.RequestEditorFn) (*client.NetworkingReadHubResp, error)); ok {
		return rf(ctx, hubId, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *models.NetworkingReadHubParams, ...client.RequestEditorFn) *client.NetworkingReadHubResp); ok {
		r0 = rf(ctx, hubId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NetworkingReadHubResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *models.NetworkingReadHubParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, hubId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkingReadHubsWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *ClientWithResponsesInterface) NetworkingReadHubsWithResponse(ctx context.Context, params *models.NetworkingReadHubsParams, reqEditors ...client.RequestEditorFn) (*client.NetworkingReadHubsResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.NetworkingReadHubsResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.NetworkingReadHubsParams, ...client.RequestEditorFn) (*client.NetworkingReadHubsResp, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.NetworkingReadHubsParams, ...client.RequestEditorFn) *client.NetworkingReadHubsResp); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NetworkingReadHubsResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.NetworkingReadHubsParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkingReadPrefixListWithResponse provides a mock function with given fields: ctx, prefixListId, params, reqEditors
func (_m *ClientWithResponsesInterface) NetworkingReadPrefixListWithResponse(ctx context.Context, prefixListId string, params *models.NetworkingReadPrefixListParams, reqEditors ...client.RequestEditorFn) (*client.NetworkingReadPrefixListResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, prefixListId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.NetworkingReadPrefixListResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *models.NetworkingReadPrefixListParams, ...client.RequestEditorFn) (*client.NetworkingReadPrefixListResp, error)); ok {
		return rf(ctx, prefixListId, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *models.NetworkingReadPrefixListParams, ...client.RequestEditorFn) *client.NetworkingReadPrefixListResp); ok {
		r0 = rf(ctx, prefixListId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NetworkingReadPrefixListResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *models.NetworkingReadPrefixListParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, prefixListId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkingReadPrefixListsWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *ClientWithResponsesInterface) NetworkingReadPrefixListsWithResponse(ctx context.Context, params *models.NetworkingReadPrefixListsParams, reqEditors ...client.RequestEditorFn) (*client.NetworkingReadPrefixListsResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.NetworkingReadPrefixListsResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.NetworkingReadPrefixListsParams, ...client.RequestEditorFn) (*client.NetworkingReadPrefixListsResp, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.NetworkingReadPrefixListsParams, ...client.RequestEditorFn) *client.NetworkingReadPrefixListsResp); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NetworkingReadPrefixListsResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.NetworkingReadPrefixListsParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkingReadResolverDnsRulesWithResponse provides a mock function with given fields: ctx, dnsResolverId, params, reqEditors
func (_m *ClientWithResponsesInterface) NetworkingReadResolverDnsRulesWithResponse(ctx context.Context, dnsResolverId string, params *models.NetworkingReadResolverDnsRulesParams, reqEditors ...client.RequestEditorFn) (*client.NetworkingReadResolverDnsRulesResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, dnsResolverId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.NetworkingReadResolverDnsRulesResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *models.NetworkingReadResolverDnsRulesParams, ...client.RequestEditorFn) (*client.NetworkingReadResolverDnsRulesResp, error)); ok {
		return rf(ctx, dnsResolverId, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *models.NetworkingReadResolverDnsRulesParams, ...client.RequestEditorFn) *client.NetworkingReadResolverDnsRulesResp); ok {
		r0 = rf(ctx, dnsResolverId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NetworkingReadResolverDnsRulesResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *models.NetworkingReadResolverDnsRulesParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, dnsResolverId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkingReadVpcWithResponse provides a mock function with given fields: ctx, vpcId, params, reqEditors
func (_m *ClientWithResponsesInterface) NetworkingReadVpcWithResponse(ctx context.Context, vpcId string, params *models.NetworkingReadVpcParams, reqEditors ...client.RequestEditorFn) (*client.NetworkingReadVpcResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, vpcId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.NetworkingReadVpcResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *models.NetworkingReadVpcParams, ...client.RequestEditorFn) (*client.NetworkingReadVpcResp, error)); ok {
		return rf(ctx, vpcId, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *models.NetworkingReadVpcParams, ...client.RequestEditorFn) *client.NetworkingReadVpcResp); ok {
		r0 = rf(ctx, vpcId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NetworkingReadVpcResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *models.NetworkingReadVpcParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, vpcId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkingReadVpcsWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *ClientWithResponsesInterface) NetworkingReadVpcsWithResponse(ctx context.Context, params *models.NetworkingReadVpcsParams, reqEditors ...client.RequestEditorFn) (*client.NetworkingReadVpcsResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.NetworkingReadVpcsResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.NetworkingReadVpcsParams, ...client.RequestEditorFn) (*client.NetworkingReadVpcsResp, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.NetworkingReadVpcsParams, ...client.RequestEditorFn) *client.NetworkingReadVpcsResp); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NetworkingReadVpcsResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.NetworkingReadVpcsParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkingReadVpnConnectionStatusWithResponse provides a mock function with given fields: ctx, vpnConnectionId, reqEditors
func (_m *ClientWithResponsesInterface) NetworkingReadVpnConnectionStatusWithResponse(ctx context.Context, vpnConnectionId string, reqEditors ...client.RequestEditorFn) (*client.NetworkingReadVpnConnectionStatusResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, vpnConnectionId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.NetworkingReadVpnConnectionStatusResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...client.RequestEditorFn) (*client.NetworkingReadVpnConnectionStatusResp, error)); ok {
		return rf(ctx, vpnConnectionId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...client.RequestEditorFn) *client.NetworkingReadVpnConnectionStatusResp); ok {
		r0 = rf(ctx, vpnConnectionId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NetworkingReadVpnConnectionStatusResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, vpnConnectionId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkingReadVpnConnectionWithResponse provides a mock function with given fields: ctx, vpnConnectionId, params, reqEditors
func (_m *ClientWithResponsesInterface) NetworkingReadVpnConnectionWithResponse(ctx context.Context, vpnConnectionId string, params *models.NetworkingReadVpnConnectionParams, reqEditors ...client.RequestEditorFn) (*client.NetworkingReadVpnConnectionResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, vpnConnectionId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.NetworkingReadVpnConnectionResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *models.NetworkingReadVpnConnectionParams, ...client.RequestEditorFn) (*client.NetworkingReadVpnConnectionResp, error)); ok {
		return rf(ctx, vpnConnectionId, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *models.NetworkingReadVpnConnectionParams, ...client.RequestEditorFn) *client.NetworkingReadVpnConnectionResp); ok {
		r0 = rf(ctx, vpnConnectionId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NetworkingReadVpnConnectionResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *models.NetworkingReadVpnConnectionParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, vpnConnectionId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkingReadVpnConnectionsWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *ClientWithResponsesInterface) NetworkingReadVpnConnectionsWithResponse(ctx context.Context, params *models.NetworkingReadVpnConnectionsParams, reqEditors ...client.RequestEditorFn) (*client.NetworkingReadVpnConnectionsResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.NetworkingReadVpnConnectionsResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.NetworkingReadVpnConnectionsParams, ...client.RequestEditorFn) (*client.NetworkingReadVpnConnectionsResp, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.NetworkingReadVpnConnectionsParams, ...client.RequestEditorFn) *client.NetworkingReadVpnConnectionsResp); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NetworkingReadVpnConnectionsResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.NetworkingReadVpnConnectionsParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkingReadVpnCustomerGatewayWithResponse provides a mock function with given fields: ctx, vpnCustomerGatewayId, params, reqEditors
func (_m *ClientWithResponsesInterface) NetworkingReadVpnCustomerGatewayWithResponse(ctx context.Context, vpnCustomerGatewayId string, params *models.NetworkingReadVpnCustomerGatewayParams, reqEditors ...client.RequestEditorFn) (*client.NetworkingReadVpnCustomerGatewayResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, vpnCustomerGatewayId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.NetworkingReadVpnCustomerGatewayResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *models.NetworkingReadVpnCustomerGatewayParams, ...client.RequestEditorFn) (*client.NetworkingReadVpnCustomerGatewayResp, error)); ok {
		return rf(ctx, vpnCustomerGatewayId, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *models.NetworkingReadVpnCustomerGatewayParams, ...client.RequestEditorFn) *client.NetworkingReadVpnCustomerGatewayResp); ok {
		r0 = rf(ctx, vpnCustomerGatewayId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NetworkingReadVpnCustomerGatewayResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *models.NetworkingReadVpnCustomerGatewayParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, vpnCustomerGatewayId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkingReadVpnCustomerGatewaysWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *ClientWithResponsesInterface) NetworkingReadVpnCustomerGatewaysWithResponse(ctx context.Context, params *models.NetworkingReadVpnCustomerGatewaysParams, reqEditors ...client.RequestEditorFn) (*client.NetworkingReadVpnCustomerGatewaysResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.NetworkingReadVpnCustomerGatewaysResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.NetworkingReadVpnCustomerGatewaysParams, ...client.RequestEditorFn) (*client.NetworkingReadVpnCustomerGatewaysResp, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.NetworkingReadVpnCustomerGatewaysParams, ...client.RequestEditorFn) *client.NetworkingReadVpnCustomerGatewaysResp); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NetworkingReadVpnCustomerGatewaysResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.NetworkingReadVpnCustomerGatewaysParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkingUpdateCidrExclusionWithBodyWithResponse provides a mock function with given fields: ctx, exclusionId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) NetworkingUpdateCidrExclusionWithBodyWithResponse(ctx context.Context, exclusionId string, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*client.NetworkingUpdateCidrExclusionResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, exclusionId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.NetworkingUpdateCidrExclusionResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...client.RequestEditorFn) (*client.NetworkingUpdateCidrExclusionResp, error)); ok {
		return rf(ctx, exclusionId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...client.RequestEditorFn) *client.NetworkingUpdateCidrExclusionResp); ok {
		r0 = rf(ctx, exclusionId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NetworkingUpdateCidrExclusionResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, exclusionId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkingUpdateCidrExclusionWithResponse provides a mock function with given fields: ctx, exclusionId, body, reqEditors
func (_m *ClientWithResponsesInterface) NetworkingUpdateCidrExclusionWithResponse(ctx context.Context, exclusionId string, body models.NetworkingUpdateCidrExclusion, reqEditors ...client.RequestEditorFn) (*client.NetworkingUpdateCidrExclusionResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, exclusionId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.NetworkingUpdateCidrExclusionResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, models.NetworkingUpdateCidrExclusion, ...client.RequestEditorFn) (*client.NetworkingUpdateCidrExclusionResp, error)); ok {
		return rf(ctx, exclusionId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, models.NetworkingUpdateCidrExclusion, ...client.RequestEditorFn) *client.NetworkingUpdateCidrExclusionResp); ok {
		r0 = rf(ctx, exclusionId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NetworkingUpdateCidrExclusionResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, models.NetworkingUpdateCidrExclusion, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, exclusionId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkingUpdateCidrRangeWithBodyWithResponse provides a mock function with given fields: ctx, rangeId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) NetworkingUpdateCidrRangeWithBodyWithResponse(ctx context.Context, rangeId string, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*client.NetworkingUpdateCidrRangeResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, rangeId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.NetworkingUpdateCidrRangeResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...client.RequestEditorFn) (*client.NetworkingUpdateCidrRangeResp, error)); ok {
		return rf(ctx, rangeId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...client.RequestEditorFn) *client.NetworkingUpdateCidrRangeResp); ok {
		r0 = rf(ctx, rangeId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NetworkingUpdateCidrRangeResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, rangeId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkingUpdateCidrRangeWithResponse provides a mock function with given fields: ctx, rangeId, body, reqEditors
func (_m *ClientWithResponsesInterface) NetworkingUpdateCidrRangeWithResponse(ctx context.Context, rangeId string, body models.NetworkingUpdateCidrRange, reqEditors ...client.RequestEditorFn) (*client.NetworkingUpdateCidrRangeResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, rangeId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.NetworkingUpdateCidrRangeResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, models.NetworkingUpdateCidrRange, ...client.RequestEditorFn) (*client.NetworkingUpdateCidrRangeResp, error)); ok {
		return rf(ctx, rangeId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, models.NetworkingUpdateCidrRange, ...client.RequestEditorFn) *client.NetworkingUpdateCidrRangeResp); ok {
		r0 = rf(ctx, rangeId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NetworkingUpdateCidrRangeResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, models.NetworkingUpdateCidrRange, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, rangeId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkingUpdateDnsResolverWithBodyWithResponse provides a mock function with given fields: ctx, dnsResolverId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) NetworkingUpdateDnsResolverWithBodyWithResponse(ctx context.Context, dnsResolverId string, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*client.NetworkingUpdateDnsResolverResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, dnsResolverId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.NetworkingUpdateDnsResolverResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...client.RequestEditorFn) (*client.NetworkingUpdateDnsResolverResp, error)); ok {
		return rf(ctx, dnsResolverId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...client.RequestEditorFn) *client.NetworkingUpdateDnsResolverResp); ok {
		r0 = rf(ctx, dnsResolverId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NetworkingUpdateDnsResolverResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, dnsResolverId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkingUpdateDnsResolverWithResponse provides a mock function with given fields: ctx, dnsResolverId, body, reqEditors
func (_m *ClientWithResponsesInterface) NetworkingUpdateDnsResolverWithResponse(ctx context.Context, dnsResolverId string, body models.NetworkingUpdateDnsResolver, reqEditors ...client.RequestEditorFn) (*client.NetworkingUpdateDnsResolverResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, dnsResolverId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.NetworkingUpdateDnsResolverResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, models.NetworkingUpdateDnsResolver, ...client.RequestEditorFn) (*client.NetworkingUpdateDnsResolverResp, error)); ok {
		return rf(ctx, dnsResolverId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, models.NetworkingUpdateDnsResolver, ...client.RequestEditorFn) *client.NetworkingUpdateDnsResolverResp); ok {
		r0 = rf(ctx, dnsResolverId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NetworkingUpdateDnsResolverResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, models.NetworkingUpdateDnsResolver, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, dnsResolverId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkingUpdateDnsRuleWithBodyWithResponse provides a mock function with given fields: ctx, dnsRuleId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) NetworkingUpdateDnsRuleWithBodyWithResponse(ctx context.Context, dnsRuleId string, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*client.NetworkingUpdateDnsRuleResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, dnsRuleId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.NetworkingUpdateDnsRuleResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...client.RequestEditorFn) (*client.NetworkingUpdateDnsRuleResp, error)); ok {
		return rf(ctx, dnsRuleId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...client.RequestEditorFn) *client.NetworkingUpdateDnsRuleResp); ok {
		r0 = rf(ctx, dnsRuleId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NetworkingUpdateDnsRuleResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, dnsRuleId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkingUpdateDnsRuleWithResponse provides a mock function with given fields: ctx, dnsRuleId, body, reqEditors
func (_m *ClientWithResponsesInterface) NetworkingUpdateDnsRuleWithResponse(ctx context.Context, dnsRuleId string, body models.NetworkingUpdateDnsRule, reqEditors ...client.RequestEditorFn) (*client.NetworkingUpdateDnsRuleResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, dnsRuleId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.NetworkingUpdateDnsRuleResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, models.NetworkingUpdateDnsRule, ...client.RequestEditorFn) (*client.NetworkingUpdateDnsRuleResp, error)); ok {
		return rf(ctx, dnsRuleId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, models.NetworkingUpdateDnsRule, ...client.RequestEditorFn) *client.NetworkingUpdateDnsRuleResp); ok {
		r0 = rf(ctx, dnsRuleId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NetworkingUpdateDnsRuleResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, models.NetworkingUpdateDnsRule, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, dnsRuleId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkingUpdateDxAssociationWithBodyWithResponse provides a mock function with given fields: ctx, dxAssociationId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) NetworkingUpdateDxAssociationWithBodyWithResponse(ctx context.Context, dxAssociationId string, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*client.NetworkingUpdateDxAssociationResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, dxAssociationId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.NetworkingUpdateDxAssociationResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...client.RequestEditorFn) (*client.NetworkingUpdateDxAssociationResp, error)); ok {
		return rf(ctx, dxAssociationId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...client.RequestEditorFn) *client.NetworkingUpdateDxAssociationResp); ok {
		r0 = rf(ctx, dxAssociationId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NetworkingUpdateDxAssociationResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, dxAssociationId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkingUpdateDxAssociationWithResponse provides a mock function with given fields: ctx, dxAssociationId, body, reqEditors
func (_m *ClientWithResponsesInterface) NetworkingUpdateDxAssociationWithResponse(ctx context.Context, dxAssociationId string, body models.NetworkingUpdateDxAssociation, reqEditors ...client.RequestEditorFn) (*client.NetworkingUpdateDxAssociationResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, dxAssociationId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.NetworkingUpdateDxAssociationResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, models.NetworkingUpdateDxAssociation, ...client.RequestEditorFn) (*client.NetworkingUpdateDxAssociationResp, error)); ok {
		return rf(ctx, dxAssociationId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, models.NetworkingUpdateDxAssociation, ...client.RequestEditorFn) *client.NetworkingUpdateDxAssociationResp); ok {
		r0 = rf(ctx, dxAssociationId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NetworkingUpdateDxAssociationResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, models.NetworkingUpdateDxAssociation, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, dxAssociationId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkingUpdateDxVifWithBodyWithResponse provides a mock function with given fields: ctx, dxVifId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) NetworkingUpdateDxVifWithBodyWithResponse(ctx context.Context, dxVifId string, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*client.NetworkingUpdateDxVifResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, dxVifId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.NetworkingUpdateDxVifResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...client.RequestEditorFn) (*client.NetworkingUpdateDxVifResp, error)); ok {
		return rf(ctx, dxVifId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...client.RequestEditorFn) *client.NetworkingUpdateDxVifResp); ok {
		r0 = rf(ctx, dxVifId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NetworkingUpdateDxVifResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, dxVifId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkingUpdateDxVifWithResponse provides a mock function with given fields: ctx, dxVifId, body, reqEditors
func (_m *ClientWithResponsesInterface) NetworkingUpdateDxVifWithResponse(ctx context.Context, dxVifId string, body models.NetworkingUpdateDxVif, reqEditors ...client.RequestEditorFn) (*client.NetworkingUpdateDxVifResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, dxVifId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.NetworkingUpdateDxVifResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, models.NetworkingUpdateDxVif, ...client.RequestEditorFn) (*client.NetworkingUpdateDxVifResp, error)); ok {
		return rf(ctx, dxVifId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, models.NetworkingUpdateDxVif, ...client.RequestEditorFn) *client.NetworkingUpdateDxVifResp); ok {
		r0 = rf(ctx, dxVifId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NetworkingUpdateDxVifResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, models.NetworkingUpdateDxVif, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, dxVifId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkingUpdateHubPeeringWithBodyWithResponse provides a mock function with given fields: ctx, hubPeeringId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) NetworkingUpdateHubPeeringWithBodyWithResponse(ctx context.Context, hubPeeringId string, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*client.NetworkingUpdateHubPeeringResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, hubPeeringId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.NetworkingUpdateHubPeeringResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...client.RequestEditorFn) (*client.NetworkingUpdateHubPeeringResp, error)); ok {
		return rf(ctx, hubPeeringId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...client.RequestEditorFn) *client.NetworkingUpdateHubPeeringResp); ok {
		r0 = rf(ctx, hubPeeringId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NetworkingUpdateHubPeeringResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, hubPeeringId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkingUpdateHubPeeringWithResponse provides a mock function with given fields: ctx, hubPeeringId, body, reqEditors
func (_m *ClientWithResponsesInterface) NetworkingUpdateHubPeeringWithResponse(ctx context.Context, hubPeeringId string, body models.NetworkingUpdateHubPeering, reqEditors ...client.RequestEditorFn) (*client.NetworkingUpdateHubPeeringResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, hubPeeringId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.NetworkingUpdateHubPeeringResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, models.NetworkingUpdateHubPeering, ...client.RequestEditorFn) (*client.NetworkingUpdateHubPeeringResp, error)); ok {
		return rf(ctx, hubPeeringId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, models.NetworkingUpdateHubPeering, ...client.RequestEditorFn) *client.NetworkingUpdateHubPeeringResp); ok {
		r0 = rf(ctx, hubPeeringId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NetworkingUpdateHubPeeringResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, models.NetworkingUpdateHubPeering, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, hubPeeringId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkingUpdateHubPrefixListAssociationWithBodyWithResponse provides a mock function with given fields: ctx, prefixListId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) NetworkingUpdateHubPrefixListAssociationWithBodyWithResponse(ctx context.Context, prefixListId string, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*client.NetworkingUpdateHubPrefixListAssociationResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, prefixListId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.NetworkingUpdateHubPrefixListAssociationResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...client.RequestEditorFn) (*client.NetworkingUpdateHubPrefixListAssociationResp, error)); ok {
		return rf(ctx, prefixListId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...client.RequestEditorFn) *client.NetworkingUpdateHubPrefixListAssociationResp); ok {
		r0 = rf(ctx, prefixListId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NetworkingUpdateHubPrefixListAssociationResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, prefixListId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkingUpdateHubPrefixListAssociationWithResponse provides a mock function with given fields: ctx, prefixListId, body, reqEditors
func (_m *ClientWithResponsesInterface) NetworkingUpdateHubPrefixListAssociationWithResponse(ctx context.Context, prefixListId string, body models.NetworkingUpdateHubPrefixListAssociation, reqEditors ...client.RequestEditorFn) (*client.NetworkingUpdateHubPrefixListAssociationResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, prefixListId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.NetworkingUpdateHubPrefixListAssociationResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, models.NetworkingUpdateHubPrefixListAssociation, ...client.RequestEditorFn) (*client.NetworkingUpdateHubPrefixListAssociationResp, error)); ok {
		return rf(ctx, prefixListId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, models.NetworkingUpdateHubPrefixListAssociation, ...client.RequestEditorFn) *client.NetworkingUpdateHubPrefixListAssociationResp); ok {
		r0 = rf(ctx, prefixListId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NetworkingUpdateHubPrefixListAssociationResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, models.NetworkingUpdateHubPrefixListAssociation, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, prefixListId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkingUpdateHubWithBodyWithResponse provides a mock function with given fields: ctx, hubId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) NetworkingUpdateHubWithBodyWithResponse(ctx context.Context, hubId string, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*client.NetworkingUpdateHubResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, hubId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.NetworkingUpdateHubResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...client.RequestEditorFn) (*client.NetworkingUpdateHubResp, error)); ok {
		return rf(ctx, hubId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...client.RequestEditorFn) *client.NetworkingUpdateHubResp); ok {
		r0 = rf(ctx, hubId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NetworkingUpdateHubResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, hubId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkingUpdateHubWithResponse provides a mock function with given fields: ctx, hubId, body, reqEditors
func (_m *ClientWithResponsesInterface) NetworkingUpdateHubWithResponse(ctx context.Context, hubId string, body models.NetworkingUpdateHub, reqEditors ...client.RequestEditorFn) (*client.NetworkingUpdateHubResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, hubId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.NetworkingUpdateHubResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, models.NetworkingUpdateHub, ...client.RequestEditorFn) (*client.NetworkingUpdateHubResp, error)); ok {
		return rf(ctx, hubId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, models.NetworkingUpdateHub, ...client.RequestEditorFn) *client.NetworkingUpdateHubResp); ok {
		r0 = rf(ctx, hubId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NetworkingUpdateHubResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, models.NetworkingUpdateHub, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, hubId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkingUpdatePrefixListWithBodyWithResponse provides a mock function with given fields: ctx, prefixListId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) NetworkingUpdatePrefixListWithBodyWithResponse(ctx context.Context, prefixListId string, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*client.NetworkingUpdatePrefixListResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, prefixListId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.NetworkingUpdatePrefixListResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...client.RequestEditorFn) (*client.NetworkingUpdatePrefixListResp, error)); ok {
		return rf(ctx, prefixListId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...client.RequestEditorFn) *client.NetworkingUpdatePrefixListResp); ok {
		r0 = rf(ctx, prefixListId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NetworkingUpdatePrefixListResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, prefixListId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkingUpdatePrefixListWithResponse provides a mock function with given fields: ctx, prefixListId, body, reqEditors
func (_m *ClientWithResponsesInterface) NetworkingUpdatePrefixListWithResponse(ctx context.Context, prefixListId string, body models.NetworkingUpdatePrefixList, reqEditors ...client.RequestEditorFn) (*client.NetworkingUpdatePrefixListResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, prefixListId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.NetworkingUpdatePrefixListResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, models.NetworkingUpdatePrefixList, ...client.RequestEditorFn) (*client.NetworkingUpdatePrefixListResp, error)); ok {
		return rf(ctx, prefixListId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, models.NetworkingUpdatePrefixList, ...client.RequestEditorFn) *client.NetworkingUpdatePrefixListResp); ok {
		r0 = rf(ctx, prefixListId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NetworkingUpdatePrefixListResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, models.NetworkingUpdatePrefixList, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, prefixListId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkingUpdateVpcPrefixListAssociationWithBodyWithResponse provides a mock function with given fields: ctx, prefixListId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) NetworkingUpdateVpcPrefixListAssociationWithBodyWithResponse(ctx context.Context, prefixListId string, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*client.NetworkingUpdateVpcPrefixListAssociationResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, prefixListId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.NetworkingUpdateVpcPrefixListAssociationResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...client.RequestEditorFn) (*client.NetworkingUpdateVpcPrefixListAssociationResp, error)); ok {
		return rf(ctx, prefixListId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...client.RequestEditorFn) *client.NetworkingUpdateVpcPrefixListAssociationResp); ok {
		r0 = rf(ctx, prefixListId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NetworkingUpdateVpcPrefixListAssociationResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, prefixListId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkingUpdateVpcPrefixListAssociationWithResponse provides a mock function with given fields: ctx, prefixListId, body, reqEditors
func (_m *ClientWithResponsesInterface) NetworkingUpdateVpcPrefixListAssociationWithResponse(ctx context.Context, prefixListId string, body models.NetworkingUpdateVpcPrefixListAssociation, reqEditors ...client.RequestEditorFn) (*client.NetworkingUpdateVpcPrefixListAssociationResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, prefixListId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.NetworkingUpdateVpcPrefixListAssociationResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, models.NetworkingUpdateVpcPrefixListAssociation, ...client.RequestEditorFn) (*client.NetworkingUpdateVpcPrefixListAssociationResp, error)); ok {
		return rf(ctx, prefixListId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, models.NetworkingUpdateVpcPrefixListAssociation, ...client.RequestEditorFn) *client.NetworkingUpdateVpcPrefixListAssociationResp); ok {
		r0 = rf(ctx, prefixListId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NetworkingUpdateVpcPrefixListAssociationResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, models.NetworkingUpdateVpcPrefixListAssociation, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, prefixListId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkingUpdateVpcWithBodyWithResponse provides a mock function with given fields: ctx, vpcId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) NetworkingUpdateVpcWithBodyWithResponse(ctx context.Context, vpcId string, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*client.NetworkingUpdateVpcResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, vpcId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.NetworkingUpdateVpcResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...client.RequestEditorFn) (*client.NetworkingUpdateVpcResp, error)); ok {
		return rf(ctx, vpcId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...client.RequestEditorFn) *client.NetworkingUpdateVpcResp); ok {
		r0 = rf(ctx, vpcId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NetworkingUpdateVpcResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, vpcId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkingUpdateVpcWithResponse provides a mock function with given fields: ctx, vpcId, body, reqEditors
func (_m *ClientWithResponsesInterface) NetworkingUpdateVpcWithResponse(ctx context.Context, vpcId string, body models.NetworkingUpdateVpc, reqEditors ...client.RequestEditorFn) (*client.NetworkingUpdateVpcResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, vpcId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.NetworkingUpdateVpcResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, models.NetworkingUpdateVpc, ...client.RequestEditorFn) (*client.NetworkingUpdateVpcResp, error)); ok {
		return rf(ctx, vpcId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, models.NetworkingUpdateVpc, ...client.RequestEditorFn) *client.NetworkingUpdateVpcResp); ok {
		r0 = rf(ctx, vpcId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NetworkingUpdateVpcResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, models.NetworkingUpdateVpc, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, vpcId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkingUpdateVpnConnectionWithBodyWithResponse provides a mock function with given fields: ctx, vpnConnectionId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) NetworkingUpdateVpnConnectionWithBodyWithResponse(ctx context.Context, vpnConnectionId string, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*client.NetworkingUpdateVpnConnectionResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, vpnConnectionId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.NetworkingUpdateVpnConnectionResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...client.RequestEditorFn) (*client.NetworkingUpdateVpnConnectionResp, error)); ok {
		return rf(ctx, vpnConnectionId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...client.RequestEditorFn) *client.NetworkingUpdateVpnConnectionResp); ok {
		r0 = rf(ctx, vpnConnectionId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NetworkingUpdateVpnConnectionResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, vpnConnectionId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkingUpdateVpnConnectionWithResponse provides a mock function with given fields: ctx, vpnConnectionId, body, reqEditors
func (_m *ClientWithResponsesInterface) NetworkingUpdateVpnConnectionWithResponse(ctx context.Context, vpnConnectionId string, body models.NetworkingUpdateVpnConnection, reqEditors ...client.RequestEditorFn) (*client.NetworkingUpdateVpnConnectionResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, vpnConnectionId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.NetworkingUpdateVpnConnectionResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, models.NetworkingUpdateVpnConnection, ...client.RequestEditorFn) (*client.NetworkingUpdateVpnConnectionResp, error)); ok {
		return rf(ctx, vpnConnectionId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, models.NetworkingUpdateVpnConnection, ...client.RequestEditorFn) *client.NetworkingUpdateVpnConnectionResp); ok {
		r0 = rf(ctx, vpnConnectionId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NetworkingUpdateVpnConnectionResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, models.NetworkingUpdateVpnConnection, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, vpnConnectionId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkingUpdateVpnCustomerGatewayWithBodyWithResponse provides a mock function with given fields: ctx, vpnCustomerGatewayId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) NetworkingUpdateVpnCustomerGatewayWithBodyWithResponse(ctx context.Context, vpnCustomerGatewayId string, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*client.NetworkingUpdateVpnCustomerGatewayResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, vpnCustomerGatewayId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.NetworkingUpdateVpnCustomerGatewayResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...client.RequestEditorFn) (*client.NetworkingUpdateVpnCustomerGatewayResp, error)); ok {
		return rf(ctx, vpnCustomerGatewayId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...client.RequestEditorFn) *client.NetworkingUpdateVpnCustomerGatewayResp); ok {
		r0 = rf(ctx, vpnCustomerGatewayId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NetworkingUpdateVpnCustomerGatewayResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, vpnCustomerGatewayId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkingUpdateVpnCustomerGatewayWithResponse provides a mock function with given fields: ctx, vpnCustomerGatewayId, body, reqEditors
func (_m *ClientWithResponsesInterface) NetworkingUpdateVpnCustomerGatewayWithResponse(ctx context.Context, vpnCustomerGatewayId string, body models.NetworkingUpdateVpnCustomerGateway, reqEditors ...client.RequestEditorFn) (*client.NetworkingUpdateVpnCustomerGatewayResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, vpnCustomerGatewayId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.NetworkingUpdateVpnCustomerGatewayResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, models.NetworkingUpdateVpnCustomerGateway, ...client.RequestEditorFn) (*client.NetworkingUpdateVpnCustomerGatewayResp, error)); ok {
		return rf(ctx, vpnCustomerGatewayId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, models.NetworkingUpdateVpnCustomerGateway, ...client.RequestEditorFn) *client.NetworkingUpdateVpnCustomerGatewayResp); ok {
		r0 = rf(ctx, vpnCustomerGatewayId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NetworkingUpdateVpnCustomerGatewayResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, models.NetworkingUpdateVpnCustomerGateway, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, vpnCustomerGatewayId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrganisationsAttachPolicyWithBodyWithResponse provides a mock function with given fields: ctx, policyId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) OrganisationsAttachPolicyWithBodyWithResponse(ctx context.Context, policyId string, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*client.OrganisationsAttachPolicyResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, policyId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.OrganisationsAttachPolicyResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...client.RequestEditorFn) (*client.OrganisationsAttachPolicyResp, error)); ok {
		return rf(ctx, policyId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...client.RequestEditorFn) *client.OrganisationsAttachPolicyResp); ok {
		r0 = rf(ctx, policyId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.OrganisationsAttachPolicyResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, policyId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrganisationsAttachPolicyWithResponse provides a mock function with given fields: ctx, policyId, body, reqEditors
func (_m *ClientWithResponsesInterface) OrganisationsAttachPolicyWithResponse(ctx context.Context, policyId string, body models.OrganisationsAttachPolicy, reqEditors ...client.RequestEditorFn) (*client.OrganisationsAttachPolicyResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, policyId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.OrganisationsAttachPolicyResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, models.OrganisationsAttachPolicy, ...client.RequestEditorFn) (*client.OrganisationsAttachPolicyResp, error)); ok {
		return rf(ctx, policyId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, models.OrganisationsAttachPolicy, ...client.RequestEditorFn) *client.OrganisationsAttachPolicyResp); ok {
		r0 = rf(ctx, policyId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.OrganisationsAttachPolicyResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, models.OrganisationsAttachPolicy, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, policyId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrganisationsCreatePolicyWithBodyWithResponse provides a mock function with given fields: ctx, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) OrganisationsCreatePolicyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*client.OrganisationsCreatePolicyResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.OrganisationsCreatePolicyResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...client.RequestEditorFn) (*client.OrganisationsCreatePolicyResp, error)); ok {
		return rf(ctx, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...client.RequestEditorFn) *client.OrganisationsCreatePolicyResp); ok {
		r0 = rf(ctx, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.OrganisationsCreatePolicyResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, io.Reader, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrganisationsCreatePolicyWithResponse provides a mock function with given fields: ctx, body, reqEditors
func (_m *ClientWithResponsesInterface) OrganisationsCreatePolicyWithResponse(ctx context.Context, body models.OrganisationsCreatePolicy, reqEditors ...client.RequestEditorFn) (*client.OrganisationsCreatePolicyResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.OrganisationsCreatePolicyResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.OrganisationsCreatePolicy, ...client.RequestEditorFn) (*client.OrganisationsCreatePolicyResp, error)); ok {
		return rf(ctx, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.OrganisationsCreatePolicy, ...client.RequestEditorFn) *client.OrganisationsCreatePolicyResp); ok {
		r0 = rf(ctx, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.OrganisationsCreatePolicyResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.OrganisationsCreatePolicy, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrganisationsDeletePolicyWithResponse provides a mock function with given fields: ctx, policyId, reqEditors
func (_m *ClientWithResponsesInterface) OrganisationsDeletePolicyWithResponse(ctx context.Context, policyId string, reqEditors ...client.RequestEditorFn) (*client.OrganisationsDeletePolicyResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, policyId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.OrganisationsDeletePolicyResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...client.RequestEditorFn) (*client.OrganisationsDeletePolicyResp, error)); ok {
		return rf(ctx, policyId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...client.RequestEditorFn) *client.OrganisationsDeletePolicyResp); ok {
		r0 = rf(ctx, policyId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.OrganisationsDeletePolicyResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, policyId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrganisationsDetachPolicyWithResponse provides a mock function with given fields: ctx, policyId, reqEditors
func (_m *ClientWithResponsesInterface) OrganisationsDetachPolicyWithResponse(ctx context.Context, policyId string, reqEditors ...client.RequestEditorFn) (*client.OrganisationsDetachPolicyResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, policyId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.OrganisationsDetachPolicyResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...client.RequestEditorFn) (*client.OrganisationsDetachPolicyResp, error)); ok {
		return rf(ctx, policyId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...client.RequestEditorFn) *client.OrganisationsDetachPolicyResp); ok {
		r0 = rf(ctx, policyId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.OrganisationsDetachPolicyResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, policyId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrganisationsReadOrganisationWithResponse provides a mock function with given fields: ctx, reqEditors
func (_m *ClientWithResponsesInterface) OrganisationsReadOrganisationWithResponse(ctx context.Context, reqEditors ...client.RequestEditorFn) (*client.OrganisationsReadOrganisationResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.OrganisationsReadOrganisationResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...client.RequestEditorFn) (*client.OrganisationsReadOrganisationResp, error)); ok {
		return rf(ctx, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...client.RequestEditorFn) *client.OrganisationsReadOrganisationResp); ok {
		r0 = rf(ctx, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.OrganisationsReadOrganisationResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrganisationsReadOrganisationalUnitWithResponse provides a mock function with given fields: ctx, organisationalUnitId, reqEditors
func (_m *ClientWithResponsesInterface) OrganisationsReadOrganisationalUnitWithResponse(ctx context.Context, organisationalUnitId string, reqEditors ...client.RequestEditorFn) (*client.OrganisationsReadOrganisationalUnitResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, organisationalUnitId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.OrganisationsReadOrganisationalUnitResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...client.RequestEditorFn) (*client.OrganisationsReadOrganisationalUnitResp, error)); ok {
		return rf(ctx, organisationalUnitId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...client.RequestEditorFn) *client.OrganisationsReadOrganisationalUnitResp); ok {
		r0 = rf(ctx, organisationalUnitId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.OrganisationsReadOrganisationalUnitResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, organisationalUnitId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrganisationsReadOrganisationalUnitsWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *ClientWithResponsesInterface) OrganisationsReadOrganisationalUnitsWithResponse(ctx context.Context, params *models.OrganisationsReadOrganisationalUnitsParams, reqEditors ...client.RequestEditorFn) (*client.OrganisationsReadOrganisationalUnitsResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.OrganisationsReadOrganisationalUnitsResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.OrganisationsReadOrganisationalUnitsParams, ...client.RequestEditorFn) (*client.OrganisationsReadOrganisationalUnitsResp, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.OrganisationsReadOrganisationalUnitsParams, ...client.RequestEditorFn) *client.OrganisationsReadOrganisationalUnitsResp); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.OrganisationsReadOrganisationalUnitsResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.OrganisationsReadOrganisationalUnitsParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrganisationsReadOrganisationsWithResponse provides a mock function with given fields: ctx, reqEditors
func (_m *ClientWithResponsesInterface) OrganisationsReadOrganisationsWithResponse(ctx context.Context, reqEditors ...client.RequestEditorFn) (*client.OrganisationsReadOrganisationsResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.OrganisationsReadOrganisationsResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...client.RequestEditorFn) (*client.OrganisationsReadOrganisationsResp, error)); ok {
		return rf(ctx, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...client.RequestEditorFn) *client.OrganisationsReadOrganisationsResp); ok {
		r0 = rf(ctx, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.OrganisationsReadOrganisationsResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrganisationsReadPoliciesWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *ClientWithResponsesInterface) OrganisationsReadPoliciesWithResponse(ctx context.Context, params *models.OrganisationsReadPoliciesParams, reqEditors ...client.RequestEditorFn) (*client.OrganisationsReadPoliciesResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.OrganisationsReadPoliciesResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.OrganisationsReadPoliciesParams, ...client.RequestEditorFn) (*client.OrganisationsReadPoliciesResp, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.OrganisationsReadPoliciesParams, ...client.RequestEditorFn) *client.OrganisationsReadPoliciesResp); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.OrganisationsReadPoliciesResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.OrganisationsReadPoliciesParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrganisationsReadPolicyWithResponse provides a mock function with given fields: ctx, policyId, reqEditors
func (_m *ClientWithResponsesInterface) OrganisationsReadPolicyWithResponse(ctx context.Context, policyId string, reqEditors ...client.RequestEditorFn) (*client.OrganisationsReadPolicyResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, policyId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.OrganisationsReadPolicyResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...client.RequestEditorFn) (*client.OrganisationsReadPolicyResp, error)); ok {
		return rf(ctx, policyId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...client.RequestEditorFn) *client.OrganisationsReadPolicyResp); ok {
		r0 = rf(ctx, policyId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.OrganisationsReadPolicyResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, policyId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrganisationsUpdatePolicyWithBodyWithResponse provides a mock function with given fields: ctx, policyId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) OrganisationsUpdatePolicyWithBodyWithResponse(ctx context.Context, policyId string, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*client.OrganisationsUpdatePolicyResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, policyId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.OrganisationsUpdatePolicyResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...client.RequestEditorFn) (*client.OrganisationsUpdatePolicyResp, error)); ok {
		return rf(ctx, policyId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...client.RequestEditorFn) *client.OrganisationsUpdatePolicyResp); ok {
		r0 = rf(ctx, policyId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.OrganisationsUpdatePolicyResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, policyId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrganisationsUpdatePolicyWithResponse provides a mock function with given fields: ctx, policyId, body, reqEditors
func (_m *ClientWithResponsesInterface) OrganisationsUpdatePolicyWithResponse(ctx context.Context, policyId string, body models.OrganisationsUpdatePolicy, reqEditors ...client.RequestEditorFn) (*client.OrganisationsUpdatePolicyResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, policyId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.OrganisationsUpdatePolicyResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, models.OrganisationsUpdatePolicy, ...client.RequestEditorFn) (*client.OrganisationsUpdatePolicyResp, error)); ok {
		return rf(ctx, policyId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, models.OrganisationsUpdatePolicy, ...client.RequestEditorFn) *client.OrganisationsUpdatePolicyResp); ok {
		r0 = rf(ctx, policyId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.OrganisationsUpdatePolicyResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, models.OrganisationsUpdatePolicy, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, policyId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PublicCheckAliasWithResponse provides a mock function with given fields: ctx, alias, reqEditors
func (_m *ClientWithResponsesInterface) PublicCheckAliasWithResponse(ctx context.Context, alias string, reqEditors ...client.RequestEditorFn) (*client.PublicCheckAliasResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, alias)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.PublicCheckAliasResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...client.RequestEditorFn) (*client.PublicCheckAliasResp, error)); ok {
		return rf(ctx, alias, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...client.RequestEditorFn) *client.PublicCheckAliasResp); ok {
		r0 = rf(ctx, alias, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.PublicCheckAliasResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, alias, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PublicReadConfigWithResponse provides a mock function with given fields: ctx, reqEditors
func (_m *ClientWithResponsesInterface) PublicReadConfigWithResponse(ctx context.Context, reqEditors ...client.RequestEditorFn) (*client.PublicReadConfigResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.PublicReadConfigResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...client.RequestEditorFn) (*client.PublicReadConfigResp, error)); ok {
		return rf(ctx, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...client.RequestEditorFn) *client.PublicReadConfigResp); ok {
		r0 = rf(ctx, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.PublicReadConfigResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServicesConfigureSecurityHubWithBodyWithResponse provides a mock function with given fields: ctx, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) ServicesConfigureSecurityHubWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*client.ServicesConfigureSecurityHubResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.ServicesConfigureSecurityHubResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...client.RequestEditorFn) (*client.ServicesConfigureSecurityHubResp, error)); ok {
		return rf(ctx, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...client.RequestEditorFn) *client.ServicesConfigureSecurityHubResp); ok {
		r0 = rf(ctx, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ServicesConfigureSecurityHubResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, io.Reader, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServicesConfigureSecurityHubWithResponse provides a mock function with given fields: ctx, body, reqEditors
func (_m *ClientWithResponsesInterface) ServicesConfigureSecurityHubWithResponse(ctx context.Context, body models.ServicesConfigureSecurityHub, reqEditors ...client.RequestEditorFn) (*client.ServicesConfigureSecurityHubResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.ServicesConfigureSecurityHubResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.ServicesConfigureSecurityHub, ...client.RequestEditorFn) (*client.ServicesConfigureSecurityHubResp, error)); ok {
		return rf(ctx, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.ServicesConfigureSecurityHub, ...client.RequestEditorFn) *client.ServicesConfigureSecurityHubResp); ok {
		r0 = rf(ctx, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ServicesConfigureSecurityHubResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.ServicesConfigureSecurityHub, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServicesReadConfigurationsWithResponse provides a mock function with given fields: ctx, reqEditors
func (_m *ClientWithResponsesInterface) ServicesReadConfigurationsWithResponse(ctx context.Context, reqEditors ...client.RequestEditorFn) (*client.ServicesReadConfigurationsResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.ServicesReadConfigurationsResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...client.RequestEditorFn) (*client.ServicesReadConfigurationsResp, error)); ok {
		return rf(ctx, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...client.RequestEditorFn) *client.ServicesReadConfigurationsResp); ok {
		r0 = rf(ctx, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ServicesReadConfigurationsResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServicesReadSecurityHubConfigurationWithResponse provides a mock function with given fields: ctx, reqEditors
func (_m *ClientWithResponsesInterface) ServicesReadSecurityHubConfigurationWithResponse(ctx context.Context, reqEditors ...client.RequestEditorFn) (*client.ServicesReadSecurityHubConfigurationResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.ServicesReadSecurityHubConfigurationResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...client.RequestEditorFn) (*client.ServicesReadSecurityHubConfigurationResp, error)); ok {
		return rf(ctx, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...client.RequestEditorFn) *client.ServicesReadSecurityHubConfigurationResp); ok {
		r0 = rf(ctx, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ServicesReadSecurityHubConfigurationResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TasksReadTaskWithResponse provides a mock function with given fields: ctx, taskId, reqEditors
func (_m *ClientWithResponsesInterface) TasksReadTaskWithResponse(ctx context.Context, taskId string, reqEditors ...client.RequestEditorFn) (*client.TasksReadTaskResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, taskId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.TasksReadTaskResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...client.RequestEditorFn) (*client.TasksReadTaskResp, error)); ok {
		return rf(ctx, taskId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...client.RequestEditorFn) *client.TasksReadTaskResp); ok {
		r0 = rf(ctx, taskId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.TasksReadTaskResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, taskId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TeamsCreateApiTokenWithBodyWithResponse provides a mock function with given fields: ctx, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) TeamsCreateApiTokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*client.TeamsCreateApiTokenResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.TeamsCreateApiTokenResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...client.RequestEditorFn) (*client.TeamsCreateApiTokenResp, error)); ok {
		return rf(ctx, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...client.RequestEditorFn) *client.TeamsCreateApiTokenResp); ok {
		r0 = rf(ctx, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.TeamsCreateApiTokenResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, io.Reader, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TeamsCreateApiTokenWithResponse provides a mock function with given fields: ctx, body, reqEditors
func (_m *ClientWithResponsesInterface) TeamsCreateApiTokenWithResponse(ctx context.Context, body models.TeamsCreateApiToken, reqEditors ...client.RequestEditorFn) (*client.TeamsCreateApiTokenResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.TeamsCreateApiTokenResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.TeamsCreateApiToken, ...client.RequestEditorFn) (*client.TeamsCreateApiTokenResp, error)); ok {
		return rf(ctx, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.TeamsCreateApiToken, ...client.RequestEditorFn) *client.TeamsCreateApiTokenResp); ok {
		r0 = rf(ctx, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.TeamsCreateApiTokenResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.TeamsCreateApiToken, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TeamsCreateGroupWithBodyWithResponse provides a mock function with given fields: ctx, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) TeamsCreateGroupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*client.TeamsCreateGroupResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.TeamsCreateGroupResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...client.RequestEditorFn) (*client.TeamsCreateGroupResp, error)); ok {
		return rf(ctx, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...client.RequestEditorFn) *client.TeamsCreateGroupResp); ok {
		r0 = rf(ctx, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.TeamsCreateGroupResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, io.Reader, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TeamsCreateGroupWithResponse provides a mock function with given fields: ctx, body, reqEditors
func (_m *ClientWithResponsesInterface) TeamsCreateGroupWithResponse(ctx context.Context, body models.TeamsCreateGroup, reqEditors ...client.RequestEditorFn) (*client.TeamsCreateGroupResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.TeamsCreateGroupResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.TeamsCreateGroup, ...client.RequestEditorFn) (*client.TeamsCreateGroupResp, error)); ok {
		return rf(ctx, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.TeamsCreateGroup, ...client.RequestEditorFn) *client.TeamsCreateGroupResp); ok {
		r0 = rf(ctx, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.TeamsCreateGroupResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.TeamsCreateGroup, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TeamsCreateUserWithBodyWithResponse provides a mock function with given fields: ctx, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) TeamsCreateUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*client.TeamsCreateUserResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.TeamsCreateUserResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...client.RequestEditorFn) (*client.TeamsCreateUserResp, error)); ok {
		return rf(ctx, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...client.RequestEditorFn) *client.TeamsCreateUserResp); ok {
		r0 = rf(ctx, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.TeamsCreateUserResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, io.Reader, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TeamsCreateUserWithResponse provides a mock function with given fields: ctx, body, reqEditors
func (_m *ClientWithResponsesInterface) TeamsCreateUserWithResponse(ctx context.Context, body models.TeamsCreateUser, reqEditors ...client.RequestEditorFn) (*client.TeamsCreateUserResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.TeamsCreateUserResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.TeamsCreateUser, ...client.RequestEditorFn) (*client.TeamsCreateUserResp, error)); ok {
		return rf(ctx, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.TeamsCreateUser, ...client.RequestEditorFn) *client.TeamsCreateUserResp); ok {
		r0 = rf(ctx, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.TeamsCreateUserResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.TeamsCreateUser, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TeamsDeleteApiTokenWithResponse provides a mock function with given fields: ctx, accessKey, reqEditors
func (_m *ClientWithResponsesInterface) TeamsDeleteApiTokenWithResponse(ctx context.Context, accessKey string, reqEditors ...client.RequestEditorFn) (*client.TeamsDeleteApiTokenResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, accessKey)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.TeamsDeleteApiTokenResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...client.RequestEditorFn) (*client.TeamsDeleteApiTokenResp, error)); ok {
		return rf(ctx, accessKey, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...client.RequestEditorFn) *client.TeamsDeleteApiTokenResp); ok {
		r0 = rf(ctx, accessKey, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.TeamsDeleteApiTokenResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, accessKey, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TeamsDeleteGroupWithResponse provides a mock function with given fields: ctx, groupId, reqEditors
func (_m *ClientWithResponsesInterface) TeamsDeleteGroupWithResponse(ctx context.Context, groupId string, reqEditors ...client.RequestEditorFn) (*client.TeamsDeleteGroupResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, groupId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.TeamsDeleteGroupResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...client.RequestEditorFn) (*client.TeamsDeleteGroupResp, error)); ok {
		return rf(ctx, groupId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...client.RequestEditorFn) *client.TeamsDeleteGroupResp); ok {
		r0 = rf(ctx, groupId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.TeamsDeleteGroupResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, groupId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TeamsDeleteUserWithResponse provides a mock function with given fields: ctx, userId, reqEditors
func (_m *ClientWithResponsesInterface) TeamsDeleteUserWithResponse(ctx context.Context, userId string, reqEditors ...client.RequestEditorFn) (*client.TeamsDeleteUserResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, userId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.TeamsDeleteUserResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...client.RequestEditorFn) (*client.TeamsDeleteUserResp, error)); ok {
		return rf(ctx, userId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...client.RequestEditorFn) *client.TeamsDeleteUserResp); ok {
		r0 = rf(ctx, userId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.TeamsDeleteUserResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, userId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TeamsFetchCurrentUserWithResponse provides a mock function with given fields: ctx, reqEditors
func (_m *ClientWithResponsesInterface) TeamsFetchCurrentUserWithResponse(ctx context.Context, reqEditors ...client.RequestEditorFn) (*client.TeamsFetchCurrentUserResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.TeamsFetchCurrentUserResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...client.RequestEditorFn) (*client.TeamsFetchCurrentUserResp, error)); ok {
		return rf(ctx, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...client.RequestEditorFn) *client.TeamsFetchCurrentUserResp); ok {
		r0 = rf(ctx, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.TeamsFetchCurrentUserResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TeamsReadApiTokenWithResponse provides a mock function with given fields: ctx, accessKey, params, reqEditors
func (_m *ClientWithResponsesInterface) TeamsReadApiTokenWithResponse(ctx context.Context, accessKey string, params *models.TeamsReadApiTokenParams, reqEditors ...client.RequestEditorFn) (*client.TeamsReadApiTokenResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, accessKey, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.TeamsReadApiTokenResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *models.TeamsReadApiTokenParams, ...client.RequestEditorFn) (*client.TeamsReadApiTokenResp, error)); ok {
		return rf(ctx, accessKey, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *models.TeamsReadApiTokenParams, ...client.RequestEditorFn) *client.TeamsReadApiTokenResp); ok {
		r0 = rf(ctx, accessKey, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.TeamsReadApiTokenResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *models.TeamsReadApiTokenParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, accessKey, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TeamsReadApiTokensWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *ClientWithResponsesInterface) TeamsReadApiTokensWithResponse(ctx context.Context, params *models.TeamsReadApiTokensParams, reqEditors ...client.RequestEditorFn) (*client.TeamsReadApiTokensResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.TeamsReadApiTokensResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.TeamsReadApiTokensParams, ...client.RequestEditorFn) (*client.TeamsReadApiTokensResp, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.TeamsReadApiTokensParams, ...client.RequestEditorFn) *client.TeamsReadApiTokensResp); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.TeamsReadApiTokensResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.TeamsReadApiTokensParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TeamsReadGroupWithResponse provides a mock function with given fields: ctx, groupId, reqEditors
func (_m *ClientWithResponsesInterface) TeamsReadGroupWithResponse(ctx context.Context, groupId string, reqEditors ...client.RequestEditorFn) (*client.TeamsReadGroupResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, groupId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.TeamsReadGroupResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...client.RequestEditorFn) (*client.TeamsReadGroupResp, error)); ok {
		return rf(ctx, groupId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...client.RequestEditorFn) *client.TeamsReadGroupResp); ok {
		r0 = rf(ctx, groupId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.TeamsReadGroupResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, groupId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TeamsReadGroupsWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *ClientWithResponsesInterface) TeamsReadGroupsWithResponse(ctx context.Context, params *models.TeamsReadGroupsParams, reqEditors ...client.RequestEditorFn) (*client.TeamsReadGroupsResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.TeamsReadGroupsResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.TeamsReadGroupsParams, ...client.RequestEditorFn) (*client.TeamsReadGroupsResp, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.TeamsReadGroupsParams, ...client.RequestEditorFn) *client.TeamsReadGroupsResp); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.TeamsReadGroupsResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.TeamsReadGroupsParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TeamsReadIdamUserWithResponse provides a mock function with given fields: ctx, orgId, reqEditors
func (_m *ClientWithResponsesInterface) TeamsReadIdamUserWithResponse(ctx context.Context, orgId string, reqEditors ...client.RequestEditorFn) (*client.TeamsReadIdamUserResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, orgId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.TeamsReadIdamUserResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...client.RequestEditorFn) (*client.TeamsReadIdamUserResp, error)); ok {
		return rf(ctx, orgId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...client.RequestEditorFn) *client.TeamsReadIdamUserResp); ok {
		r0 = rf(ctx, orgId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.TeamsReadIdamUserResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, orgId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TeamsReadIdamUsersWithResponse provides a mock function with given fields: ctx, reqEditors
func (_m *ClientWithResponsesInterface) TeamsReadIdamUsersWithResponse(ctx context.Context, reqEditors ...client.RequestEditorFn) (*client.TeamsReadIdamUsersResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.TeamsReadIdamUsersResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...client.RequestEditorFn) (*client.TeamsReadIdamUsersResp, error)); ok {
		return rf(ctx, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...client.RequestEditorFn) *client.TeamsReadIdamUsersResp); ok {
		r0 = rf(ctx, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.TeamsReadIdamUsersResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TeamsReadUserWithResponse provides a mock function with given fields: ctx, userId, reqEditors
func (_m *ClientWithResponsesInterface) TeamsReadUserWithResponse(ctx context.Context, userId string, reqEditors ...client.RequestEditorFn) (*client.TeamsReadUserResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, userId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.TeamsReadUserResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...client.RequestEditorFn) (*client.TeamsReadUserResp, error)); ok {
		return rf(ctx, userId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...client.RequestEditorFn) *client.TeamsReadUserResp); ok {
		r0 = rf(ctx, userId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.TeamsReadUserResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, userId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TeamsReadUsersWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *ClientWithResponsesInterface) TeamsReadUsersWithResponse(ctx context.Context, params *models.TeamsReadUsersParams, reqEditors ...client.RequestEditorFn) (*client.TeamsReadUsersResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.TeamsReadUsersResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.TeamsReadUsersParams, ...client.RequestEditorFn) (*client.TeamsReadUsersResp, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.TeamsReadUsersParams, ...client.RequestEditorFn) *client.TeamsReadUsersResp); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.TeamsReadUsersResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.TeamsReadUsersParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TeamsUpdateApiTokenWithBodyWithResponse provides a mock function with given fields: ctx, accessKey, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) TeamsUpdateApiTokenWithBodyWithResponse(ctx context.Context, accessKey string, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*client.TeamsUpdateApiTokenResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, accessKey, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.TeamsUpdateApiTokenResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...client.RequestEditorFn) (*client.TeamsUpdateApiTokenResp, error)); ok {
		return rf(ctx, accessKey, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...client.RequestEditorFn) *client.TeamsUpdateApiTokenResp); ok {
		r0 = rf(ctx, accessKey, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.TeamsUpdateApiTokenResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, accessKey, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TeamsUpdateApiTokenWithResponse provides a mock function with given fields: ctx, accessKey, body, reqEditors
func (_m *ClientWithResponsesInterface) TeamsUpdateApiTokenWithResponse(ctx context.Context, accessKey string, body models.TeamsUpdateApiToken, reqEditors ...client.RequestEditorFn) (*client.TeamsUpdateApiTokenResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, accessKey, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.TeamsUpdateApiTokenResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, models.TeamsUpdateApiToken, ...client.RequestEditorFn) (*client.TeamsUpdateApiTokenResp, error)); ok {
		return rf(ctx, accessKey, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, models.TeamsUpdateApiToken, ...client.RequestEditorFn) *client.TeamsUpdateApiTokenResp); ok {
		r0 = rf(ctx, accessKey, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.TeamsUpdateApiTokenResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, models.TeamsUpdateApiToken, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, accessKey, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TeamsUpdateGroupMembersWithBodyWithResponse provides a mock function with given fields: ctx, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) TeamsUpdateGroupMembersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*client.TeamsUpdateGroupMembersResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.TeamsUpdateGroupMembersResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...client.RequestEditorFn) (*client.TeamsUpdateGroupMembersResp, error)); ok {
		return rf(ctx, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...client.RequestEditorFn) *client.TeamsUpdateGroupMembersResp); ok {
		r0 = rf(ctx, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.TeamsUpdateGroupMembersResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, io.Reader, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TeamsUpdateGroupMembersWithResponse provides a mock function with given fields: ctx, body, reqEditors
func (_m *ClientWithResponsesInterface) TeamsUpdateGroupMembersWithResponse(ctx context.Context, body models.TeamsUpdateGroupMembers, reqEditors ...client.RequestEditorFn) (*client.TeamsUpdateGroupMembersResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.TeamsUpdateGroupMembersResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.TeamsUpdateGroupMembers, ...client.RequestEditorFn) (*client.TeamsUpdateGroupMembersResp, error)); ok {
		return rf(ctx, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.TeamsUpdateGroupMembers, ...client.RequestEditorFn) *client.TeamsUpdateGroupMembersResp); ok {
		r0 = rf(ctx, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.TeamsUpdateGroupMembersResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.TeamsUpdateGroupMembers, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TeamsUpdateGroupWithBodyWithResponse provides a mock function with given fields: ctx, groupId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) TeamsUpdateGroupWithBodyWithResponse(ctx context.Context, groupId string, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*client.TeamsUpdateGroupResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, groupId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.TeamsUpdateGroupResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...client.RequestEditorFn) (*client.TeamsUpdateGroupResp, error)); ok {
		return rf(ctx, groupId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...client.RequestEditorFn) *client.TeamsUpdateGroupResp); ok {
		r0 = rf(ctx, groupId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.TeamsUpdateGroupResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, groupId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TeamsUpdateGroupWithResponse provides a mock function with given fields: ctx, groupId, body, reqEditors
func (_m *ClientWithResponsesInterface) TeamsUpdateGroupWithResponse(ctx context.Context, groupId string, body models.TeamsUpdateGroup, reqEditors ...client.RequestEditorFn) (*client.TeamsUpdateGroupResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, groupId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.TeamsUpdateGroupResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, models.TeamsUpdateGroup, ...client.RequestEditorFn) (*client.TeamsUpdateGroupResp, error)); ok {
		return rf(ctx, groupId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, models.TeamsUpdateGroup, ...client.RequestEditorFn) *client.TeamsUpdateGroupResp); ok {
		r0 = rf(ctx, groupId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.TeamsUpdateGroupResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, models.TeamsUpdateGroup, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, groupId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TeamsUpdateUserInviteWithResponse provides a mock function with given fields: ctx, userId, reqEditors
func (_m *ClientWithResponsesInterface) TeamsUpdateUserInviteWithResponse(ctx context.Context, userId string, reqEditors ...client.RequestEditorFn) (*client.TeamsUpdateUserInviteResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, userId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.TeamsUpdateUserInviteResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...client.RequestEditorFn) (*client.TeamsUpdateUserInviteResp, error)); ok {
		return rf(ctx, userId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...client.RequestEditorFn) *client.TeamsUpdateUserInviteResp); ok {
		r0 = rf(ctx, userId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.TeamsUpdateUserInviteResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, userId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TeamsUpdateUserPasswordWithResponse provides a mock function with given fields: ctx, userId, reqEditors
func (_m *ClientWithResponsesInterface) TeamsUpdateUserPasswordWithResponse(ctx context.Context, userId string, reqEditors ...client.RequestEditorFn) (*client.TeamsUpdateUserPasswordResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, userId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.TeamsUpdateUserPasswordResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...client.RequestEditorFn) (*client.TeamsUpdateUserPasswordResp, error)); ok {
		return rf(ctx, userId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...client.RequestEditorFn) *client.TeamsUpdateUserPasswordResp); ok {
		r0 = rf(ctx, userId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.TeamsUpdateUserPasswordResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, userId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TeamsUpdateUserWithBodyWithResponse provides a mock function with given fields: ctx, userId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) TeamsUpdateUserWithBodyWithResponse(ctx context.Context, userId string, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*client.TeamsUpdateUserResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, userId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.TeamsUpdateUserResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...client.RequestEditorFn) (*client.TeamsUpdateUserResp, error)); ok {
		return rf(ctx, userId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...client.RequestEditorFn) *client.TeamsUpdateUserResp); ok {
		r0 = rf(ctx, userId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.TeamsUpdateUserResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, userId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TeamsUpdateUserWithResponse provides a mock function with given fields: ctx, userId, body, reqEditors
func (_m *ClientWithResponsesInterface) TeamsUpdateUserWithResponse(ctx context.Context, userId string, body models.TeamsUpdateUser, reqEditors ...client.RequestEditorFn) (*client.TeamsUpdateUserResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, userId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.TeamsUpdateUserResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, models.TeamsUpdateUser, ...client.RequestEditorFn) (*client.TeamsUpdateUserResp, error)); ok {
		return rf(ctx, userId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, models.TeamsUpdateUser, ...client.RequestEditorFn) *client.TeamsUpdateUserResp); ok {
		r0 = rf(ctx, userId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.TeamsUpdateUserResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, models.TeamsUpdateUser, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, userId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WorkloadsCreateCatalogueItemWithBodyWithResponse provides a mock function with given fields: ctx, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) WorkloadsCreateCatalogueItemWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*client.WorkloadsCreateCatalogueItemResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.WorkloadsCreateCatalogueItemResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...client.RequestEditorFn) (*client.WorkloadsCreateCatalogueItemResp, error)); ok {
		return rf(ctx, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...client.RequestEditorFn) *client.WorkloadsCreateCatalogueItemResp); ok {
		r0 = rf(ctx, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.WorkloadsCreateCatalogueItemResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, io.Reader, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WorkloadsCreateCatalogueItemWithResponse provides a mock function with given fields: ctx, body, reqEditors
func (_m *ClientWithResponsesInterface) WorkloadsCreateCatalogueItemWithResponse(ctx context.Context, body models.WorkloadsCreateCatalogueItem, reqEditors ...client.RequestEditorFn) (*client.WorkloadsCreateCatalogueItemResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.WorkloadsCreateCatalogueItemResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.WorkloadsCreateCatalogueItem, ...client.RequestEditorFn) (*client.WorkloadsCreateCatalogueItemResp, error)); ok {
		return rf(ctx, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.WorkloadsCreateCatalogueItem, ...client.RequestEditorFn) *client.WorkloadsCreateCatalogueItemResp); ok {
		r0 = rf(ctx, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.WorkloadsCreateCatalogueItemResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.WorkloadsCreateCatalogueItem, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WorkloadsCreateCatalogueVersionWithBodyWithResponse provides a mock function with given fields: ctx, catalogueId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) WorkloadsCreateCatalogueVersionWithBodyWithResponse(ctx context.Context, catalogueId string, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*client.WorkloadsCreateCatalogueVersionResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, catalogueId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.WorkloadsCreateCatalogueVersionResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...client.RequestEditorFn) (*client.WorkloadsCreateCatalogueVersionResp, error)); ok {
		return rf(ctx, catalogueId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...client.RequestEditorFn) *client.WorkloadsCreateCatalogueVersionResp); ok {
		r0 = rf(ctx, catalogueId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.WorkloadsCreateCatalogueVersionResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, catalogueId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WorkloadsCreateCatalogueVersionWithResponse provides a mock function with given fields: ctx, catalogueId, body, reqEditors
func (_m *ClientWithResponsesInterface) WorkloadsCreateCatalogueVersionWithResponse(ctx context.Context, catalogueId string, body models.WorkloadsCreateCatalogueVersion, reqEditors ...client.RequestEditorFn) (*client.WorkloadsCreateCatalogueVersionResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, catalogueId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.WorkloadsCreateCatalogueVersionResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, models.WorkloadsCreateCatalogueVersion, ...client.RequestEditorFn) (*client.WorkloadsCreateCatalogueVersionResp, error)); ok {
		return rf(ctx, catalogueId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, models.WorkloadsCreateCatalogueVersion, ...client.RequestEditorFn) *client.WorkloadsCreateCatalogueVersionResp); ok {
		r0 = rf(ctx, catalogueId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.WorkloadsCreateCatalogueVersionResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, models.WorkloadsCreateCatalogueVersion, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, catalogueId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WorkloadsCreateWorkloadWithBodyWithResponse provides a mock function with given fields: ctx, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) WorkloadsCreateWorkloadWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*client.WorkloadsCreateWorkloadResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.WorkloadsCreateWorkloadResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...client.RequestEditorFn) (*client.WorkloadsCreateWorkloadResp, error)); ok {
		return rf(ctx, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...client.RequestEditorFn) *client.WorkloadsCreateWorkloadResp); ok {
		r0 = rf(ctx, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.WorkloadsCreateWorkloadResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, io.Reader, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WorkloadsCreateWorkloadWithResponse provides a mock function with given fields: ctx, body, reqEditors
func (_m *ClientWithResponsesInterface) WorkloadsCreateWorkloadWithResponse(ctx context.Context, body models.WorkloadsCreateWorkload, reqEditors ...client.RequestEditorFn) (*client.WorkloadsCreateWorkloadResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.WorkloadsCreateWorkloadResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.WorkloadsCreateWorkload, ...client.RequestEditorFn) (*client.WorkloadsCreateWorkloadResp, error)); ok {
		return rf(ctx, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.WorkloadsCreateWorkload, ...client.RequestEditorFn) *client.WorkloadsCreateWorkloadResp); ok {
		r0 = rf(ctx, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.WorkloadsCreateWorkloadResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.WorkloadsCreateWorkload, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WorkloadsDeleteCatalogueItemWithResponse provides a mock function with given fields: ctx, catalogueId, reqEditors
func (_m *ClientWithResponsesInterface) WorkloadsDeleteCatalogueItemWithResponse(ctx context.Context, catalogueId string, reqEditors ...client.RequestEditorFn) (*client.WorkloadsDeleteCatalogueItemResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, catalogueId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.WorkloadsDeleteCatalogueItemResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...client.RequestEditorFn) (*client.WorkloadsDeleteCatalogueItemResp, error)); ok {
		return rf(ctx, catalogueId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...client.RequestEditorFn) *client.WorkloadsDeleteCatalogueItemResp); ok {
		r0 = rf(ctx, catalogueId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.WorkloadsDeleteCatalogueItemResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, catalogueId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WorkloadsDeleteCatalogueVersionWithResponse provides a mock function with given fields: ctx, catalogueId, versionId, reqEditors
func (_m *ClientWithResponsesInterface) WorkloadsDeleteCatalogueVersionWithResponse(ctx context.Context, catalogueId string, versionId string, reqEditors ...client.RequestEditorFn) (*client.WorkloadsDeleteCatalogueVersionResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, catalogueId, versionId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.WorkloadsDeleteCatalogueVersionResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...client.RequestEditorFn) (*client.WorkloadsDeleteCatalogueVersionResp, error)); ok {
		return rf(ctx, catalogueId, versionId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...client.RequestEditorFn) *client.WorkloadsDeleteCatalogueVersionResp); ok {
		r0 = rf(ctx, catalogueId, versionId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.WorkloadsDeleteCatalogueVersionResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, catalogueId, versionId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WorkloadsDeleteWorkloadWithResponse provides a mock function with given fields: ctx, workloadId, reqEditors
func (_m *ClientWithResponsesInterface) WorkloadsDeleteWorkloadWithResponse(ctx context.Context, workloadId string, reqEditors ...client.RequestEditorFn) (*client.WorkloadsDeleteWorkloadResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, workloadId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.WorkloadsDeleteWorkloadResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...client.RequestEditorFn) (*client.WorkloadsDeleteWorkloadResp, error)); ok {
		return rf(ctx, workloadId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...client.RequestEditorFn) *client.WorkloadsDeleteWorkloadResp); ok {
		r0 = rf(ctx, workloadId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.WorkloadsDeleteWorkloadResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, workloadId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WorkloadsReadCatalogueItemWithResponse provides a mock function with given fields: ctx, catalogueId, params, reqEditors
func (_m *ClientWithResponsesInterface) WorkloadsReadCatalogueItemWithResponse(ctx context.Context, catalogueId string, params *models.WorkloadsReadCatalogueItemParams, reqEditors ...client.RequestEditorFn) (*client.WorkloadsReadCatalogueItemResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, catalogueId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.WorkloadsReadCatalogueItemResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *models.WorkloadsReadCatalogueItemParams, ...client.RequestEditorFn) (*client.WorkloadsReadCatalogueItemResp, error)); ok {
		return rf(ctx, catalogueId, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *models.WorkloadsReadCatalogueItemParams, ...client.RequestEditorFn) *client.WorkloadsReadCatalogueItemResp); ok {
		r0 = rf(ctx, catalogueId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.WorkloadsReadCatalogueItemResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *models.WorkloadsReadCatalogueItemParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, catalogueId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WorkloadsReadCatalogueItemsWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *ClientWithResponsesInterface) WorkloadsReadCatalogueItemsWithResponse(ctx context.Context, params *models.WorkloadsReadCatalogueItemsParams, reqEditors ...client.RequestEditorFn) (*client.WorkloadsReadCatalogueItemsResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.WorkloadsReadCatalogueItemsResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.WorkloadsReadCatalogueItemsParams, ...client.RequestEditorFn) (*client.WorkloadsReadCatalogueItemsResp, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.WorkloadsReadCatalogueItemsParams, ...client.RequestEditorFn) *client.WorkloadsReadCatalogueItemsResp); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.WorkloadsReadCatalogueItemsResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.WorkloadsReadCatalogueItemsParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WorkloadsReadCatalogueManifestWithResponse provides a mock function with given fields: ctx, versionId, reqEditors
func (_m *ClientWithResponsesInterface) WorkloadsReadCatalogueManifestWithResponse(ctx context.Context, versionId string, reqEditors ...client.RequestEditorFn) (*client.WorkloadsReadCatalogueManifestResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, versionId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.WorkloadsReadCatalogueManifestResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...client.RequestEditorFn) (*client.WorkloadsReadCatalogueManifestResp, error)); ok {
		return rf(ctx, versionId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...client.RequestEditorFn) *client.WorkloadsReadCatalogueManifestResp); ok {
		r0 = rf(ctx, versionId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.WorkloadsReadCatalogueManifestResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, versionId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WorkloadsReadCatalogueTemplateWithResponse provides a mock function with given fields: ctx, versionId, name, reqEditors
func (_m *ClientWithResponsesInterface) WorkloadsReadCatalogueTemplateWithResponse(ctx context.Context, versionId string, name string, reqEditors ...client.RequestEditorFn) (*client.WorkloadsReadCatalogueTemplateResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, versionId, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.WorkloadsReadCatalogueTemplateResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...client.RequestEditorFn) (*client.WorkloadsReadCatalogueTemplateResp, error)); ok {
		return rf(ctx, versionId, name, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...client.RequestEditorFn) *client.WorkloadsReadCatalogueTemplateResp); ok {
		r0 = rf(ctx, versionId, name, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.WorkloadsReadCatalogueTemplateResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, versionId, name, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WorkloadsReadCatalogueVersionWithResponse provides a mock function with given fields: ctx, catalogueId, versionId, params, reqEditors
func (_m *ClientWithResponsesInterface) WorkloadsReadCatalogueVersionWithResponse(ctx context.Context, catalogueId string, versionId string, params *models.WorkloadsReadCatalogueVersionParams, reqEditors ...client.RequestEditorFn) (*client.WorkloadsReadCatalogueVersionResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, catalogueId, versionId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.WorkloadsReadCatalogueVersionResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *models.WorkloadsReadCatalogueVersionParams, ...client.RequestEditorFn) (*client.WorkloadsReadCatalogueVersionResp, error)); ok {
		return rf(ctx, catalogueId, versionId, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *models.WorkloadsReadCatalogueVersionParams, ...client.RequestEditorFn) *client.WorkloadsReadCatalogueVersionResp); ok {
		r0 = rf(ctx, catalogueId, versionId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.WorkloadsReadCatalogueVersionResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, *models.WorkloadsReadCatalogueVersionParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, catalogueId, versionId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WorkloadsReadWorkloadWithResponse provides a mock function with given fields: ctx, workloadId, params, reqEditors
func (_m *ClientWithResponsesInterface) WorkloadsReadWorkloadWithResponse(ctx context.Context, workloadId string, params *models.WorkloadsReadWorkloadParams, reqEditors ...client.RequestEditorFn) (*client.WorkloadsReadWorkloadResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, workloadId, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.WorkloadsReadWorkloadResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *models.WorkloadsReadWorkloadParams, ...client.RequestEditorFn) (*client.WorkloadsReadWorkloadResp, error)); ok {
		return rf(ctx, workloadId, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *models.WorkloadsReadWorkloadParams, ...client.RequestEditorFn) *client.WorkloadsReadWorkloadResp); ok {
		r0 = rf(ctx, workloadId, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.WorkloadsReadWorkloadResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *models.WorkloadsReadWorkloadParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, workloadId, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WorkloadsReadWorkloadsWithResponse provides a mock function with given fields: ctx, params, reqEditors
func (_m *ClientWithResponsesInterface) WorkloadsReadWorkloadsWithResponse(ctx context.Context, params *models.WorkloadsReadWorkloadsParams, reqEditors ...client.RequestEditorFn) (*client.WorkloadsReadWorkloadsResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.WorkloadsReadWorkloadsResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.WorkloadsReadWorkloadsParams, ...client.RequestEditorFn) (*client.WorkloadsReadWorkloadsResp, error)); ok {
		return rf(ctx, params, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.WorkloadsReadWorkloadsParams, ...client.RequestEditorFn) *client.WorkloadsReadWorkloadsResp); ok {
		r0 = rf(ctx, params, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.WorkloadsReadWorkloadsResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.WorkloadsReadWorkloadsParams, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, params, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WorkloadsUpdateAllWithBodyWithResponse provides a mock function with given fields: ctx, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) WorkloadsUpdateAllWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*client.WorkloadsUpdateAllResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.WorkloadsUpdateAllResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...client.RequestEditorFn) (*client.WorkloadsUpdateAllResp, error)); ok {
		return rf(ctx, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...client.RequestEditorFn) *client.WorkloadsUpdateAllResp); ok {
		r0 = rf(ctx, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.WorkloadsUpdateAllResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, io.Reader, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WorkloadsUpdateAllWithResponse provides a mock function with given fields: ctx, body, reqEditors
func (_m *ClientWithResponsesInterface) WorkloadsUpdateAllWithResponse(ctx context.Context, body models.WorkloadsUpdateAll, reqEditors ...client.RequestEditorFn) (*client.WorkloadsUpdateAllResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.WorkloadsUpdateAllResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.WorkloadsUpdateAll, ...client.RequestEditorFn) (*client.WorkloadsUpdateAllResp, error)); ok {
		return rf(ctx, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.WorkloadsUpdateAll, ...client.RequestEditorFn) *client.WorkloadsUpdateAllResp); ok {
		r0 = rf(ctx, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.WorkloadsUpdateAllResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.WorkloadsUpdateAll, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WorkloadsUpdateWorkloadWithBodyWithResponse provides a mock function with given fields: ctx, workloadId, contentType, body, reqEditors
func (_m *ClientWithResponsesInterface) WorkloadsUpdateWorkloadWithBodyWithResponse(ctx context.Context, workloadId string, contentType string, body io.Reader, reqEditors ...client.RequestEditorFn) (*client.WorkloadsUpdateWorkloadResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, workloadId, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.WorkloadsUpdateWorkloadResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...client.RequestEditorFn) (*client.WorkloadsUpdateWorkloadResp, error)); ok {
		return rf(ctx, workloadId, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...client.RequestEditorFn) *client.WorkloadsUpdateWorkloadResp); ok {
		r0 = rf(ctx, workloadId, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.WorkloadsUpdateWorkloadResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, workloadId, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WorkloadsUpdateWorkloadWithResponse provides a mock function with given fields: ctx, workloadId, body, reqEditors
func (_m *ClientWithResponsesInterface) WorkloadsUpdateWorkloadWithResponse(ctx context.Context, workloadId string, body models.WorkloadsUpdateWorkload, reqEditors ...client.RequestEditorFn) (*client.WorkloadsUpdateWorkloadResp, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, workloadId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *client.WorkloadsUpdateWorkloadResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, models.WorkloadsUpdateWorkload, ...client.RequestEditorFn) (*client.WorkloadsUpdateWorkloadResp, error)); ok {
		return rf(ctx, workloadId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, models.WorkloadsUpdateWorkload, ...client.RequestEditorFn) *client.WorkloadsUpdateWorkloadResp); ok {
		r0 = rf(ctx, workloadId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.WorkloadsUpdateWorkloadResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, models.WorkloadsUpdateWorkload, ...client.RequestEditorFn) error); ok {
		r1 = rf(ctx, workloadId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewClientWithResponsesInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewClientWithResponsesInterface creates a new instance of ClientWithResponsesInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewClientWithResponsesInterface(t mockConstructorTestingTNewClientWithResponsesInterface) *ClientWithResponsesInterface {
	mock := &ClientWithResponsesInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
